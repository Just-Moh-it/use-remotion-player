/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/build/polyfills/process.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/build/polyfills/process.js ***!
  \****************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = __webpack_require__.g.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = __webpack_require__.g.process) == null ? void 0 : _global_process1.env) === \"object\" ? __webpack_require__.g.process : __webpack_require__(/*! ../../compiled/process */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/process/browser.js\");\n\n//# sourceMappingURL=process.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxMy41LjRfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC9wb2x5ZmlsbHMvcHJvY2Vzcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EscUNBQXFDLHFCQUFNLGlGQUFpRixxQkFBTSxrRUFBa0UscUJBQU0sV0FBVyxtQkFBTyxDQUFDLHlLQUF3Qjs7QUFFclAiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDEzLjUuNF9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9wcm9jZXNzLmpzPzA5NDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX2dsb2JhbF9wcm9jZXNzLCBfZ2xvYmFsX3Byb2Nlc3MxO1xubW9kdWxlLmV4cG9ydHMgPSAoKF9nbG9iYWxfcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzKSA9PSBudWxsID8gdm9pZCAwIDogX2dsb2JhbF9wcm9jZXNzLmVudikgJiYgdHlwZW9mICgoX2dsb2JhbF9wcm9jZXNzMSA9IGdsb2JhbC5wcm9jZXNzKSA9PSBudWxsID8gdm9pZCAwIDogX2dsb2JhbF9wcm9jZXNzMS5lbnYpID09PSBcIm9iamVjdFwiID8gZ2xvYmFsLnByb2Nlc3MgOiByZXF1aXJlKFwiLi4vLi4vY29tcGlsZWQvcHJvY2Vzc1wiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvY2Vzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/build/polyfills/process.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fmohit%2Fdev%2Fopen-source%2Fuse-remotion-player%2Fpackages%2Fexample%2Fapp%2Fpage.tsx&server=false!":
/*!*********************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fmohit%2Fdev%2Fopen-source%2Fuse-remotion-player%2Fpackages%2Fexample%2Fapp%2Fpage.tsx&server=false! ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/page.tsx */ \"(app-pages-browser)/./app/page.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxMy41LjRfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1mbGlnaHQtY2xpZW50LWVudHJ5LWxvYWRlci5qcz9tb2R1bGVzPSUyRlVzZXJzJTJGbW9oaXQlMkZkZXYlMkZvcGVuLXNvdXJjZSUyRnVzZS1yZW1vdGlvbi1wbGF5ZXIlMkZwYWNrYWdlcyUyRmV4YW1wbGUlMkZhcHAlMkZwYWdlLnRzeCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/YjU1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9tb2hpdC9kZXYvb3Blbi1zb3VyY2UvdXNlLXJlbW90aW9uLXBsYXllci9wYWNrYWdlcy9leGFtcGxlL2FwcC9wYWdlLnRzeFwiKSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fmohit%2Fdev%2Fopen-source%2Fuse-remotion-player%2Fpackages%2Fexample%2Fapp%2Fpage.tsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ HomePage; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var use_remotion_player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! use-remotion-player */ \"(app-pages-browser)/../use-remotion-player/dist/index.mjs\");\n/* harmony import */ var _remotion_Test__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../remotion/Test */ \"(app-pages-browser)/./remotion/Test.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\n\nfunction HomePage() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(use_remotion_player__WEBPACK_IMPORTED_MODULE_2__.CustomizablePlayer, {\n            controls: true,\n            component: _remotion_Test__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n            durationInFrames: 30 * 5,\n            compositionHeight: 1920,\n            compositionWidth: 1080,\n            fps: 30,\n            style: {\n                width: 200\n            },\n            onPlay: console.log,\n            onPause: console.log\n        }, void 0, false, {\n            fileName: \"/Users/mohit/dev/open-source/use-remotion-player/packages/example/app/page.tsx\",\n            lineNumber: 10,\n            columnNumber: 7\n        }, this)\n    }, void 0, false);\n}\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9wYWdlLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRTBCO0FBQytCO0FBQ3JCO0FBRXJCLFNBQVNHO0lBQ3RCLHFCQUNFO2tCQUNFLDRFQUFDRixtRUFBa0JBO1lBQ2pCRyxRQUFRO1lBQ1JDLFdBQVdILHNEQUFJQTtZQUNmSSxrQkFBa0IsS0FBSztZQUN2QkMsbUJBQW1CO1lBQ25CQyxrQkFBa0I7WUFDbEJDLEtBQUs7WUFDTEMsT0FBTztnQkFBRUMsT0FBTztZQUFJO1lBQ3BCQyxRQUFRQyxRQUFRQyxHQUFHO1lBQ25CQyxTQUFTRixRQUFRQyxHQUFHOzs7Ozs7O0FBSTVCO0tBaEJ3QlgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL3BhZ2UudHN4Pzc2MDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEN1c3RvbWl6YWJsZVBsYXllciB9IGZyb20gXCJ1c2UtcmVtb3Rpb24tcGxheWVyXCI7XG5pbXBvcnQgVGVzdCBmcm9tIFwiLi4vcmVtb3Rpb24vVGVzdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lUGFnZSgpIHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEN1c3RvbWl6YWJsZVBsYXllclxuICAgICAgICBjb250cm9sc1xuICAgICAgICBjb21wb25lbnQ9e1Rlc3R9XG4gICAgICAgIGR1cmF0aW9uSW5GcmFtZXM9ezMwICogNX1cbiAgICAgICAgY29tcG9zaXRpb25IZWlnaHQ9ezE5MjB9XG4gICAgICAgIGNvbXBvc2l0aW9uV2lkdGg9ezEwODB9XG4gICAgICAgIGZwcz17MzB9XG4gICAgICAgIHN0eWxlPXt7IHdpZHRoOiAyMDAgfX1cbiAgICAgICAgb25QbGF5PXtjb25zb2xlLmxvZ31cbiAgICAgICAgb25QYXVzZT17Y29uc29sZS5sb2d9XG4gICAgICAvPlxuICAgIDwvPlxuICApO1xufVxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiQ3VzdG9taXphYmxlUGxheWVyIiwiVGVzdCIsIkhvbWVQYWdlIiwiY29udHJvbHMiLCJjb21wb25lbnQiLCJkdXJhdGlvbkluRnJhbWVzIiwiY29tcG9zaXRpb25IZWlnaHQiLCJjb21wb3NpdGlvbldpZHRoIiwiZnBzIiwic3R5bGUiLCJ3aWR0aCIsIm9uUGxheSIsImNvbnNvbGUiLCJsb2ciLCJvblBhdXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./remotion/Test.tsx":
/*!***************************!*\
  !*** ./remotion/Test.tsx ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Test; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n\nfunction Test() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n        children: \"Hello world\"\n    }, void 0, false, {\n        fileName: \"/Users/mohit/dev/open-source/use-remotion-player/packages/example/remotion/Test.tsx\",\n        lineNumber: 2,\n        columnNumber: 10\n    }, this);\n}\n_c = Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3JlbW90aW9uL1Rlc3QudHN4IiwibWFwcGluZ3MiOiI7Ozs7OztBQUFlLFNBQVNBO0lBQ3RCLHFCQUFPLDhEQUFDQztrQkFBRzs7Ozs7O0FBQ2I7S0FGd0JEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3JlbW90aW9uL1Rlc3QudHN4P2U5MGMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGVzdCgpIHtcbiAgcmV0dXJuIDxoMT5IZWxsbyB3b3JsZDwvaDE+O1xufVxuIl0sIm5hbWVzIjpbIlRlc3QiLCJoMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./remotion/Test.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/process/browser.js":
/*!*****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/process/browser.js ***!
  \*****************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxMy41LjRfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9wcm9jZXNzL2Jyb3dzZXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVksT0FBTyxnQkFBZ0IsbUJBQW1CLE1BQU0sTUFBTSw0QkFBNEIsbURBQW1ELCtCQUErQixxREFBcUQsWUFBWSxJQUFJLG1DQUFtQyxhQUFhLEtBQUssb0JBQW9CLFNBQVMsbUJBQW1CLElBQUkscUNBQXFDLGVBQWUsS0FBSyx1QkFBdUIsU0FBUyx1QkFBdUIsSUFBSSx1QkFBdUIsbUJBQW1CLHVCQUF1QiwyQ0FBMkMsYUFBYSx1QkFBdUIsSUFBSSxjQUFjLFNBQVMsSUFBSSx3QkFBd0IsU0FBUywwQkFBMEIsNEJBQTRCLHFCQUFxQix1QkFBdUIsZ0RBQWdELGVBQWUsdUJBQXVCLElBQUksWUFBWSxTQUFTLElBQUksc0JBQXNCLFNBQVMsd0JBQXdCLFNBQVMsWUFBWSxNQUFNLFNBQVMsMkJBQTJCLFdBQVcsT0FBTyxRQUFRLGFBQWEsY0FBYyxLQUFLLEtBQUssYUFBYSxjQUFjLHNCQUFzQixNQUFNLE9BQU8sa0NBQWtDLE9BQU8sZUFBZSxTQUFTLElBQUksS0FBSyxhQUFhLE1BQU0sWUFBWSxLQUFLLFdBQVcsT0FBTyxRQUFRLG1CQUFtQix1QkFBdUIsb0NBQW9DLHVCQUF1QixZQUFZLG1CQUFtQixLQUFLLHFCQUFxQixzQkFBc0IscUJBQXFCLHlCQUF5QixtQkFBbUIsV0FBVyxhQUFhLDhCQUE4QixpQ0FBaUMsa0JBQWtCLGVBQWUsU0FBUyxVQUFVLGFBQWEsY0FBYyxpQkFBaUIsVUFBVSxtQkFBbUIsWUFBWSxXQUFXLHNCQUFzQiwwQkFBMEIsWUFBWSx1QkFBdUIsMkJBQTJCLHdCQUF3QixVQUFVLHNCQUFzQixxREFBcUQsaUJBQWlCLFdBQVcsb0JBQW9CLG1EQUFtRCxtQkFBbUIsWUFBWSxTQUFTLGdDQUFnQyxXQUFXLGtCQUFrQixpQkFBaUIsWUFBWSxZQUFZLFdBQVcsSUFBSSxzQ0FBc0MsUUFBUSxRQUFRLGlCQUFpQixpQkFBaUIsbUVBQW1FLFNBQVMsS0FBSywrQkFBK0IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxMy41LjRfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9wcm9jZXNzL2Jyb3dzZXIuanM/YjFiZiJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXt2YXIgZT17MjI5OmZ1bmN0aW9uKGUpe3ZhciB0PWUuZXhwb3J0cz17fTt2YXIgcjt2YXIgbjtmdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfShmdW5jdGlvbigpe3RyeXtpZih0eXBlb2Ygc2V0VGltZW91dD09PVwiZnVuY3Rpb25cIil7cj1zZXRUaW1lb3V0fWVsc2V7cj1kZWZhdWx0U2V0VGltb3V0fX1jYXRjaChlKXtyPWRlZmF1bHRTZXRUaW1vdXR9dHJ5e2lmKHR5cGVvZiBjbGVhclRpbWVvdXQ9PT1cImZ1bmN0aW9uXCIpe249Y2xlYXJUaW1lb3V0fWVsc2V7bj1kZWZhdWx0Q2xlYXJUaW1lb3V0fX1jYXRjaChlKXtuPWRlZmF1bHRDbGVhclRpbWVvdXR9fSkoKTtmdW5jdGlvbiBydW5UaW1lb3V0KGUpe2lmKHI9PT1zZXRUaW1lb3V0KXtyZXR1cm4gc2V0VGltZW91dChlLDApfWlmKChyPT09ZGVmYXVsdFNldFRpbW91dHx8IXIpJiZzZXRUaW1lb3V0KXtyPXNldFRpbWVvdXQ7cmV0dXJuIHNldFRpbWVvdXQoZSwwKX10cnl7cmV0dXJuIHIoZSwwKX1jYXRjaCh0KXt0cnl7cmV0dXJuIHIuY2FsbChudWxsLGUsMCl9Y2F0Y2godCl7cmV0dXJuIHIuY2FsbCh0aGlzLGUsMCl9fX1mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQoZSl7aWYobj09PWNsZWFyVGltZW91dCl7cmV0dXJuIGNsZWFyVGltZW91dChlKX1pZigobj09PWRlZmF1bHRDbGVhclRpbWVvdXR8fCFuKSYmY2xlYXJUaW1lb3V0KXtuPWNsZWFyVGltZW91dDtyZXR1cm4gY2xlYXJUaW1lb3V0KGUpfXRyeXtyZXR1cm4gbihlKX1jYXRjaCh0KXt0cnl7cmV0dXJuIG4uY2FsbChudWxsLGUpfWNhdGNoKHQpe3JldHVybiBuLmNhbGwodGhpcyxlKX19fXZhciBpPVtdO3ZhciBvPWZhbHNlO3ZhciB1O3ZhciBhPS0xO2Z1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpe2lmKCFvfHwhdSl7cmV0dXJufW89ZmFsc2U7aWYodS5sZW5ndGgpe2k9dS5jb25jYXQoaSl9ZWxzZXthPS0xfWlmKGkubGVuZ3RoKXtkcmFpblF1ZXVlKCl9fWZ1bmN0aW9uIGRyYWluUXVldWUoKXtpZihvKXtyZXR1cm59dmFyIGU9cnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO289dHJ1ZTt2YXIgdD1pLmxlbmd0aDt3aGlsZSh0KXt1PWk7aT1bXTt3aGlsZSgrK2E8dCl7aWYodSl7dVthXS5ydW4oKX19YT0tMTt0PWkubGVuZ3RofXU9bnVsbDtvPWZhbHNlO3J1bkNsZWFyVGltZW91dChlKX10Lm5leHRUaWNrPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSl7Zm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl7dFtyLTFdPWFyZ3VtZW50c1tyXX19aS5wdXNoKG5ldyBJdGVtKGUsdCkpO2lmKGkubGVuZ3RoPT09MSYmIW8pe3J1blRpbWVvdXQoZHJhaW5RdWV1ZSl9fTtmdW5jdGlvbiBJdGVtKGUsdCl7dGhpcy5mdW49ZTt0aGlzLmFycmF5PXR9SXRlbS5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX07dC50aXRsZT1cImJyb3dzZXJcIjt0LmJyb3dzZXI9dHJ1ZTt0LmVudj17fTt0LmFyZ3Y9W107dC52ZXJzaW9uPVwiXCI7dC52ZXJzaW9ucz17fTtmdW5jdGlvbiBub29wKCl7fXQub249bm9vcDt0LmFkZExpc3RlbmVyPW5vb3A7dC5vbmNlPW5vb3A7dC5vZmY9bm9vcDt0LnJlbW92ZUxpc3RlbmVyPW5vb3A7dC5yZW1vdmVBbGxMaXN0ZW5lcnM9bm9vcDt0LmVtaXQ9bm9vcDt0LnByZXBlbmRMaXN0ZW5lcj1ub29wO3QucHJlcGVuZE9uY2VMaXN0ZW5lcj1ub29wO3QubGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybltdfTt0LmJpbmRpbmc9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3QuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCJ9O3QuY2hkaXI9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkXCIpfTt0LnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fX07dmFyIHQ9e307ZnVuY3Rpb24gX19uY2N3cGNrX3JlcXVpcmVfXyhyKXt2YXIgbj10W3JdO2lmKG4hPT11bmRlZmluZWQpe3JldHVybiBuLmV4cG9ydHN9dmFyIGk9dFtyXT17ZXhwb3J0czp7fX07dmFyIG89dHJ1ZTt0cnl7ZVtyXShpLGkuZXhwb3J0cyxfX25jY3dwY2tfcmVxdWlyZV9fKTtvPWZhbHNlfWZpbmFsbHl7aWYobylkZWxldGUgdFtyXX1yZXR1cm4gaS5leHBvcnRzfWlmKHR5cGVvZiBfX25jY3dwY2tfcmVxdWlyZV9fIT09XCJ1bmRlZmluZWRcIilfX25jY3dwY2tfcmVxdWlyZV9fLmFiPV9fZGlybmFtZStcIi9cIjt2YXIgcj1fX25jY3dwY2tfcmVxdWlyZV9fKDIyOSk7bW9kdWxlLmV4cG9ydHM9cn0pKCk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/process/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      case REACT_SERVER_CONTEXT_TYPE:\n        {\n          var context2 = type;\n          return (context2.displayName || context2._globalName) + '.Provider';\n        }\n\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe[prop-missing]\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      } // TODO(luna): This will currently only throw if the function component\n      // tries to access React/ReactDOM/props. We should probably make this throw\n      // in simple components too\n\n\n      var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n      // component, which we don't yet support. Attach a noop catch handler to\n      // silence the error.\n      // TODO: Implement component stacks for async client components?\n\n      if (maybePromise && typeof maybePromise.catch === 'function') {\n        maybePromise.catch(function () {});\n      }\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement$1(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement$1(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar didWarnAboutKeySpread = {};\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (hasOwnProperty.call(props, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(props).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV = jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-runtime.development.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-runtime.development.js ***!
  \*****************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      case REACT_SERVER_CONTEXT_TYPE:\n        {\n          var context2 = type;\n          return (context2.displayName || context2._globalName) + '.Provider';\n        }\n\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe[prop-missing]\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      } // TODO(luna): This will currently only throw if the function component\n      // tries to access React/ReactDOM/props. We should probably make this throw\n      // in simple components too\n\n\n      var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n      // component, which we don't yet support. Attach a noop catch handler to\n      // silence the error.\n      // TODO: Implement component stacks for async client components?\n\n      if (maybePromise && typeof maybePromise.catch === 'function') {\n        maybePromise.catch(function () {});\n      }\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement$1(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement$1(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar didWarnAboutKeySpread = {};\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (hasOwnProperty.call(props, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(props).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n// even with the prod transform. This means that jsxDEV is purely\n// opt-in behavior for better messages but that we won't stop\n// giving you warnings if you use production apis.\n\nfunction jsxWithValidationStatic(type, props, key) {\n  {\n    return jsxWithValidation(type, props, key, true);\n  }\n}\nfunction jsxWithValidationDynamic(type, props, key) {\n  {\n    return jsxWithValidation(type, props, key, false);\n  }\n}\n\nvar jsx = jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.\n// for now we can ship identical prod functions\n\nvar jsxs = jsxWithValidationStatic ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsx = jsx;\nexports.jsxs = jsxs;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!***********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \***********************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxMy41LjRfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLCtQQUFzRTtBQUN4RSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTMuNS40X3JlYWN0LWRvbUAxOC4yLjBfcmVhY3RAMTguMi4wL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzPzZkZmEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/jsx-runtime.js":
/*!*******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/jsx-runtime.js ***!
  \*******************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-runtime.development.js */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxMy41LjRfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUsdVBBQWtFO0FBQ3BFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxMy41LjRfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtcnVudGltZS5qcz9mYjk3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/jsx-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@remotion+player@4.0.47_react-dom@18.2.0_react@18.2.0/node_modules/@remotion/player/dist/esm/index.mjs":
/*!***************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@remotion+player@4.0.47_react-dom@18.2.0_react@18.2.0/node_modules/@remotion/player/dist/esm/index.mjs ***!
  \***************************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Player: function() { return /* binding */ Player; },\n/* harmony export */   PlayerInternals: function() { return /* binding */ PlayerInternals; },\n/* harmony export */   Thumbnail: function() { return /* binding */ Thumbnail; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var remotion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! remotion */ \"(app-pages-browser)/../../node_modules/.pnpm/remotion@4.0.47_react-dom@18.2.0_react@18.2.0/node_modules/remotion/dist/esm/index.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/jsx-runtime.js\");\n\"use client\";\n\n\n\n\nconst calculatePlayerSize = ({ currentSize, width, height, compositionWidth, compositionHeight, }) => {\n    if (width !== undefined && height === undefined) {\n        return {\n            aspectRatio: [compositionWidth, compositionHeight].join('/'),\n        };\n    }\n    // Opposite: If has height specified, evaluate the height and specify a default width.\n    if (height !== undefined && width === undefined) {\n        return {\n            // Aspect ratio CSS prop will work\n            aspectRatio: [compositionWidth, compositionHeight].join('/'),\n        };\n    }\n    if (!currentSize) {\n        return {\n            width: compositionWidth,\n            height: compositionHeight,\n        };\n    }\n    return {\n        width: compositionWidth,\n        height: compositionHeight,\n    };\n};\n\nconst calculateScale = ({ canvasSize, compositionHeight, compositionWidth, previewSize, }) => {\n    const heightRatio = canvasSize.height / compositionHeight;\n    const widthRatio = canvasSize.width / compositionWidth;\n    const ratio = Math.min(heightRatio, widthRatio);\n    return previewSize === 'auto' ? ratio : Number(previewSize);\n};\nconst calculateCanvasTransformation = ({ previewSize, compositionWidth, compositionHeight, canvasSize, }) => {\n    const scale = calculateScale({\n        canvasSize,\n        compositionHeight,\n        compositionWidth,\n        previewSize,\n    });\n    const correction = 0 - (1 - scale) / 2;\n    const xCorrection = correction * compositionWidth;\n    const yCorrection = correction * compositionHeight;\n    const width = compositionWidth * scale;\n    const height = compositionHeight * scale;\n    const centerX = canvasSize.width / 2 - width / 2;\n    const centerY = canvasSize.height / 2 - height / 2;\n    return {\n        centerX,\n        centerY,\n        xCorrection,\n        yCorrection,\n        scale,\n    };\n};\nconst calculateOuterStyle = ({ config, style, canvasSize, }) => {\n    if (!config) {\n        return {};\n    }\n    return {\n        position: 'relative',\n        overflow: 'hidden',\n        ...calculatePlayerSize({\n            compositionHeight: config.height,\n            compositionWidth: config.width,\n            currentSize: canvasSize,\n            height: style === null || style === void 0 ? void 0 : style.height,\n            width: style === null || style === void 0 ? void 0 : style.width,\n        }),\n        ...style,\n    };\n};\nconst calculateContainerStyle = ({ config, canvasSize, layout, scale, }) => {\n    if (!config || !canvasSize || !layout) {\n        return {};\n    }\n    return {\n        position: 'absolute',\n        width: config.width,\n        height: config.height,\n        display: 'flex',\n        transform: `scale(${scale})`,\n        marginLeft: layout.xCorrection,\n        marginTop: layout.yCorrection,\n        overflow: 'hidden',\n    };\n};\nconst calculateOuter = ({ layout, scale, config, }) => {\n    if (!layout || !config) {\n        return {};\n    }\n    const { centerX, centerY } = layout;\n    return {\n        width: config.width * scale,\n        height: config.height * scale,\n        display: 'flex',\n        flexDirection: 'column',\n        position: 'absolute',\n        left: centerX,\n        top: centerY,\n        overflow: 'hidden',\n    };\n};\n\nconst PlayerEventEmitterContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(undefined);\nconst ThumbnailEmitterContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(undefined);\n\nclass PlayerEmitter {\n    constructor() {\n        this.listeners = {\n            ended: [],\n            error: [],\n            pause: [],\n            play: [],\n            ratechange: [],\n            scalechange: [],\n            seeked: [],\n            timeupdate: [],\n            frameupdate: [],\n            fullscreenchange: [],\n            volumechange: [],\n            mutechange: [],\n        };\n    }\n    addEventListener(name, callback) {\n        this.listeners[name].push(callback);\n    }\n    removeEventListener(name, callback) {\n        this.listeners[name] = this.listeners[name].filter((l) => l !== callback);\n    }\n    dispatchEvent(dispatchName, context) {\n        this.listeners[dispatchName].forEach((callback) => {\n            callback({ detail: context });\n        });\n    }\n    dispatchSeek(frame) {\n        this.dispatchEvent('seeked', {\n            frame,\n        });\n    }\n    dispatchVolumeChange(volume) {\n        this.dispatchEvent('volumechange', {\n            volume,\n        });\n    }\n    dispatchPause() {\n        this.dispatchEvent('pause', undefined);\n    }\n    dispatchPlay() {\n        this.dispatchEvent('play', undefined);\n    }\n    dispatchEnded() {\n        this.dispatchEvent('ended', undefined);\n    }\n    dispatchRateChange(playbackRate) {\n        this.dispatchEvent('ratechange', {\n            playbackRate,\n        });\n    }\n    dispatchScaleChange(scale) {\n        this.dispatchEvent('scalechange', {\n            scale,\n        });\n    }\n    dispatchError(error) {\n        this.dispatchEvent('error', {\n            error,\n        });\n    }\n    dispatchTimeUpdate(event) {\n        this.dispatchEvent('timeupdate', event);\n    }\n    dispatchFrameUpdate(event) {\n        this.dispatchEvent('frameupdate', event);\n    }\n    dispatchFullscreenChange(event) {\n        this.dispatchEvent('fullscreenchange', event);\n    }\n    dispatchMuteChange(event) {\n        this.dispatchEvent('mutechange', event);\n    }\n}\nclass ThumbnailEmitter {\n    constructor() {\n        this.listeners = {\n            error: [],\n        };\n    }\n    addEventListener(name, callback) {\n        this.listeners[name].push(callback);\n    }\n    removeEventListener(name, callback) {\n        this.listeners[name] = this.listeners[name].filter((l) => l !== callback);\n    }\n    dispatchEvent(dispatchName, context) {\n        this.listeners[dispatchName].forEach((callback) => {\n            callback({ detail: context });\n        });\n    }\n    dispatchError(error) {\n        this.dispatchEvent('error', {\n            error,\n        });\n    }\n}\n\nconst useHoverState = (ref) => {\n    const [hovered, stetHovered] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const { current } = ref;\n        if (!current) {\n            return;\n        }\n        const onHover = () => {\n            stetHovered(true);\n        };\n        const onLeave = () => {\n            stetHovered(false);\n        };\n        current.addEventListener('mouseenter', onHover);\n        current.addEventListener('mouseleave', onLeave);\n        return () => {\n            current.removeEventListener('mouseenter', onHover);\n            current.removeEventListener('mouseenter', onLeave);\n        };\n    }, [ref]);\n    return hovered;\n};\n\nconst calculateNextFrame = ({ time, currentFrame: startFrame, playbackSpeed, fps, actualLastFrame, actualFirstFrame, framesAdvanced, shouldLoop, }) => {\n    const op = playbackSpeed < 0 ? Math.ceil : Math.floor;\n    const framesToAdvance = op((time * playbackSpeed) / (1000 / fps)) - framesAdvanced;\n    const nextFrame = framesToAdvance + startFrame;\n    const isCurrentFrameOutside = startFrame > actualLastFrame || startFrame < actualFirstFrame;\n    const isNextFrameOutside = nextFrame > actualLastFrame || nextFrame < actualFirstFrame;\n    const hasEnded = !shouldLoop && isNextFrameOutside && !isCurrentFrameOutside;\n    if (playbackSpeed > 0) {\n        // Play forwards\n        if (isNextFrameOutside) {\n            return {\n                nextFrame: actualFirstFrame,\n                framesToAdvance,\n                hasEnded,\n            };\n        }\n        return { nextFrame, framesToAdvance, hasEnded };\n    }\n    // Reverse playback\n    if (isNextFrameOutside) {\n        return { nextFrame: actualLastFrame, framesToAdvance, hasEnded };\n    }\n    return { nextFrame, framesToAdvance, hasEnded };\n};\n\nconst getIsBackgrounded = () => {\n    if (typeof document === 'undefined') {\n        return false;\n    }\n    return document.visibilityState === 'hidden';\n};\nconst useIsBackgrounded = () => {\n    const isBackgrounded = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(getIsBackgrounded());\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const onVisibilityChange = () => {\n            isBackgrounded.current = getIsBackgrounded();\n        };\n        document.addEventListener('visibilitychange', onVisibilityChange);\n        return () => {\n            document.removeEventListener('visibilitychange', onVisibilityChange);\n        };\n    }, []);\n    return isBackgrounded;\n};\n\nconst usePlayer = () => {\n    var _a;\n    const [playing, setPlaying, imperativePlaying] = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.usePlayingState();\n    const [hasPlayed, setHasPlayed] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const frame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelinePosition();\n    const playStart = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(frame);\n    const setFrame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelineSetFrame();\n    const setTimelinePosition = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelineSetFrame();\n    const audioContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.SharedAudioContext);\n    const { audioAndVideoTags } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.TimelineContext);\n    const frameRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    frameRef.current = frame;\n    const video = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useVideo();\n    const config = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig();\n    const emitter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PlayerEventEmitterContext);\n    const lastFrame = ((_a = config === null || config === void 0 ? void 0 : config.durationInFrames) !== null && _a !== void 0 ? _a : 1) - 1;\n    const isLastFrame = frame === lastFrame;\n    const isFirstFrame = frame === 0;\n    if (!emitter) {\n        throw new TypeError('Expected Player event emitter context');\n    }\n    const seek = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((newFrame) => {\n        if (video === null || video === void 0 ? void 0 : video.id) {\n            setTimelinePosition((c) => ({ ...c, [video.id]: newFrame }));\n        }\n        emitter.dispatchSeek(newFrame);\n    }, [emitter, setTimelinePosition, video === null || video === void 0 ? void 0 : video.id]);\n    const play = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {\n        if (imperativePlaying.current) {\n            return;\n        }\n        setHasPlayed(true);\n        if (isLastFrame) {\n            seek(0);\n        }\n        /**\n         * Play silent audio tags to warm them up for autoplay\n         */\n        if (audioContext && audioContext.numberOfAudioTags > 0 && e) {\n            audioContext.playAllAudios();\n        }\n        /**\n         * Play audios and videos directly here so they can benefit from\n         * being triggered by a click\n         */\n        audioAndVideoTags.current.forEach((a) => a.play());\n        imperativePlaying.current = true;\n        setPlaying(true);\n        playStart.current = frameRef.current;\n        emitter.dispatchPlay();\n    }, [\n        imperativePlaying,\n        isLastFrame,\n        audioContext,\n        setPlaying,\n        emitter,\n        seek,\n        audioAndVideoTags,\n    ]);\n    const pause = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        if (imperativePlaying.current) {\n            imperativePlaying.current = false;\n            setPlaying(false);\n            emitter.dispatchPause();\n        }\n    }, [emitter, imperativePlaying, setPlaying]);\n    const pauseAndReturnToPlayStart = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        if (imperativePlaying.current) {\n            imperativePlaying.current = false;\n            if (config) {\n                setTimelinePosition((c) => ({\n                    ...c,\n                    [config.id]: playStart.current,\n                }));\n                setPlaying(false);\n                emitter.dispatchPause();\n            }\n        }\n    }, [config, emitter, imperativePlaying, setPlaying, setTimelinePosition]);\n    const videoId = video === null || video === void 0 ? void 0 : video.id;\n    const frameBack = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((frames) => {\n        if (!videoId) {\n            return null;\n        }\n        if (imperativePlaying.current) {\n            return;\n        }\n        setFrame((c) => {\n            var _a, _b;\n            const prev = (_b = (_a = c[videoId]) !== null && _a !== void 0 ? _a : window.remotion_initialFrame) !== null && _b !== void 0 ? _b : 0;\n            return {\n                ...c,\n                [videoId]: Math.max(0, prev - frames),\n            };\n        });\n    }, [imperativePlaying, setFrame, videoId]);\n    const frameForward = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((frames) => {\n        if (!videoId) {\n            return null;\n        }\n        if (imperativePlaying.current) {\n            return;\n        }\n        setFrame((c) => {\n            var _a, _b;\n            const prev = (_b = (_a = c[videoId]) !== null && _a !== void 0 ? _a : window.remotion_initialFrame) !== null && _b !== void 0 ? _b : 0;\n            return {\n                ...c,\n                [videoId]: Math.min(lastFrame, prev + frames),\n            };\n        });\n    }, [videoId, imperativePlaying, lastFrame, setFrame]);\n    const returnValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            frameBack,\n            frameForward,\n            isLastFrame,\n            emitter,\n            playing,\n            play,\n            pause,\n            seek,\n            isFirstFrame,\n            getCurrentFrame: () => frameRef.current,\n            isPlaying: () => imperativePlaying.current,\n            pauseAndReturnToPlayStart,\n            hasPlayed,\n        };\n    }, [\n        frameBack,\n        frameForward,\n        isLastFrame,\n        emitter,\n        playing,\n        play,\n        pause,\n        seek,\n        isFirstFrame,\n        pauseAndReturnToPlayStart,\n        imperativePlaying,\n        hasPlayed,\n    ]);\n    return returnValue;\n};\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\nconst usePlayback = ({ loop, playbackRate, moveToBeginningWhenEnded, inFrame, outFrame, }) => {\n    const config = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig();\n    const frame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelinePosition();\n    const { playing, pause, emitter } = usePlayer();\n    const setFrame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelineSetFrame();\n    // requestAnimationFrame() does not work if the tab is not active.\n    // This means that audio will keep playing even if it has ended.\n    // In that case, we use setTimeout() instead.\n    const isBackgroundedRef = useIsBackgrounded();\n    const frameRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(frame);\n    frameRef.current = frame;\n    const lastTimeUpdateEvent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (!config) {\n            return;\n        }\n        if (!playing) {\n            return;\n        }\n        let hasBeenStopped = false;\n        let reqAnimFrameCall = null;\n        const startedTime = performance.now();\n        let framesAdvanced = 0;\n        const cancelQueuedFrame = () => {\n            if (reqAnimFrameCall !== null) {\n                if (reqAnimFrameCall.type === 'raf') {\n                    cancelAnimationFrame(reqAnimFrameCall.id);\n                }\n                else {\n                    clearTimeout(reqAnimFrameCall.id);\n                }\n            }\n        };\n        const stop = () => {\n            hasBeenStopped = true;\n            cancelQueuedFrame();\n        };\n        const callback = () => {\n            const time = performance.now() - startedTime;\n            const actualLastFrame = outFrame !== null && outFrame !== void 0 ? outFrame : config.durationInFrames - 1;\n            const actualFirstFrame = inFrame !== null && inFrame !== void 0 ? inFrame : 0;\n            const { nextFrame, framesToAdvance, hasEnded } = calculateNextFrame({\n                time,\n                currentFrame: frameRef.current,\n                playbackSpeed: playbackRate,\n                fps: config.fps,\n                actualFirstFrame,\n                actualLastFrame,\n                framesAdvanced,\n                shouldLoop: loop,\n            });\n            framesAdvanced += framesToAdvance;\n            if (nextFrame !== frameRef.current &&\n                (!hasEnded || moveToBeginningWhenEnded)) {\n                setFrame((c) => ({ ...c, [config.id]: nextFrame }));\n            }\n            if (hasEnded) {\n                stop();\n                pause();\n                emitter.dispatchEnded();\n                return;\n            }\n            if (!hasBeenStopped) {\n                queueNextFrame();\n            }\n        };\n        const queueNextFrame = () => {\n            if (isBackgroundedRef.current) {\n                reqAnimFrameCall = {\n                    type: 'timeout',\n                    // Note: Most likely, this will not be 1000 / fps, but the browser will throttle it to ~1/sec.\n                    id: setTimeout(callback, 1000 / config.fps),\n                };\n            }\n            else {\n                reqAnimFrameCall = { type: 'raf', id: requestAnimationFrame(callback) };\n            }\n        };\n        queueNextFrame();\n        const onVisibilityChange = () => {\n            if (document.visibilityState === 'visible') {\n                return;\n            }\n            // If tab goes into the background, cancel requestAnimationFrame() and update immediately.\n            // , so the transition to setTimeout() can be fulfilled.\n            cancelQueuedFrame();\n            callback();\n        };\n        window.addEventListener('visibilitychange', onVisibilityChange);\n        return () => {\n            window.removeEventListener('visibilitychange', onVisibilityChange);\n            stop();\n        };\n    }, [\n        config,\n        loop,\n        pause,\n        playing,\n        setFrame,\n        emitter,\n        playbackRate,\n        inFrame,\n        outFrame,\n        moveToBeginningWhenEnded,\n        isBackgroundedRef,\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const interval = setInterval(() => {\n            if (lastTimeUpdateEvent.current === frameRef.current) {\n                return;\n            }\n            emitter.dispatchTimeUpdate({ frame: frameRef.current });\n            lastTimeUpdateEvent.current = frameRef.current;\n        }, 250);\n        return () => clearInterval(interval);\n    }, [emitter]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        emitter.dispatchFrameUpdate({ frame });\n    }, [emitter, frame]);\n};\n\nlet elementSizeHooks = [];\nconst updateAllElementsSizes = () => {\n    for (const listener of elementSizeHooks) {\n        listener();\n    }\n};\nconst useElementSize = (ref, options) => {\n    const [size, setSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => {\n        if (!ref.current) {\n            return null;\n        }\n        const rect = ref.current.getClientRects();\n        if (!rect[0]) {\n            return null;\n        }\n        return {\n            width: rect[0].width,\n            height: rect[0].height,\n            left: rect[0].x,\n            top: rect[0].y,\n            windowSize: {\n                height: window.innerHeight,\n                width: window.innerWidth,\n            },\n        };\n    });\n    const observer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        if (typeof ResizeObserver === 'undefined') {\n            return null;\n        }\n        return new ResizeObserver((entries) => {\n            // The contentRect returns the width without any `scale()`'s being applied. The height is wrong\n            const { contentRect, target } = entries[0];\n            // The clientRect returns the size with `scale()` being applied.\n            const newSize = target.getClientRects();\n            if (!(newSize === null || newSize === void 0 ? void 0 : newSize[0])) {\n                setSize(null);\n                return;\n            }\n            const probableCssParentScale = contentRect.width === 0 ? 1 : newSize[0].width / contentRect.width;\n            const width = options.shouldApplyCssTransforms\n                ? newSize[0].width\n                : newSize[0].width * (1 / probableCssParentScale);\n            const height = options.shouldApplyCssTransforms\n                ? newSize[0].height\n                : newSize[0].height * (1 / probableCssParentScale);\n            setSize({\n                width,\n                height,\n                left: newSize[0].x,\n                top: newSize[0].y,\n                windowSize: {\n                    height: window.innerHeight,\n                    width: window.innerWidth,\n                },\n            });\n        });\n    }, [options.shouldApplyCssTransforms]);\n    const updateSize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        if (!ref.current) {\n            return;\n        }\n        const rect = ref.current.getClientRects();\n        if (!rect[0]) {\n            setSize(null);\n            return;\n        }\n        setSize((prevState) => {\n            const isSame = prevState &&\n                prevState.width === rect[0].width &&\n                prevState.height === rect[0].height &&\n                prevState.left === rect[0].x &&\n                prevState.top === rect[0].y &&\n                prevState.windowSize.height === window.innerHeight &&\n                prevState.windowSize.width === window.innerWidth;\n            if (isSame) {\n                return prevState;\n            }\n            return {\n                width: rect[0].width,\n                height: rect[0].height,\n                left: rect[0].x,\n                top: rect[0].y,\n                windowSize: {\n                    height: window.innerHeight,\n                    width: window.innerWidth,\n                },\n            };\n        });\n    }, [ref]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (!observer) {\n            return;\n        }\n        const { current } = ref;\n        if (ref.current) {\n            observer.observe(ref.current);\n        }\n        return () => {\n            if (current) {\n                observer.unobserve(current);\n            }\n        };\n    }, [observer, ref, updateSize]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (!options.triggerOnWindowResize) {\n            return;\n        }\n        window.addEventListener('resize', updateSize);\n        return () => {\n            window.removeEventListener('resize', updateSize);\n        };\n    }, [options.triggerOnWindowResize, updateSize]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        elementSizeHooks.push(updateSize);\n        return () => {\n            elementSizeHooks = elementSizeHooks.filter((e) => e !== updateSize);\n        };\n    }, [updateSize]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        if (!size) {\n            return null;\n        }\n        return { ...size, refresh: updateSize };\n    }, [size, updateSize]);\n};\n\nconst PLAYER_CSS_CLASSNAME = '__remotion-player';\n\nconst errorStyle = {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1,\n    height: '100%',\n    width: '100%',\n};\nclass ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(...arguments);\n        this.state = { hasError: null };\n    }\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: error };\n    }\n    componentDidCatch(error) {\n        this.props.onError(error);\n    }\n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: errorStyle, children: this.props.errorFallback({\n                    error: this.state.hasError,\n                }) }));\n        }\n        return this.props.children;\n    }\n}\n\nconst formatTime = (timeInSeconds) => {\n    const minutes = Math.floor(timeInSeconds / 60);\n    const seconds = Math.floor(timeInSeconds - minutes * 60);\n    return `${String(minutes)}:${String(seconds).padStart(2, '0')}`;\n};\n\nconst ICON_SIZE = 25;\nconst fullscreenIconSize = 16;\nconst PlayIcon = () => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"svg\", { width: ICON_SIZE, height: ICON_SIZE, viewBox: \"0 0 25 25\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"path\", { d: \"M8 6.375C7.40904 8.17576 7.06921 10.2486 7.01438 12.3871C6.95955 14.5255 7.19163 16.6547 7.6875 18.5625C9.95364 18.2995 12.116 17.6164 14.009 16.5655C15.902 15.5147 17.4755 14.124 18.6088 12.5C17.5158 10.8949 15.9949 9.51103 14.1585 8.45082C12.3222 7.3906 10.2174 6.68116 8 6.375Z\", fill: \"white\", stroke: \"white\", strokeWidth: \"6.25\", strokeLinejoin: \"round\" }) }));\n};\nconst PauseIcon = () => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"svg\", { viewBox: \"0 0 100 100\", width: ICON_SIZE, height: ICON_SIZE, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"rect\", { x: \"25\", y: \"20\", width: \"20\", height: \"60\", fill: \"#fff\", ry: \"5\", rx: \"5\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"rect\", { x: \"55\", y: \"20\", width: \"20\", height: \"60\", fill: \"#fff\", ry: \"5\", rx: \"5\" })] }));\n};\nconst FullscreenIcon = ({ isFullscreen, }) => {\n    const strokeWidth = 6;\n    const viewSize = 32;\n    const out = isFullscreen ? 0 : strokeWidth / 2;\n    const middleInset = isFullscreen ? strokeWidth * 1.6 : strokeWidth / 2;\n    const inset = isFullscreen ? strokeWidth * 1.6 : strokeWidth * 2;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"svg\", { viewBox: `0 0 ${viewSize} ${viewSize}`, height: fullscreenIconSize, width: fullscreenIconSize, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"path\", { d: `\n\t\t\t\tM ${out} ${inset}\n\t\t\t\tL ${middleInset} ${middleInset}\n\t\t\t\tL ${inset} ${out}\n\t\t\t\t`, stroke: \"#fff\", strokeWidth: strokeWidth, fill: \"none\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"path\", { d: `\n\t\t\t\tM ${viewSize - out} ${inset}\n\t\t\t\tL ${viewSize - middleInset} ${middleInset}\n\t\t\t\tL ${viewSize - inset} ${out}\n\t\t\t\t`, stroke: \"#fff\", strokeWidth: strokeWidth, fill: \"none\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"path\", { d: `\n\t\t\t\tM ${out} ${viewSize - inset}\n\t\t\t\tL ${middleInset} ${viewSize - middleInset}\n\t\t\t\tL ${inset} ${viewSize - out}\n\t\t\t\t`, stroke: \"#fff\", strokeWidth: strokeWidth, fill: \"none\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"path\", { d: `\n\t\t\t\tM ${viewSize - out} ${viewSize - inset}\n\t\t\t\tL ${viewSize - middleInset} ${viewSize - middleInset}\n\t\t\t\tL ${viewSize - inset} ${viewSize - out}\n\t\t\t\t`, stroke: \"#fff\", strokeWidth: strokeWidth, fill: \"none\" })] }));\n};\nconst VolumeOffIcon = () => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"svg\", { width: ICON_SIZE, height: ICON_SIZE, viewBox: \"0 0 24 24\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"path\", { d: \"M3.63 3.63a.996.996 0 000 1.41L7.29 8.7 7 9H4c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h3l3.29 3.29c.63.63 1.71.18 1.71-.71v-4.17l4.18 4.18c-.49.37-1.02.68-1.6.91-.36.15-.58.53-.58.92 0 .72.73 1.18 1.39.91.8-.33 1.55-.77 2.22-1.31l1.34 1.34a.996.996 0 101.41-1.41L5.05 3.63c-.39-.39-1.02-.39-1.42 0zM19 12c0 .82-.15 1.61-.41 2.34l1.53 1.53c.56-1.17.88-2.48.88-3.87 0-3.83-2.4-7.11-5.78-8.4-.59-.23-1.22.23-1.22.86v.19c0 .38.25.71.61.85C17.18 6.54 19 9.06 19 12zm-8.71-6.29l-.17.17L12 7.76V6.41c0-.89-1.08-1.33-1.71-.7zM16.5 12A4.5 4.5 0 0014 7.97v1.79l2.48 2.48c.01-.08.02-.16.02-.24z\", fill: \"#fff\" }) }));\n};\nconst VolumeOnIcon = () => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"svg\", { width: ICON_SIZE, height: ICON_SIZE, viewBox: \"0 0 24 24\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"path\", { d: \"M3 10v4c0 .55.45 1 1 1h3l3.29 3.29c.63.63 1.71.18 1.71-.71V6.41c0-.89-1.08-1.34-1.71-.71L7 9H4c-.55 0-1 .45-1 1zm13.5 2A4.5 4.5 0 0014 7.97v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 4.45v.2c0 .38.25.71.6.85C17.18 6.53 19 9.06 19 12s-1.82 5.47-4.4 6.5c-.36.14-.6.47-.6.85v.2c0 .63.63 1.07 1.21.85C18.6 19.11 21 15.84 21 12s-2.4-7.11-5.79-8.4c-.58-.23-1.21.22-1.21.85z\", fill: \"#fff\" }) }));\n};\n\nconst BAR_HEIGHT$1 = 5;\nconst KNOB_SIZE$1 = 12;\nconst VOLUME_SLIDER_WIDTH = 100;\nconst MediaVolumeSlider = ({ displayVerticalVolumeSlider }) => {\n    const [mediaMuted, setMediaMuted] = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useMediaMutedState();\n    const [mediaVolume, setMediaVolume] = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useMediaVolumeState();\n    const [focused, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const parentDivRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const inputRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const hover = useHoverState(parentDivRef);\n    // Need to import it from React to fix React 17 ESM support.\n    const randomId = \n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    typeof react__WEBPACK_IMPORTED_MODULE_0__.useId === 'undefined' ? 'volume-slider' : react__WEBPACK_IMPORTED_MODULE_0__.useId();\n    const [randomClass] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => `__remotion-volume-slider-${(0,remotion__WEBPACK_IMPORTED_MODULE_1__.random)(randomId)}`.replace('.', ''));\n    const isMutedOrZero = mediaMuted || mediaVolume === 0;\n    const onVolumeChange = (e) => {\n        setMediaVolume(parseFloat(e.target.value));\n    };\n    const onBlur = () => {\n        setTimeout(() => {\n            // We need a small delay to check which element was focused next,\n            // and if it wasn't the volume slider, we hide it\n            if (document.activeElement !== inputRef.current) {\n                setFocused(false);\n            }\n        }, 10);\n    };\n    const onClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        if (mediaVolume === 0) {\n            setMediaVolume(1);\n            setMediaMuted(false);\n            return;\n        }\n        setMediaMuted((mute) => !mute);\n    }, [mediaVolume, setMediaMuted, setMediaVolume]);\n    const parentDivStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            display: 'inline-flex',\n            background: 'none',\n            border: 'none',\n            justifyContent: 'center',\n            alignItems: 'center',\n            touchAction: 'none',\n            ...(displayVerticalVolumeSlider && { position: 'relative' }),\n        };\n    }, [displayVerticalVolumeSlider]);\n    const volumeContainer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            display: 'inline',\n            width: ICON_SIZE,\n            height: ICON_SIZE,\n            cursor: 'pointer',\n            appearance: 'none',\n            background: 'none',\n            border: 'none',\n            padding: 0,\n        };\n    }, []);\n    const inputStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        const commonStyle = {\n            WebkitAppearance: 'none',\n            backgroundColor: 'rgba(255, 255, 255, 0.5)',\n            borderRadius: BAR_HEIGHT$1 / 2,\n            cursor: 'pointer',\n            height: BAR_HEIGHT$1,\n            width: VOLUME_SLIDER_WIDTH,\n            backgroundImage: `linear-gradient(\n\t\t\t\tto right,\n\t\t\t\twhite ${mediaVolume * 100}%, rgba(255, 255, 255, 0) ${mediaVolume * 100}%\n\t\t\t)`,\n        };\n        if (displayVerticalVolumeSlider) {\n            return {\n                ...commonStyle,\n                transform: `rotate(-90deg)`,\n                position: 'absolute',\n                bottom: ICON_SIZE + VOLUME_SLIDER_WIDTH / 2 + 5,\n            };\n        }\n        return {\n            ...commonStyle,\n            marginLeft: 5,\n        };\n    }, [displayVerticalVolumeSlider, mediaVolume]);\n    const sliderStyle = `\n\t.${randomClass}::-webkit-slider-thumb {\n\t\t-webkit-appearance: none;\n\t\tbackground-color: white;\n\t\tborder-radius: ${KNOB_SIZE$1 / 2}px;\n\t\tbox-shadow: 0 0 2px black;\n\t\theight: ${KNOB_SIZE$1}px;\n\t\twidth: ${KNOB_SIZE$1}px;\n\t}\n\n\t.${randomClass}::-moz-range-thumb {\n\t\t-webkit-appearance: none;\n\t\tbackground-color: white;\n\t\tborder-radius: ${KNOB_SIZE$1 / 2}px;\n\t\tbox-shadow: 0 0 2px black;\n\t\theight: ${KNOB_SIZE$1}px;\n\t\twidth: ${KNOB_SIZE$1}px;\n\t}\n`;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: parentDivRef, style: parentDivStyle, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"style\", { \n                // eslint-disable-next-line react/no-danger\n                dangerouslySetInnerHTML: {\n                    __html: sliderStyle,\n                } }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { \"aria-label\": isMutedOrZero ? 'Unmute sound' : 'Mute sound', title: isMutedOrZero ? 'Unmute sound' : 'Mute sound', onClick: onClick, onBlur: onBlur, onFocus: () => setFocused(true), style: volumeContainer, type: \"button\", children: isMutedOrZero ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(VolumeOffIcon, {}) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(VolumeOnIcon, {}) }), (focused || hover) && !mediaMuted && !remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.isIosSafari() ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"input\", { ref: inputRef, \"aria-label\": \"Change volume\", className: randomClass, max: 1, min: 0, onBlur: () => setFocused(false), onChange: onVolumeChange, step: 0.01, type: \"range\", value: mediaVolume, style: inputStyle })) : null] }));\n};\n\n// hook to hide a popup/modal when clicked outside\nfunction useComponentVisible(initialIsVisible) {\n    const [isComponentVisible, setIsComponentVisible] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialIsVisible);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const handleClickOutside = (event) => {\n            if (ref.current && !ref.current.contains(event.target)) {\n                setIsComponentVisible(false);\n            }\n        };\n        document.addEventListener('pointerup', handleClickOutside, true);\n        return () => {\n            document.removeEventListener('pointerup', handleClickOutside, true);\n        };\n    }, []);\n    return { ref, isComponentVisible, setIsComponentVisible };\n}\n\n// To align\nconst BOTTOM = 35;\n// Arbitrary to clamp the height of the popup\nconst THRESHOLD = 70;\nconst rateDiv = {\n    height: 30,\n    paddingRight: 15,\n    paddingLeft: 12,\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n};\nconst checkmarkContainer = {\n    width: 22,\n    display: 'flex',\n    alignItems: 'center',\n};\nconst checkmarkStyle = {\n    width: 14,\n    height: 14,\n    color: 'black',\n};\nconst Checkmark = () => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"svg\", { viewBox: \"0 0 512 512\", style: checkmarkStyle, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"path\", { fill: \"currentColor\", d: \"M435.848 83.466L172.804 346.51l-96.652-96.652c-4.686-4.686-12.284-4.686-16.971 0l-28.284 28.284c-4.686 4.686-4.686 12.284 0 16.971l133.421 133.421c4.686 4.686 12.284 4.686 16.971 0l299.813-299.813c4.686-4.686 4.686-12.284 0-16.971l-28.284-28.284c-4.686-4.686-12.284-4.686-16.97 0z\" }) }));\nconst PlaybackrateOption = ({ rate, onSelect, selectedRate, keyboardSelectedRate }) => {\n    const onClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        onSelect(rate);\n    }, [onSelect, rate]);\n    const [hovered, setHovered] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const onMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        setHovered(true);\n    }, []);\n    const onMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        setHovered(false);\n    }, []);\n    const actualStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            ...rateDiv,\n            backgroundColor: hovered || keyboardSelectedRate === rate ? '#eee' : 'transparent',\n        };\n    }, [hovered, keyboardSelectedRate, rate]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, tabIndex: 0, style: actualStyle, onClick: onClick, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: checkmarkContainer, children: rate === selectedRate ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Checkmark, {}) : null }), rate.toFixed(1), \"x\"] }, rate));\n};\nconst PlaybackPopup = ({ setIsComponentVisible, playbackRates, canvasSize }) => {\n    const { setPlaybackRate, playbackRate } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.TimelineContext);\n    const [keyboardSelectedRate, setKeyboardSelectedRate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(playbackRate);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const listener = (e) => {\n            e.preventDefault();\n            if (e.key === 'ArrowUp') {\n                const currentIndex = playbackRates.findIndex((rate) => rate === keyboardSelectedRate);\n                if (currentIndex === 0) {\n                    return;\n                }\n                if (currentIndex === -1) {\n                    setKeyboardSelectedRate(playbackRates[0]);\n                }\n                else {\n                    setKeyboardSelectedRate(playbackRates[currentIndex - 1]);\n                }\n            }\n            else if (e.key === 'ArrowDown') {\n                const currentIndex = playbackRates.findIndex((rate) => rate === keyboardSelectedRate);\n                if (currentIndex === playbackRates.length - 1) {\n                    return;\n                }\n                if (currentIndex === -1) {\n                    setKeyboardSelectedRate(playbackRates[playbackRates.length - 1]);\n                }\n                else {\n                    setKeyboardSelectedRate(playbackRates[currentIndex + 1]);\n                }\n            }\n            else if (e.key === 'Enter') {\n                setPlaybackRate(keyboardSelectedRate);\n                setIsComponentVisible(false);\n            }\n        };\n        window.addEventListener('keydown', listener);\n        return () => {\n            window.removeEventListener('keydown', listener);\n        };\n    }, [\n        playbackRates,\n        keyboardSelectedRate,\n        setPlaybackRate,\n        setIsComponentVisible,\n    ]);\n    const onSelect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((rate) => {\n        setPlaybackRate(rate);\n        setIsComponentVisible(false);\n    }, [setIsComponentVisible, setPlaybackRate]);\n    const playbackPopup = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            position: 'absolute',\n            right: 0,\n            width: 125,\n            maxHeight: canvasSize.height - THRESHOLD - BOTTOM,\n            bottom: 35,\n            background: '#fff',\n            borderRadius: 4,\n            overflow: 'auto',\n            color: 'black',\n            textAlign: 'left',\n        };\n    }, [canvasSize.height]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: playbackPopup, children: playbackRates.map((rate) => {\n            return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PlaybackrateOption, { selectedRate: playbackRate, onSelect: onSelect, rate: rate, keyboardSelectedRate: keyboardSelectedRate }, rate));\n        }) }));\n};\nconst label = {\n    fontSize: 13,\n    fontWeight: 'bold',\n    color: 'white',\n    border: '2px solid white',\n    borderRadius: 20,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 2,\n    paddingBottom: 2,\n};\nconst playerButtonStyle = {\n    appearance: 'none',\n    backgroundColor: 'transparent',\n    border: 'none',\n    cursor: 'pointer',\n    paddingLeft: 0,\n    paddingRight: 0,\n    paddingTop: 6,\n    paddingBottom: 6,\n    height: 37,\n    display: 'inline-flex',\n    marginBottom: 0,\n    marginTop: 0,\n    alignItems: 'center',\n};\nconst button = {\n    ...playerButtonStyle,\n    position: 'relative',\n};\nconst PlaybackrateControl = ({ playbackRates, canvasSize }) => {\n    const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);\n    const { playbackRate } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.TimelineContext);\n    const onClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        setIsComponentVisible(!isComponentVisible);\n    }, [isComponentVisible, setIsComponentVisible]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: ref, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { type: \"button\", \"aria-label\": \"Change playback rate\", style: button, onClick: onClick, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { style: label, children: [playbackRate, \"x\"] }), isComponentVisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PlaybackPopup, { canvasSize: canvasSize, playbackRates: playbackRates, setIsComponentVisible: setIsComponentVisible }))] }) }));\n};\n\nconst getFrameFromX = (clientX, durationInFrames, width) => {\n    var _a;\n    const pos = clientX;\n    const frame = Math.round((0,remotion__WEBPACK_IMPORTED_MODULE_1__.interpolate)(pos, [0, width], [0, (_a = durationInFrames - 1) !== null && _a !== void 0 ? _a : 0], {\n        extrapolateLeft: 'clamp',\n        extrapolateRight: 'clamp',\n    }));\n    return frame;\n};\nconst BAR_HEIGHT = 5;\nconst KNOB_SIZE = 12;\nconst VERTICAL_PADDING = 4;\nconst containerStyle$1 = {\n    userSelect: 'none',\n    paddingTop: VERTICAL_PADDING,\n    paddingBottom: VERTICAL_PADDING,\n    boxSizing: 'border-box',\n    cursor: 'pointer',\n    position: 'relative',\n    touchAction: 'none',\n};\nconst barBackground = {\n    height: BAR_HEIGHT,\n    backgroundColor: 'rgba(255, 255, 255, 0.25)',\n    width: '100%',\n    borderRadius: BAR_HEIGHT / 2,\n};\nconst findBodyInWhichDivIsLocated = (div) => {\n    let current = div;\n    while (current.parentElement) {\n        current = current.parentElement;\n    }\n    return current;\n};\nconst PlayerSeekBar = ({ durationInFrames, onSeekEnd, onSeekStart, inFrame, outFrame }) => {\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const barHovered = useHoverState(containerRef);\n    const size = useElementSize(containerRef, {\n        triggerOnWindowResize: true,\n        shouldApplyCssTransforms: true,\n    });\n    const { seek, play, pause, playing } = usePlayer();\n    const frame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelinePosition();\n    const [dragging, setDragging] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        dragging: false,\n    });\n    const onPointerDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {\n        if (!size) {\n            throw new Error('Player has no size');\n        }\n        const _frame = getFrameFromX(e.clientX - size.left, durationInFrames, size.width);\n        pause();\n        seek(_frame);\n        setDragging({\n            dragging: true,\n            wasPlaying: playing,\n        });\n        onSeekStart();\n    }, [size, durationInFrames, pause, seek, playing, onSeekStart]);\n    const onPointerMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {\n        var _a;\n        if (!size) {\n            throw new Error('Player has no size');\n        }\n        if (!dragging.dragging) {\n            return;\n        }\n        const _frame = getFrameFromX(e.clientX - ((_a = size === null || size === void 0 ? void 0 : size.left) !== null && _a !== void 0 ? _a : 0), durationInFrames, size.width);\n        seek(_frame);\n    }, [dragging.dragging, durationInFrames, seek, size]);\n    const onPointerUp = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        setDragging({\n            dragging: false,\n        });\n        if (!dragging.dragging) {\n            return;\n        }\n        if (dragging.wasPlaying) {\n            play();\n        }\n        else {\n            pause();\n        }\n        onSeekEnd();\n    }, [dragging, onSeekEnd, pause, play]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (!dragging.dragging) {\n            return;\n        }\n        const body = findBodyInWhichDivIsLocated(containerRef.current);\n        body.addEventListener('pointermove', onPointerMove);\n        body.addEventListener('pointerup', onPointerUp);\n        return () => {\n            body.removeEventListener('pointermove', onPointerMove);\n            body.removeEventListener('pointerup', onPointerUp);\n        };\n    }, [dragging.dragging, onPointerMove, onPointerUp]);\n    const knobStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        var _a;\n        return {\n            height: KNOB_SIZE,\n            width: KNOB_SIZE,\n            borderRadius: KNOB_SIZE / 2,\n            position: 'absolute',\n            top: VERTICAL_PADDING - KNOB_SIZE / 2 + 5 / 2,\n            backgroundColor: 'white',\n            left: Math.max(0, (frame / Math.max(1, durationInFrames - 1)) * ((_a = size === null || size === void 0 ? void 0 : size.width) !== null && _a !== void 0 ? _a : 0) -\n                KNOB_SIZE / 2),\n            boxShadow: '0 0 2px black',\n            opacity: Number(barHovered),\n        };\n    }, [barHovered, durationInFrames, frame, size]);\n    const fillStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            height: BAR_HEIGHT,\n            backgroundColor: 'rgba(255, 255, 255, 1)',\n            width: ((frame - (inFrame !== null && inFrame !== void 0 ? inFrame : 0)) / (durationInFrames - 1)) * 100 + '%',\n            marginLeft: ((inFrame !== null && inFrame !== void 0 ? inFrame : 0) / (durationInFrames - 1)) * 100 + '%',\n            borderRadius: BAR_HEIGHT / 2,\n        };\n    }, [durationInFrames, frame, inFrame]);\n    const active = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            height: BAR_HEIGHT,\n            backgroundColor: 'rgba(255, 255, 255, 0.25)',\n            width: (((outFrame !== null && outFrame !== void 0 ? outFrame : durationInFrames - 1) - (inFrame !== null && inFrame !== void 0 ? inFrame : 0)) /\n                (durationInFrames - 1)) *\n                100 +\n                '%',\n            marginLeft: ((inFrame !== null && inFrame !== void 0 ? inFrame : 0) / (durationInFrames - 1)) * 100 + '%',\n            borderRadius: BAR_HEIGHT / 2,\n            position: 'absolute',\n        };\n    }, [durationInFrames, inFrame, outFrame]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: containerRef, onPointerDown: onPointerDown, style: containerStyle$1, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { style: barBackground, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: active }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: fillStyle })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: knobStyle })] }));\n};\n\nconst X_SPACER = 10;\nconst X_PADDING = 12;\nconst useVideoControlsResize = ({ allowFullscreen: allowFullScreen, playerWidth, }) => {\n    const resizeInfo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        const playPauseIconSize = ICON_SIZE;\n        const volumeIconSize = ICON_SIZE;\n        const _fullscreenIconSize = allowFullScreen ? fullscreenIconSize : 0;\n        const elementsSize = volumeIconSize +\n            playPauseIconSize +\n            _fullscreenIconSize +\n            X_PADDING * 2 +\n            X_SPACER * 2;\n        const maxTimeLabelWidth = playerWidth - elementsSize;\n        const maxTimeLabelWidthWithoutNegativeValue = Math.max(maxTimeLabelWidth, 0);\n        const availableTimeLabelWidthIfVolumeOpen = maxTimeLabelWidthWithoutNegativeValue - VOLUME_SLIDER_WIDTH;\n        // If max label width is lower than the volume width\n        // then it means we need to take it's width as the max label width\n        // otherwise we took the available width when volume open\n        const computedLabelWidth = availableTimeLabelWidthIfVolumeOpen < VOLUME_SLIDER_WIDTH\n            ? maxTimeLabelWidthWithoutNegativeValue\n            : availableTimeLabelWidthIfVolumeOpen;\n        const minWidthForHorizontalDisplay = computedLabelWidth + elementsSize + VOLUME_SLIDER_WIDTH;\n        const displayVerticalVolumeSlider = playerWidth < minWidthForHorizontalDisplay;\n        return {\n            maxTimeLabelWidth: maxTimeLabelWidthWithoutNegativeValue === 0\n                ? null\n                : maxTimeLabelWidthWithoutNegativeValue,\n            displayVerticalVolumeSlider,\n        };\n    }, [allowFullScreen, playerWidth]);\n    return resizeInfo;\n};\n\nconst gradientSteps = [\n    0, 0.013, 0.049, 0.104, 0.175, 0.259, 0.352, 0.45, 0.55, 0.648, 0.741, 0.825,\n    0.896, 0.951, 0.987,\n];\nconst gradientOpacities = [\n    0, 8.1, 15.5, 22.5, 29, 35.3, 41.2, 47.1, 52.9, 58.8, 64.7, 71, 77.5, 84.5,\n    91.9,\n];\nconst globalGradientOpacity = 1 / 0.7;\nconst containerStyle = {\n    boxSizing: 'border-box',\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n    paddingTop: 40,\n    paddingBottom: 10,\n    backgroundImage: `linear-gradient(to bottom,${gradientSteps\n        .map((g, i) => {\n        return `hsla(0, 0%, 0%, ${g}) ${gradientOpacities[i] * globalGradientOpacity}%`;\n    })\n        .join(', ')}, hsl(0, 0%, 0%) 100%)`,\n    backgroundSize: 'auto 145px',\n    display: 'flex',\n    paddingRight: X_PADDING,\n    paddingLeft: X_PADDING,\n    flexDirection: 'column',\n    transition: 'opacity 0.3s',\n};\nconst controlsRow = {\n    display: 'flex',\n    flexDirection: 'row',\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    userSelect: 'none',\n};\nconst leftPartStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n    userSelect: 'none',\n    alignItems: 'center',\n};\nconst xSpacer = {\n    width: 12,\n};\nconst ySpacer = {\n    height: 8,\n};\nconst flex1 = {\n    flex: 1,\n};\nconst fullscreen = {};\nconst PlayPauseButton = ({ playing }) => playing ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PauseIcon, {}) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PlayIcon, {});\nconst Controls = ({ durationInFrames, isFullscreen, fps, player, showVolumeControls, onFullscreenButtonClick, allowFullscreen, onExitFullscreenButtonClick, spaceKeyToPlayOrPause, onSeekEnd, onSeekStart, inFrame, outFrame, initiallyShowControls, canvasSize, renderPlayPauseButton, renderFullscreenButton, alwaysShowControls, showPlaybackRateControl, containerRef, }) => {\n    var _a;\n    const playButtonRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const frame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelinePosition();\n    const [supportsFullscreen, setSupportsFullscreen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const hovered = useHoverState(containerRef);\n    const { maxTimeLabelWidth, displayVerticalVolumeSlider } = useVideoControlsResize({\n        allowFullscreen,\n        playerWidth: (_a = canvasSize === null || canvasSize === void 0 ? void 0 : canvasSize.width) !== null && _a !== void 0 ? _a : 0,\n    });\n    const [shouldShowInitially, setInitiallyShowControls] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => {\n        if (typeof initiallyShowControls === 'boolean') {\n            return initiallyShowControls;\n        }\n        if (typeof initiallyShowControls === 'number') {\n            if (initiallyShowControls % 1 !== 0) {\n                throw new Error('initiallyShowControls must be an integer or a boolean');\n            }\n            if (Number.isNaN(initiallyShowControls)) {\n                throw new Error('initiallyShowControls must not be NaN');\n            }\n            if (!Number.isFinite(initiallyShowControls)) {\n                throw new Error('initiallyShowControls must be finite');\n            }\n            if (initiallyShowControls <= 0) {\n                throw new Error('initiallyShowControls must be a positive integer');\n            }\n            return initiallyShowControls;\n        }\n        throw new TypeError('initiallyShowControls must be a number or a boolean');\n    });\n    const containerCss = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        // Hide if playing and mouse outside\n        const shouldShow = hovered || !player.playing || shouldShowInitially || alwaysShowControls;\n        return {\n            ...containerStyle,\n            opacity: Number(shouldShow),\n        };\n    }, [hovered, shouldShowInitially, player.playing, alwaysShowControls]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (playButtonRef.current && spaceKeyToPlayOrPause) {\n            // This switches focus to play button when player.playing flag changes\n            playButtonRef.current.focus({\n                preventScroll: true,\n            });\n        }\n    }, [player.playing, spaceKeyToPlayOrPause]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        var _a;\n        // Must be handled client-side to avoid SSR hydration mismatch\n        setSupportsFullscreen((_a = (typeof document !== 'undefined' &&\n            (document.fullscreenEnabled || document.webkitFullscreenEnabled))) !== null && _a !== void 0 ? _a : false);\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (shouldShowInitially === false) {\n            return;\n        }\n        const time = shouldShowInitially === true ? 2000 : shouldShowInitially;\n        const timeout = setTimeout(() => {\n            setInitiallyShowControls(false);\n        }, time);\n        return () => {\n            clearInterval(timeout);\n        };\n    }, [shouldShowInitially]);\n    const timeLabel = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            color: 'white',\n            fontFamily: 'sans-serif',\n            fontSize: 14,\n            maxWidth: maxTimeLabelWidth === null ? undefined : maxTimeLabelWidth,\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n        };\n    }, [maxTimeLabelWidth]);\n    const playbackRates = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        if (showPlaybackRateControl === true) {\n            return [0.5, 0.8, 1, 1.2, 1.5, 1.8, 2, 2.5, 3];\n        }\n        if (Array.isArray(showPlaybackRateControl)) {\n            for (const rate of showPlaybackRateControl) {\n                if (typeof rate !== 'number') {\n                    throw new Error('Every item in showPlaybackRateControl must be a number');\n                }\n                if (rate <= 0) {\n                    throw new Error('Every item in showPlaybackRateControl must be positive');\n                }\n            }\n            return showPlaybackRateControl;\n        }\n        return null;\n    }, [showPlaybackRateControl]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { style: containerCss, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { style: controlsRow, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { style: leftPartStyle, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { ref: playButtonRef, type: \"button\", style: playerButtonStyle, onClick: player.playing ? player.pause : player.play, \"aria-label\": player.playing ? 'Pause video' : 'Play video', title: player.playing ? 'Pause video' : 'Play video', children: renderPlayPauseButton === null ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PlayPauseButton, { playing: player.playing })) : (renderPlayPauseButton({ playing: player.playing })) }), showVolumeControls ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: xSpacer }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaVolumeSlider, { displayVerticalVolumeSlider: displayVerticalVolumeSlider })] })) : null, (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: xSpacer }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { style: timeLabel, children: [formatTime(frame / fps), \" / \", formatTime(durationInFrames / fps)] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: xSpacer })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: flex1 }), playbackRates && canvasSize && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PlaybackrateControl, { canvasSize: canvasSize, playbackRates: playbackRates })), playbackRates && supportsFullscreen && allowFullscreen ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: xSpacer })) : null, (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: fullscreen, children: supportsFullscreen && allowFullscreen ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { type: \"button\", \"aria-label\": isFullscreen ? 'Exit fullscreen' : 'Enter Fullscreen', title: isFullscreen ? 'Exit fullscreen' : 'Enter Fullscreen', style: playerButtonStyle, onClick: isFullscreen\n                                ? onExitFullscreenButtonClick\n                                : onFullscreenButtonClick, children: renderFullscreenButton === null ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(FullscreenIcon, { isFullscreen: isFullscreen })) : (renderFullscreenButton({ isFullscreen })) })) : null })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: ySpacer }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PlayerSeekBar, { onSeekEnd: onSeekEnd, onSeekStart: onSeekStart, durationInFrames: durationInFrames, inFrame: inFrame, outFrame: outFrame })] }));\n};\n\nconst IS_NODE = typeof document === 'undefined';\n\nconst cancellablePromise = (promise) => {\n    let isCanceled = false;\n    const wrappedPromise = new Promise((resolve, reject) => {\n        promise\n            .then((value) => {\n            if (isCanceled) {\n                reject({ isCanceled, value });\n                return;\n            }\n            resolve(value);\n        })\n            .catch((error) => {\n            reject({ isCanceled, error });\n        });\n    });\n    return {\n        promise: wrappedPromise,\n        cancel: () => {\n            isCanceled = true;\n        },\n    };\n};\n\n/* eslint-disable no-promise-executor-return */\nconst delay = (n) => new Promise((resolve) => setTimeout(resolve, n));\n\nconst useCancellablePromises = () => {\n    const pendingPromises = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const appendPendingPromise = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((promise) => {\n        pendingPromises.current = [...pendingPromises.current, promise];\n    }, []);\n    const removePendingPromise = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((promise) => {\n        pendingPromises.current = pendingPromises.current.filter((p) => p !== promise);\n    }, []);\n    const clearPendingPromises = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => pendingPromises.current.map((p) => p.cancel()), []);\n    const api = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({\n        appendPendingPromise,\n        removePendingPromise,\n        clearPendingPromises,\n    }), [appendPendingPromise, clearPendingPromises, removePendingPromise]);\n    return api;\n};\n\nconst useClickPreventionOnDoubleClick = (onClick, onDoubleClick, doubleClickToFullscreen) => {\n    const api = useCancellablePromises();\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (e) => {\n        api.clearPendingPromises();\n        const waitForClick = cancellablePromise(delay(200));\n        api.appendPendingPromise(waitForClick);\n        try {\n            await waitForClick.promise;\n            api.removePendingPromise(waitForClick);\n            onClick(e);\n        }\n        catch (errorInfo) {\n            const info = errorInfo;\n            api.removePendingPromise(waitForClick);\n            if (!info.isCanceled) {\n                throw info.error;\n            }\n        }\n    }, [api, onClick]);\n    const handleDoubleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        api.clearPendingPromises();\n        onDoubleClick();\n    }, [api, onDoubleClick]);\n    const returnValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        if (!doubleClickToFullscreen) {\n            return [onClick, onDoubleClick];\n        }\n        return [handleClick, handleDoubleClick];\n    }, [\n        doubleClickToFullscreen,\n        handleClick,\n        handleDoubleClick,\n        onClick,\n        onDoubleClick,\n    ]);\n    return returnValue;\n};\n\nconst reactVersion$1 = react__WEBPACK_IMPORTED_MODULE_0__.version.split('.')[0];\nif (reactVersion$1 === '0') {\n    throw new Error(`Version ${reactVersion$1} of \"react\" is not supported by Remotion`);\n}\nconst doesReactVersionSupportSuspense$1 = parseInt(reactVersion$1, 10) >= 18;\nconst PlayerUI = ({ controls, style, loop, autoPlay, allowFullscreen, inputProps, clickToPlay, showVolumeControls, doubleClickToFullscreen, spaceKeyToPlayOrPause, errorFallback, playbackRate, renderLoading, renderPoster, className, moveToBeginningWhenEnded, showPosterWhenUnplayed, showPosterWhenEnded, showPosterWhenPaused, inFrame, outFrame, initiallyShowControls, renderFullscreen: renderFullscreenButton, renderPlayPauseButton, alwaysShowControls, showPlaybackRateControl, }, ref) => {\n    var _a, _b, _c;\n    const config = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig();\n    const video = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useVideo();\n    const container = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const canvasSize = useElementSize(container, {\n        triggerOnWindowResize: false,\n        shouldApplyCssTransforms: false,\n    });\n    const [hasPausedToResume, setHasPausedToResume] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [shouldAutoplay, setShouldAutoPlay] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(autoPlay);\n    const [isFullscreen, setIsFullscreen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => false);\n    const [seeking, setSeeking] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    usePlayback({\n        loop,\n        playbackRate,\n        moveToBeginningWhenEnded,\n        inFrame,\n        outFrame,\n    });\n    const player = usePlayer();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (hasPausedToResume && !player.playing) {\n            setHasPausedToResume(false);\n            player.play();\n        }\n    }, [hasPausedToResume, player]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const { current } = container;\n        if (!current) {\n            return;\n        }\n        const onFullscreenChange = () => {\n            setIsFullscreen(document.fullscreenElement === current ||\n                document.webkitFullscreenElement === current);\n        };\n        document.addEventListener('fullscreenchange', onFullscreenChange);\n        document.addEventListener('webkitfullscreenchange', onFullscreenChange);\n        return () => {\n            document.removeEventListener('fullscreenchange', onFullscreenChange);\n            document.removeEventListener('webkitfullscreenchange', onFullscreenChange);\n        };\n    }, []);\n    const toggle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {\n        if (player.isPlaying()) {\n            player.pause();\n        }\n        else {\n            player.play(e);\n        }\n    }, [player]);\n    const requestFullscreen = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        if (!allowFullscreen) {\n            throw new Error('allowFullscreen is false');\n        }\n        const supportsFullScreen = document.fullscreenEnabled || document.webkitFullscreenEnabled;\n        if (!supportsFullScreen) {\n            throw new Error('Browser doesnt support fullscreen');\n        }\n        if (!container.current) {\n            throw new Error('No player ref found');\n        }\n        if (container.current.webkitRequestFullScreen) {\n            container.current.webkitRequestFullScreen();\n        }\n        else {\n            container.current.requestFullscreen();\n        }\n    }, [allowFullscreen]);\n    const exitFullscreen = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n        else {\n            document.exitFullscreen();\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const { current } = container;\n        if (!current) {\n            return;\n        }\n        const fullscreenChange = () => {\n            var _a;\n            const element = (_a = document.webkitFullscreenElement) !== null && _a !== void 0 ? _a : document.fullscreenElement;\n            if (element && element === container.current) {\n                player.emitter.dispatchFullscreenChange({\n                    isFullscreen: true,\n                });\n            }\n            else {\n                player.emitter.dispatchFullscreenChange({\n                    isFullscreen: false,\n                });\n            }\n        };\n        current.addEventListener('webkitfullscreenchange', fullscreenChange);\n        current.addEventListener('fullscreenchange', fullscreenChange);\n        return () => {\n            current.removeEventListener('webkitfullscreenchange', fullscreenChange);\n            current.removeEventListener('fullscreenchange', fullscreenChange);\n        };\n    }, [player.emitter]);\n    const durationInFrames = (_a = config === null || config === void 0 ? void 0 : config.durationInFrames) !== null && _a !== void 0 ? _a : 1;\n    const layout = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        if (!config || !canvasSize) {\n            return null;\n        }\n        return calculateCanvasTransformation({\n            canvasSize,\n            compositionHeight: config.height,\n            compositionWidth: config.width,\n            previewSize: 'auto',\n        });\n    }, [canvasSize, config]);\n    const scale = (_b = layout === null || layout === void 0 ? void 0 : layout.scale) !== null && _b !== void 0 ? _b : 1;\n    const initialScaleIgnored = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (!initialScaleIgnored.current) {\n            initialScaleIgnored.current = true;\n            return;\n        }\n        player.emitter.dispatchScaleChange(scale);\n    }, [player.emitter, scale]);\n    const { setMediaVolume, setMediaMuted } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.SetMediaVolumeContext);\n    const { mediaMuted, mediaVolume } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.MediaVolumeContext);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        player.emitter.dispatchVolumeChange(mediaVolume);\n    }, [player.emitter, mediaVolume]);\n    const isMuted = mediaMuted || mediaVolume === 0;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        player.emitter.dispatchMuteChange({\n            isMuted,\n        });\n    }, [player.emitter, isMuted]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => {\n        const methods = {\n            play: player.play,\n            pause: () => {\n                // If, after .seek()-ing, the player was explicitly paused, we don't resume\n                setHasPausedToResume(false);\n                player.pause();\n            },\n            toggle,\n            getContainerNode: () => container.current,\n            getCurrentFrame: player.getCurrentFrame,\n            isPlaying: () => player.playing,\n            seekTo: (f) => {\n                const lastFrame = durationInFrames - 1;\n                const frameToSeekTo = Math.max(0, Math.min(lastFrame, f));\n                // continue playing after seeking if the player was playing before\n                if (player.isPlaying()) {\n                    const pauseToResume = frameToSeekTo !== lastFrame || loop;\n                    setHasPausedToResume(pauseToResume);\n                    player.pause();\n                }\n                if (frameToSeekTo === lastFrame && !loop) {\n                    player.emitter.dispatchEnded();\n                }\n                player.seek(frameToSeekTo);\n            },\n            isFullscreen: () => isFullscreen,\n            requestFullscreen,\n            exitFullscreen,\n            getVolume: () => {\n                if (mediaMuted) {\n                    return 0;\n                }\n                return mediaVolume;\n            },\n            setVolume: (vol) => {\n                if (typeof vol !== 'number') {\n                    throw new TypeError(`setVolume() takes a number, got value of type ${typeof vol}`);\n                }\n                if (isNaN(vol)) {\n                    throw new TypeError(`setVolume() got a number that is NaN. Volume must be between 0 and 1.`);\n                }\n                if (vol < 0 || vol > 1) {\n                    throw new TypeError(`setVolume() got a number that is out of range. Must be between 0 and 1, got ${typeof vol}`);\n                }\n                setMediaVolume(vol);\n            },\n            isMuted: () => isMuted,\n            mute: () => {\n                setMediaMuted(true);\n            },\n            unmute: () => {\n                setMediaMuted(false);\n            },\n            getScale: () => scale,\n        };\n        return Object.assign(player.emitter, methods);\n    }, [\n        durationInFrames,\n        exitFullscreen,\n        isFullscreen,\n        loop,\n        mediaMuted,\n        isMuted,\n        mediaVolume,\n        player,\n        requestFullscreen,\n        setMediaMuted,\n        setMediaVolume,\n        toggle,\n        scale,\n    ]);\n    const VideoComponent = video ? video.component : null;\n    const outerStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return calculateOuterStyle({ canvasSize, config, style });\n    }, [canvasSize, config, style]);\n    const outer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return calculateOuter({ config, layout, scale });\n    }, [config, layout, scale]);\n    const containerStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return calculateContainerStyle({ canvasSize, config, layout, scale });\n    }, [canvasSize, config, layout, scale]);\n    const onError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((error) => {\n        player.pause();\n        // Pay attention to `this context`\n        player.emitter.dispatchError(error);\n    }, [player]);\n    const onFullscreenButtonClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {\n        e.stopPropagation();\n        requestFullscreen();\n    }, [requestFullscreen]);\n    const onExitFullscreenButtonClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {\n        e.stopPropagation();\n        exitFullscreen();\n    }, [exitFullscreen]);\n    const onSingleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {\n        toggle(e);\n    }, [toggle]);\n    const onSeekStart = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        setSeeking(true);\n    }, []);\n    const onSeekEnd = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        setSeeking(false);\n    }, []);\n    const onDoubleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        if (isFullscreen) {\n            exitFullscreen();\n        }\n        else {\n            requestFullscreen();\n        }\n    }, [exitFullscreen, isFullscreen, requestFullscreen]);\n    const [handleClick, handleDoubleClick] = useClickPreventionOnDoubleClick(onSingleClick, onDoubleClick, doubleClickToFullscreen);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (shouldAutoplay) {\n            player.play();\n            setShouldAutoPlay(false);\n        }\n    }, [shouldAutoplay, player]);\n    const loadingMarkup = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return renderLoading\n            ? renderLoading({\n                height: outerStyle.height,\n                width: outerStyle.width,\n            })\n            : null;\n    }, [outerStyle.height, outerStyle.width, renderLoading]);\n    if (!config) {\n        return null;\n    }\n    const poster = renderPoster\n        ? renderPoster({\n            height: outerStyle.height,\n            width: outerStyle.width,\n        })\n        : null;\n    if (poster === undefined) {\n        throw new TypeError('renderPoster() must return a React element, but undefined was returned');\n    }\n    const shouldShowPoster = poster &&\n        [\n            showPosterWhenPaused && !player.isPlaying() && !seeking,\n            showPosterWhenEnded && player.isLastFrame && !player.isPlaying(),\n            showPosterWhenUnplayed && !player.hasPlayed && !player.isPlaying(),\n        ].some(Boolean);\n    const content = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: outer, onClick: clickToPlay ? handleClick : undefined, onDoubleClick: doubleClickToFullscreen ? handleDoubleClick : undefined, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: containerStyle, className: PLAYER_CSS_CLASSNAME, children: VideoComponent ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ErrorBoundary, { onError: onError, errorFallback: errorFallback, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.ClipComposition, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(VideoComponent, { ...((_c = video === null || video === void 0 ? void 0 : video.props) !== null && _c !== void 0 ? _c : {}), ...(inputProps !== null && inputProps !== void 0 ? inputProps : {}) }) }) })) : null }) }), shouldShowPoster ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: outer, onClick: clickToPlay ? handleClick : undefined, onDoubleClick: doubleClickToFullscreen ? handleDoubleClick : undefined, children: poster })) : null, controls ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Controls, { fps: config.fps, durationInFrames: config.durationInFrames, player: player, containerRef: container, onFullscreenButtonClick: onFullscreenButtonClick, isFullscreen: isFullscreen, allowFullscreen: allowFullscreen, showVolumeControls: showVolumeControls, onExitFullscreenButtonClick: onExitFullscreenButtonClick, spaceKeyToPlayOrPause: spaceKeyToPlayOrPause, onSeekEnd: onSeekEnd, onSeekStart: onSeekStart, inFrame: inFrame, outFrame: outFrame, initiallyShowControls: initiallyShowControls, canvasSize: canvasSize, renderFullscreenButton: renderFullscreenButton, renderPlayPauseButton: renderPlayPauseButton, alwaysShowControls: alwaysShowControls, showPlaybackRateControl: showPlaybackRateControl })) : null] }));\n    if (IS_NODE && !doesReactVersionSupportSuspense$1) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: container, style: outerStyle, className: className, children: content }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: container, style: outerStyle, className: className, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, { fallback: loadingMarkup, children: content }) }));\n};\nvar PlayerUI$1 = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(PlayerUI);\n\nconst VOLUME_PERSISTANCE_KEY = 'remotion.volumePreference';\nconst persistVolume = (volume) => {\n    if (typeof window === 'undefined') {\n        return;\n    }\n    window.localStorage.setItem(VOLUME_PERSISTANCE_KEY, String(volume));\n};\nconst getPreferredVolume = () => {\n    if (typeof window === 'undefined') {\n        return 1;\n    }\n    const val = window.localStorage.getItem(VOLUME_PERSISTANCE_KEY);\n    return val ? Number(val) : 1;\n};\n\nconst PLAYER_COMP_ID = 'player-comp';\nconst SharedPlayerContexts = ({ children, timelineContext, fps, compositionHeight, compositionWidth, durationInFrames, component, numberOfSharedAudioTags, initiallyMuted, }) => {\n    const compositionManagerContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        const context = {\n            compositions: [\n                {\n                    component: component,\n                    durationInFrames,\n                    height: compositionHeight,\n                    width: compositionWidth,\n                    fps,\n                    id: PLAYER_COMP_ID,\n                    nonce: 777,\n                    folderName: null,\n                    parentFolderName: null,\n                    schema: null,\n                    calculateMetadata: null,\n                },\n            ],\n            folders: [],\n            registerFolder: () => undefined,\n            unregisterFolder: () => undefined,\n            registerComposition: () => undefined,\n            unregisterComposition: () => undefined,\n            currentCompositionMetadata: null,\n            setCurrentCompositionMetadata: () => undefined,\n            canvasContent: { type: 'composition', compositionId: 'player-comp' },\n            setCanvasContent: () => undefined,\n        };\n        return context;\n    }, [component, durationInFrames, compositionHeight, compositionWidth, fps]);\n    const [mediaMuted, setMediaMuted] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => initiallyMuted);\n    const [mediaVolume, setMediaVolume] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => getPreferredVolume());\n    const mediaVolumeContextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            mediaMuted,\n            mediaVolume,\n        };\n    }, [mediaMuted, mediaVolume]);\n    const setMediaVolumeAndPersist = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((vol) => {\n        setMediaVolume(vol);\n        persistVolume(vol);\n    }, []);\n    const setMediaVolumeContextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            setMediaMuted,\n            setMediaVolume: setMediaVolumeAndPersist,\n        };\n    }, [setMediaVolumeAndPersist]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.CanUseRemotionHooksProvider, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.TimelineContext.Provider, { value: timelineContext, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.CompositionManager.Provider, { value: compositionManagerContext, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.ResolveCompositionConfig, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.PrefetchProvider, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.DurationsContextProvider, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.MediaVolumeContext.Provider, { value: mediaVolumeContextValue, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.NativeLayersProvider, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.SetMediaVolumeContext.Provider, { value: setMediaVolumeContextValue, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.SharedAudioContextProvider, { numberOfAudioTags: numberOfSharedAudioTags, component: component, children: children }) }) }) }) }) }) }) }) }) }));\n};\n\nconst validateSingleFrame = (frame, variableName) => {\n    if (typeof frame === 'undefined' || frame === null) {\n        return frame !== null && frame !== void 0 ? frame : null;\n    }\n    if (typeof frame !== 'number') {\n        throw new TypeError(`\"${variableName}\" must be a number, but is ${JSON.stringify(frame)}`);\n    }\n    if (Number.isNaN(frame)) {\n        throw new TypeError(`\"${variableName}\" must not be NaN, but is ${JSON.stringify(frame)}`);\n    }\n    if (!Number.isFinite(frame)) {\n        throw new TypeError(`\"${variableName}\" must be finite, but is ${JSON.stringify(frame)}`);\n    }\n    if (frame % 1 !== 0) {\n        throw new TypeError(`\"${variableName}\" must be an integer, but is ${JSON.stringify(frame)}`);\n    }\n    return frame;\n};\nconst validateInOutFrames = ({ inFrame, durationInFrames, outFrame, }) => {\n    const validatedInFrame = validateSingleFrame(inFrame, 'inFrame');\n    const validatedOutFrame = validateSingleFrame(outFrame, 'outFrame');\n    if (validatedInFrame === null && validatedOutFrame === null) {\n        return;\n    }\n    // Must not be over the duration\n    if (validatedInFrame !== null && validatedInFrame > durationInFrames - 1) {\n        throw new Error('inFrame must be less than (durationInFrames - 1), but is ' +\n            validatedInFrame);\n    }\n    if (validatedOutFrame !== null && validatedOutFrame > durationInFrames - 1) {\n        throw new Error('outFrame must be less than (durationInFrames - 1), but is ' +\n            validatedOutFrame);\n    }\n    // Must not be under 0\n    if (validatedInFrame !== null && validatedInFrame < 0) {\n        throw new Error('inFrame must be greater than 0, but is ' + validatedInFrame);\n    }\n    if (validatedOutFrame !== null && validatedOutFrame <= 0) {\n        throw new Error(`outFrame must be greater than 0, but is ${validatedOutFrame}. If you want to render a single frame, use <Thumbnail /> instead.`);\n    }\n    if (validatedOutFrame !== null &&\n        validatedInFrame !== null &&\n        validatedOutFrame <= validatedInFrame) {\n        throw new Error('outFrame must be greater than inFrame, but is ' +\n            validatedOutFrame +\n            ' <= ' +\n            validatedInFrame);\n    }\n};\n\nconst validateInitialFrame = ({ initialFrame, durationInFrames, }) => {\n    if (typeof durationInFrames !== 'number') {\n        throw new Error(`\\`durationInFrames\\` must be a number, but is ${JSON.stringify(durationInFrames)}`);\n    }\n    if (typeof initialFrame === 'undefined') {\n        return;\n    }\n    if (typeof initialFrame !== 'number') {\n        throw new Error(`\\`initialFrame\\` must be a number, but is ${JSON.stringify(initialFrame)}`);\n    }\n    if (Number.isNaN(initialFrame)) {\n        throw new Error(`\\`initialFrame\\` must be a number, but is NaN`);\n    }\n    if (!Number.isFinite(initialFrame)) {\n        throw new Error(`\\`initialFrame\\` must be a number, but is Infinity`);\n    }\n    if (initialFrame % 1 !== 0) {\n        throw new Error(`\\`initialFrame\\` must be an integer, but is ${JSON.stringify(initialFrame)}`);\n    }\n    if (initialFrame > durationInFrames - 1) {\n        throw new Error(`\\`initialFrame\\` must be less or equal than \\`durationInFrames - 1\\`, but is ${JSON.stringify(initialFrame)}`);\n    }\n};\n\nconst validatePlaybackRate = (playbackRate) => {\n    if (playbackRate === undefined) {\n        return;\n    }\n    if (playbackRate > 4) {\n        throw new Error(`The highest possible playback rate is 4. You passed: ${playbackRate}`);\n    }\n    if (playbackRate < -4) {\n        throw new Error(`The lowest possible playback rate is -4. You passed: ${playbackRate}`);\n    }\n    if (playbackRate === 0) {\n        throw new Error(`A playback rate of 0 is not supported.`);\n    }\n};\n\n/* eslint-disable prefer-destructuring */\nconst validateFps = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.validateFps;\nconst validateDimension = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.validateDimension;\nconst validateDurationInFrames = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.validateDurationInFrames;\nconst validateDefaultAndInputProps = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.validateDefaultAndInputProps;\n\nconst componentOrNullIfLazy = (props) => {\n    if ('component' in props) {\n        return props.component;\n    }\n    return null;\n};\nconst PlayerFn = ({ durationInFrames, compositionHeight, compositionWidth, fps, inputProps, style, controls = false, loop = false, autoPlay = false, showVolumeControls = true, allowFullscreen = true, clickToPlay, doubleClickToFullscreen = false, spaceKeyToPlayOrPause = true, moveToBeginningWhenEnded = true, numberOfSharedAudioTags = 5, errorFallback = () => '⚠️', playbackRate = 1, renderLoading, className, showPosterWhenUnplayed, showPosterWhenEnded, showPosterWhenPaused, initialFrame, renderPoster, inFrame, outFrame, initiallyShowControls, renderFullscreenButton, renderPlayPauseButton, alwaysShowControls = false, initiallyMuted = false, showPlaybackRateControl = false, ...componentProps }, ref) => {\n    if (typeof window !== 'undefined') {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n            window.remotion_isPlayer = true;\n        }, []);\n    }\n    // @ts-expect-error\n    if (componentProps.defaultProps !== undefined) {\n        throw new Error('The <Player /> component does not accept `defaultProps`, but some were passed. Use `inputProps` instead.');\n    }\n    const componentForValidation = componentOrNullIfLazy(componentProps);\n    // @ts-expect-error\n    if ((componentForValidation === null || componentForValidation === void 0 ? void 0 : componentForValidation.type) === remotion__WEBPACK_IMPORTED_MODULE_1__.Composition) {\n        throw new TypeError(`'component' should not be an instance of <Composition/>. Pass the React component directly, and set the duration, fps and dimensions as separate props. See https://www.remotion.dev/docs/player/examples for an example.`);\n    }\n    if (componentForValidation === remotion__WEBPACK_IMPORTED_MODULE_1__.Composition) {\n        throw new TypeError(`'component' must not be the 'Composition' component. Pass your own React component directly, and set the duration, fps and dimensions as separate props. See https://www.remotion.dev/docs/player/examples for an example.`);\n    }\n    const component = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useLazyComponent(componentProps);\n    validateInitialFrame({ initialFrame, durationInFrames });\n    const [frame, setFrame] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => ({\n        [PLAYER_COMP_ID]: initialFrame !== null && initialFrame !== void 0 ? initialFrame : 0,\n    }));\n    const [playing, setPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [rootId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('player-comp');\n    const [emitter] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => new PlayerEmitter());\n    const rootRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const audioAndVideoTags = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const imperativePlaying = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const [currentPlaybackRate, setCurrentPlaybackRate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(playbackRate);\n    if (typeof compositionHeight !== 'number') {\n        throw new TypeError(`'compositionHeight' must be a number but got '${typeof compositionHeight}' instead`);\n    }\n    if (typeof compositionWidth !== 'number') {\n        throw new TypeError(`'compositionWidth' must be a number but got '${typeof compositionWidth}' instead`);\n    }\n    validateDimension(compositionHeight, 'compositionHeight', 'of the <Player /> component');\n    validateDimension(compositionWidth, 'compositionWidth', 'of the <Player /> component');\n    validateDurationInFrames(durationInFrames, {\n        component: 'of the <Player/> component',\n        allowFloats: false,\n    });\n    validateFps(fps, 'as a prop of the <Player/> component', false);\n    validateDefaultAndInputProps(inputProps, 'inputProps', null);\n    validateInOutFrames({\n        durationInFrames,\n        inFrame,\n        outFrame,\n    });\n    if (typeof controls !== 'boolean' && typeof controls !== 'undefined') {\n        throw new TypeError(`'controls' must be a boolean or undefined but got '${typeof controls}' instead`);\n    }\n    if (typeof autoPlay !== 'boolean' && typeof autoPlay !== 'undefined') {\n        throw new TypeError(`'autoPlay' must be a boolean or undefined but got '${typeof autoPlay}' instead`);\n    }\n    if (typeof loop !== 'boolean' && typeof loop !== 'undefined') {\n        throw new TypeError(`'loop' must be a boolean or undefined but got '${typeof loop}' instead`);\n    }\n    if (typeof doubleClickToFullscreen !== 'boolean' &&\n        typeof doubleClickToFullscreen !== 'undefined') {\n        throw new TypeError(`'doubleClickToFullscreen' must be a boolean or undefined but got '${typeof doubleClickToFullscreen}' instead`);\n    }\n    if (typeof showVolumeControls !== 'boolean' &&\n        typeof showVolumeControls !== 'undefined') {\n        throw new TypeError(`'showVolumeControls' must be a boolean or undefined but got '${typeof showVolumeControls}' instead`);\n    }\n    if (typeof allowFullscreen !== 'boolean' &&\n        typeof allowFullscreen !== 'undefined') {\n        throw new TypeError(`'allowFullscreen' must be a boolean or undefined but got '${typeof allowFullscreen}' instead`);\n    }\n    if (typeof clickToPlay !== 'boolean' && typeof clickToPlay !== 'undefined') {\n        throw new TypeError(`'clickToPlay' must be a boolean or undefined but got '${typeof clickToPlay}' instead`);\n    }\n    if (typeof spaceKeyToPlayOrPause !== 'boolean' &&\n        typeof spaceKeyToPlayOrPause !== 'undefined') {\n        throw new TypeError(`'spaceKeyToPlayOrPause' must be a boolean or undefined but got '${typeof spaceKeyToPlayOrPause}' instead`);\n    }\n    if (typeof numberOfSharedAudioTags !== 'number' ||\n        numberOfSharedAudioTags % 1 !== 0 ||\n        !Number.isFinite(numberOfSharedAudioTags) ||\n        Number.isNaN(numberOfSharedAudioTags) ||\n        numberOfSharedAudioTags < 0) {\n        throw new TypeError(`'numberOfSharedAudioTags' must be an integer but got '${numberOfSharedAudioTags}' instead`);\n    }\n    validatePlaybackRate(currentPlaybackRate);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        emitter.dispatchRateChange(currentPlaybackRate);\n    }, [emitter, currentPlaybackRate]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        setCurrentPlaybackRate(playbackRate);\n    }, [playbackRate]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => rootRef.current, []);\n    const timelineContextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            frame,\n            playing,\n            rootId,\n            playbackRate: currentPlaybackRate,\n            imperativePlaying,\n            setPlaybackRate: (rate) => {\n                setCurrentPlaybackRate(rate);\n            },\n            audioAndVideoTags,\n        };\n    }, [frame, currentPlaybackRate, playing, rootId]);\n    const setTimelineContextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            setFrame,\n            setPlaying,\n        };\n    }, [setFrame]);\n    if (typeof window !== 'undefined') {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n            // Inject CSS only on client, and also only after the Player has hydrated\n            remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.CSSUtils.injectCSS(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.CSSUtils.makeDefaultCSS(`.${PLAYER_CSS_CLASSNAME}`, '#fff'));\n        }, []);\n    }\n    const actualInputProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => inputProps !== null && inputProps !== void 0 ? inputProps : {}, [inputProps]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.IsPlayerContextProvider, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SharedPlayerContexts, { timelineContext: timelineContextValue, component: component, compositionHeight: compositionHeight, compositionWidth: compositionWidth, durationInFrames: durationInFrames, fps: fps, numberOfSharedAudioTags: numberOfSharedAudioTags, initiallyMuted: initiallyMuted, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.SetTimelineContext.Provider, { value: setTimelineContextValue, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PlayerEventEmitterContext.Provider, { value: emitter, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PlayerUI$1, { ref: rootRef, renderLoading: renderLoading, autoPlay: Boolean(autoPlay), loop: Boolean(loop), controls: Boolean(controls), errorFallback: errorFallback, style: style, inputProps: actualInputProps, allowFullscreen: Boolean(allowFullscreen), moveToBeginningWhenEnded: Boolean(moveToBeginningWhenEnded), clickToPlay: typeof clickToPlay === 'boolean'\n                            ? clickToPlay\n                            : Boolean(controls), showVolumeControls: Boolean(showVolumeControls), doubleClickToFullscreen: Boolean(doubleClickToFullscreen), spaceKeyToPlayOrPause: Boolean(spaceKeyToPlayOrPause), playbackRate: currentPlaybackRate, className: className !== null && className !== void 0 ? className : undefined, showPosterWhenUnplayed: Boolean(showPosterWhenUnplayed), showPosterWhenEnded: Boolean(showPosterWhenEnded), showPosterWhenPaused: Boolean(showPosterWhenPaused), renderPoster: renderPoster, inFrame: inFrame !== null && inFrame !== void 0 ? inFrame : null, outFrame: outFrame !== null && outFrame !== void 0 ? outFrame : null, initiallyShowControls: initiallyShowControls !== null && initiallyShowControls !== void 0 ? initiallyShowControls : true, renderFullscreen: renderFullscreenButton !== null && renderFullscreenButton !== void 0 ? renderFullscreenButton : null, renderPlayPauseButton: renderPlayPauseButton !== null && renderPlayPauseButton !== void 0 ? renderPlayPauseButton : null, alwaysShowControls: alwaysShowControls, showPlaybackRateControl: showPlaybackRateControl }) }) }) }) }));\n};\nconst forward$1 = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef;\n/**\n * @description A component which can be rendered in a regular React App (for example: Vite, Next.js) to display a Remotion video.\n * @see [Documentation](https://www.remotion.dev/docs/player/player)\n */\nconst Player = forward$1(PlayerFn);\n\nconst useThumbnail = () => {\n    const emitter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ThumbnailEmitterContext);\n    if (!emitter) {\n        throw new TypeError('Expected Player event emitter context');\n    }\n    const returnValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            emitter,\n        };\n    }, [emitter]);\n    return returnValue;\n};\n\nconst reactVersion = react__WEBPACK_IMPORTED_MODULE_0__.version.split('.')[0];\nif (reactVersion === '0') {\n    throw new Error(`Version ${reactVersion} of \"react\" is not supported by Remotion`);\n}\nconst doesReactVersionSupportSuspense = parseInt(reactVersion, 10) >= 18;\nconst ThumbnailUI = ({ style, inputProps, errorFallback, renderLoading, className }, ref) => {\n    var _a, _b;\n    const config = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig();\n    const video = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useVideo();\n    const container = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const canvasSize = useElementSize(container, {\n        triggerOnWindowResize: false,\n        shouldApplyCssTransforms: false,\n    });\n    const layout = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        if (!config || !canvasSize) {\n            return null;\n        }\n        return calculateCanvasTransformation({\n            canvasSize,\n            compositionHeight: config.height,\n            compositionWidth: config.width,\n            previewSize: 'auto',\n        });\n    }, [canvasSize, config]);\n    const scale = (_a = layout === null || layout === void 0 ? void 0 : layout.scale) !== null && _a !== void 0 ? _a : 1;\n    const thumbnail = useThumbnail();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => {\n        const methods = {\n            getContainerNode: () => container.current,\n            getScale: () => scale,\n        };\n        return Object.assign(thumbnail.emitter, methods);\n    }, [scale, thumbnail.emitter]);\n    const VideoComponent = video ? video.component : null;\n    const outerStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return calculateOuterStyle({ config, style, canvasSize });\n    }, [canvasSize, config, style]);\n    const outer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return calculateOuter({ config, layout, scale });\n    }, [config, layout, scale]);\n    const containerStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return calculateContainerStyle({\n            canvasSize,\n            config,\n            layout,\n            scale,\n        });\n    }, [canvasSize, config, layout, scale]);\n    const onError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((error) => {\n        // Pay attention to `this context`\n        thumbnail.emitter.dispatchError(error);\n    }, [thumbnail.emitter]);\n    const rootRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => rootRef.current, []);\n    const loadingMarkup = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return renderLoading\n            ? renderLoading({\n                height: outerStyle.height,\n                width: outerStyle.width,\n            })\n            : null;\n    }, [outerStyle.height, outerStyle.width, renderLoading]);\n    if (!config) {\n        return null;\n    }\n    const content = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: outer, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { style: containerStyle, className: PLAYER_CSS_CLASSNAME, children: VideoComponent ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ErrorBoundary, { onError: onError, errorFallback: errorFallback, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(VideoComponent, { ...((_b = video === null || video === void 0 ? void 0 : video.props) !== null && _b !== void 0 ? _b : {}), ...(inputProps !== null && inputProps !== void 0 ? inputProps : {}) }) })) : null }) }));\n    if (IS_NODE && !doesReactVersionSupportSuspense) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: container, style: outerStyle, className: className, children: content }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: container, style: outerStyle, className: className, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, { fallback: loadingMarkup, children: content }) }));\n};\nvar ThumbnailUI$1 = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(ThumbnailUI);\n\nconst ThumbnailFn = ({ frameToDisplay, style, inputProps, compositionHeight, compositionWidth, durationInFrames, fps, className, errorFallback = () => '⚠️', renderLoading, ...componentProps }, ref) => {\n    if (typeof window !== 'undefined') {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n            window.remotion_isPlayer = true;\n        }, []);\n    }\n    const [thumbnailId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => String((0,remotion__WEBPACK_IMPORTED_MODULE_1__.random)(null)));\n    const rootRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const timelineState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        const value = {\n            playing: false,\n            frame: {\n                [PLAYER_COMP_ID]: frameToDisplay,\n            },\n            rootId: thumbnailId,\n            imperativePlaying: {\n                current: false,\n            },\n            playbackRate: 1,\n            setPlaybackRate: () => {\n                throw new Error('thumbnail');\n            },\n            audioAndVideoTags: { current: [] },\n        };\n        return value;\n    }, [frameToDisplay, thumbnailId]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => rootRef.current, []);\n    const Component = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useLazyComponent(componentProps);\n    const [emitter] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => new ThumbnailEmitter());\n    const passedInputProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return inputProps !== null && inputProps !== void 0 ? inputProps : {};\n    }, [inputProps]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.IsPlayerContextProvider, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SharedPlayerContexts, { timelineContext: timelineState, component: Component, compositionHeight: compositionHeight, compositionWidth: compositionWidth, durationInFrames: durationInFrames, fps: fps, numberOfSharedAudioTags: 0, initiallyMuted: true, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThumbnailEmitterContext.Provider, { value: emitter, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ThumbnailUI$1, { className: className, errorFallback: errorFallback, inputProps: passedInputProps, renderLoading: renderLoading, style: style }) }) }) }));\n};\nconst forward = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef;\n/**\n * @description A component which can be rendered in a regular React App (for example: Create React App, Next.js) to display a single frame of a video.\n * @see [Documentation](https://www.remotion.dev/docs/player/thumbnail)\n */\nconst Thumbnail = forward(ThumbnailFn);\n\nconst PlayerInternals = {\n    PlayerEventEmitterContext,\n    PlayerEmitter,\n    usePlayer,\n    usePlayback,\n    useElementSize,\n    calculateCanvasTransformation,\n    useHoverState,\n    updateAllElementsSizes,\n    calculateScale,\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@remotion+player@4.0.47_react-dom@18.2.0_react@18.2.0/node_modules/@remotion/player/dist/esm/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/remotion@4.0.47_react-dom@18.2.0_react@18.2.0/node_modules/remotion/dist/esm/index.mjs":
/*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/remotion@4.0.47_react-dom@18.2.0_react@18.2.0/node_modules/remotion/dist/esm/index.mjs ***!
  \***********************************************************************************************************************/
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbsoluteFill: function() { return /* binding */ AbsoluteFill; },\n/* harmony export */   Audio: function() { return /* binding */ Audio; },\n/* harmony export */   Composition: function() { return /* binding */ Composition; },\n/* harmony export */   Config: function() { return /* binding */ Config; },\n/* harmony export */   Easing: function() { return /* binding */ Easing; },\n/* harmony export */   Experimental: function() { return /* binding */ Experimental; },\n/* harmony export */   Folder: function() { return /* binding */ Folder; },\n/* harmony export */   FolderContext: function() { return /* binding */ FolderContext; },\n/* harmony export */   Freeze: function() { return /* binding */ Freeze; },\n/* harmony export */   IFrame: function() { return /* binding */ IFrame; },\n/* harmony export */   Img: function() { return /* binding */ Img; },\n/* harmony export */   Internals: function() { return /* binding */ Internals; },\n/* harmony export */   Loop: function() { return /* binding */ Loop; },\n/* harmony export */   OffthreadVideo: function() { return /* binding */ OffthreadVideo; },\n/* harmony export */   Sequence: function() { return /* binding */ Sequence; },\n/* harmony export */   Series: function() { return /* binding */ Series; },\n/* harmony export */   Still: function() { return /* binding */ Still; },\n/* harmony export */   VERSION: function() { return /* binding */ VERSION; },\n/* harmony export */   Video: function() { return /* binding */ Video; },\n/* harmony export */   cancelRender: function() { return /* binding */ cancelRender; },\n/* harmony export */   continueRender: function() { return /* binding */ continueRender; },\n/* harmony export */   delayRender: function() { return /* binding */ delayRender; },\n/* harmony export */   getInputProps: function() { return /* binding */ getInputProps; },\n/* harmony export */   getRemotionEnvironment: function() { return /* binding */ getRemotionEnvironment; },\n/* harmony export */   getStaticFiles: function() { return /* binding */ getStaticFiles; },\n/* harmony export */   interpolate: function() { return /* binding */ interpolate; },\n/* harmony export */   interpolateColors: function() { return /* binding */ interpolateColors; },\n/* harmony export */   measureSpring: function() { return /* binding */ measureSpring; },\n/* harmony export */   prefetch: function() { return /* binding */ prefetch; },\n/* harmony export */   random: function() { return /* binding */ random; },\n/* harmony export */   registerRoot: function() { return /* binding */ registerRoot; },\n/* harmony export */   spring: function() { return /* binding */ spring; },\n/* harmony export */   staticFile: function() { return /* binding */ staticFile; },\n/* harmony export */   useCurrentFrame: function() { return /* binding */ useCurrentFrame; },\n/* harmony export */   useVideoConfig: function() { return /* binding */ useVideoConfig; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react-dom/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/build/polyfills/process.js\");\n\n\n\n\nconst NativeLayersContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    setClipRegion: () => {\n        throw new Error('NativeLayers not set');\n    },\n    clipRegion: null,\n});\nconst NativeLayersProvider = ({ children, }) => {\n    const [clipRegion, setClipRegion] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            setClipRegion,\n            clipRegion,\n        };\n    }, [clipRegion, setClipRegion]);\n    if (typeof window !== 'undefined') {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n            window.remotion_getClipRegion = () => {\n                return clipRegion;\n            };\n        }, [clipRegion, setClipRegion]);\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(NativeLayersContext.Provider, { value: context, children: children }));\n};\n\nconst Clipper = ({ height, width, x, y }) => {\n    const { setClipRegion } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(NativeLayersContext);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        setClipRegion((c) => {\n            if (c === 'hide') {\n                throw new Error('Cannot render <Clipper>, because another <Null> is already rendered');\n            }\n            if (c === null) {\n                return { height, width, x, y };\n            }\n            throw new Error('Cannot render <Clipper>, because another component clipping the region was already rendered (most likely <Clipper>)');\n        });\n        return () => {\n            setClipRegion(null);\n        };\n    }, [height, setClipRegion, width, x, y]);\n    return null;\n};\n\nconst IsPlayerContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(false);\nconst IsPlayerContextProvider = ({ children, }) => {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(IsPlayerContext.Provider, { value: true, children: children });\n};\nconst useIsPlayer = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(IsPlayerContext);\n};\n\nfunction truthy(value) {\n    return Boolean(value);\n}\n\n// Automatically generated on publish\nconst VERSION = '4.0.47';\n\nconst checkMultipleRemotionVersions = () => {\n    if (typeof globalThis === 'undefined') {\n        return;\n    }\n    const alreadyImported = globalThis.remotion_imported ||\n        (typeof window !== 'undefined' && window.remotion_imported);\n    if (alreadyImported) {\n        if (alreadyImported === VERSION) {\n            // Next.JS will reload the package and cause a server-side warning.\n            // It's okay if this happens during SSR in developement\n            return;\n        }\n        throw new TypeError(`🚨 Multiple versions of Remotion detected: ${[\n            VERSION,\n            typeof alreadyImported === 'string'\n                ? alreadyImported\n                : 'an older version',\n        ]\n            .filter(truthy)\n            .join(' and ')}. This will cause things to break in an unexpected way.\\nCheck that all your Remotion packages are on the same version. If your dependencies depend on Remotion, make them peer dependencies. You can also run \\`npx remotion versions\\` from your terminal to see which versions are mismatching.`);\n    }\n    globalThis.remotion_imported = VERSION;\n    if (typeof window !== 'undefined') {\n        window.remotion_imported = VERSION;\n    }\n};\n\nconst Null = () => {\n    const { setClipRegion } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(NativeLayersContext);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        setClipRegion((c) => {\n            if (c === null) {\n                return 'hide';\n            }\n            // Rendering multiple <Null> is fine, because they are all hidden\n            if (c === 'hide') {\n                return 'hide';\n            }\n            throw new Error('Cannot render <Null>, because another component clipping the region was already rendered (most likely <Clipper>)');\n        });\n        return () => {\n            setClipRegion(null);\n        };\n    }, [setClipRegion]);\n    return null;\n};\n\nconst AbsoluteFillRefForwarding = (props, ref) => {\n    const { style, ...other } = props;\n    const actualStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            ...style,\n        };\n    }, [style]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: ref, style: actualStyle, ...other });\n};\n/**\n * @description An absolutely positioned <div> element with 100% width, height, and a column flex style\n * @see [Documentation](https://www.remotion.dev/docs/absolute-fill)\n */\nconst AbsoluteFill = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(AbsoluteFillRefForwarding);\n\nconst getAbsoluteSrc = (relativeSrc) => {\n    return new URL(relativeSrc, window.location.origin).href;\n};\n\nconst calculateLoopDuration = ({ endAt, mediaDuration, playbackRate, startFrom, }) => {\n    let duration = mediaDuration;\n    // Account for endAt\n    if (typeof endAt !== 'undefined') {\n        duration = endAt;\n    }\n    // Account for startFrom\n    if (typeof startFrom !== 'undefined') {\n        duration -= startFrom;\n    }\n    const actualDuration = duration / playbackRate;\n    return Math.floor(actualDuration);\n};\n\nconst isErrorLike = (err) => {\n    if (err === null) {\n        return false;\n    }\n    if (typeof err !== 'object') {\n        return false;\n    }\n    if (!('stack' in err)) {\n        return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error\n    // @ts-ignore we just asserted\n    if (typeof err.stack !== 'string') {\n        return false;\n    }\n    if (!('message' in err)) {\n        return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error\n    // @ts-ignore we just asserted\n    if (typeof err.message !== 'string') {\n        return false;\n    }\n    return true;\n};\n/**\n * @description When you invoke this function, Remotion will stop rendering all the frames without any retries\n * @see [Documentation](https://www.remotion.dev/docs/cancel-render)\n */\nfunction cancelRender(err) {\n    let error;\n    if (isErrorLike(err)) {\n        error = err;\n    }\n    else if (typeof err === 'string') {\n        error = Error(err);\n    }\n    else {\n        error = Error('Rendering was cancelled');\n    }\n    window.remotion_cancelledError = error.stack;\n    throw error;\n}\n\n/**\n * @description Provides information about the Remotion Environment\n * @see [Documentation](https://www.remotion.dev/docs/get-remotion-environment)\n */\nconst getRemotionEnvironment = () => {\n    if (false) {}\n    // The Vitest framework sets NODE_ENV as test.\n    // Right now we don't need to treat it in a special\n    // way which is good - defaulting to `rendering`.\n    if (false) {}\n    if (typeof window !== 'undefined' && window.remotion_isPlayer) {\n        return {\n            isStudio: false,\n            isRendering: false,\n            isPlayer: true,\n        };\n    }\n    return {\n        isStudio: true,\n        isRendering: false,\n        isPlayer: false,\n    };\n};\n\nconst HIDDEN_NAMES = ['__WEBPACK_DEFAULT_EXPORT__'];\nconst getTimelineClipName = (children) => {\n    var _a;\n    const tree = (_a = react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, (ch) => {\n        if (!(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(ch)) {\n            return null;\n        }\n        // Must be name, not ID\n        const name = typeof ch.type !== 'string' && ch.type.name;\n        if (name && !HIDDEN_NAMES.includes(name)) {\n            return name;\n        }\n        if (ch.props.children) {\n            const chName = getTimelineClipName(ch.props.children);\n            return chName;\n        }\n        return null;\n    })) === null || _a === void 0 ? void 0 : _a.filter(Boolean);\n    return (tree === null || tree === void 0 ? void 0 : tree.length) ? tree[0] : '';\n};\n\nconst NonceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    getNonce: () => 0,\n    fastRefreshes: 0,\n});\nconst useNonce = () => {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(NonceContext);\n    const [nonce, setNonce] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => context.getNonce());\n    const lastContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(context);\n    // Only if context changes, but not initially\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (lastContext.current === context) {\n            return;\n        }\n        lastContext.current = context;\n        setNonce(context.getNonce);\n    }, [context]);\n    return nonce;\n};\n\nconst SequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n\nconst SequenceManager = react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    registerSequence: () => {\n        throw new Error('SequenceManagerContext not initialized');\n    },\n    unregisterSequence: () => {\n        throw new Error('SequenceManagerContext not initialized');\n    },\n    sequences: [],\n});\nconst SequenceManagerProvider = ({ children }) => {\n    const [sequences, setSequences] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const registerSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((seq) => {\n        setSequences((seqs) => {\n            return [...seqs, seq];\n        });\n    }, []);\n    const unregisterSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((seq) => {\n        setSequences((seqs) => seqs.filter((s) => s.id !== seq));\n    }, []);\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            registerSequence,\n            sequences,\n            unregisterSequence,\n        };\n    }, [registerSequence, sequences, unregisterSequence]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceManager.Provider, { value: context, children: children }));\n};\n\nconst CompositionManager = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    compositions: [],\n    registerComposition: () => undefined,\n    unregisterComposition: () => undefined,\n    registerFolder: () => undefined,\n    unregisterFolder: () => undefined,\n    setCurrentCompositionMetadata: () => undefined,\n    folders: [],\n    currentCompositionMetadata: null,\n    canvasContent: null,\n    setCanvasContent: () => undefined,\n});\n\nconst problematicCharacters = {\n    '%3A': ':',\n    '%2F': '/',\n    '%3F': '?',\n    '%23': '#',\n    '%5B': '[',\n    '%5D': ']',\n    '%40': '@',\n    '%21': '!',\n    '%24': '$',\n    '%26': '&',\n    '%27': \"'\",\n    '%28': '(',\n    '%29': ')',\n    '%2A': '*',\n    '%2B': '+',\n    '%2C': ',',\n    '%3B': ';',\n};\nconst didWarn$1 = {};\nconst warnOnce$1 = (message) => {\n    if (didWarn$1[message]) {\n        return;\n    }\n    console.warn(message);\n    didWarn$1[message] = true;\n};\nconst includesHexOfUnsafeChar = (path) => {\n    for (const key of Object.keys(problematicCharacters)) {\n        if (path.includes(key)) {\n            return { containsHex: true, hexCode: key };\n        }\n    }\n    return { containsHex: false };\n};\nconst trimLeadingSlash = (path) => {\n    if (path.startsWith('/')) {\n        return trimLeadingSlash(path.substring(1));\n    }\n    return path;\n};\nconst inner = (path) => {\n    if (typeof window !== 'undefined' && window.remotion_staticBase) {\n        if (path.startsWith(window.remotion_staticBase)) {\n            throw new Error(`The value \"${path}\" is already prefixed with the static base ${window.remotion_staticBase}. You don't need to call staticFile() on it.`);\n        }\n        return `${window.remotion_staticBase}/${trimLeadingSlash(path)}`;\n    }\n    return `/${trimLeadingSlash(path)}`;\n};\nconst encodeBySplitting = (path) => {\n    const splitBySlash = path.split('/');\n    const encodedArray = splitBySlash.map((element) => {\n        return encodeURIComponent(element);\n    });\n    const merged = encodedArray.join('/');\n    return merged;\n};\n/**\n * @description Reference a file from the public/ folder. If the file does not appear in the autocomplete, type the path manually.\n * @see [Documentation](https://www.remotion.dev/docs/staticfile)\n */\nconst staticFile = (path) => {\n    if (path.startsWith('http://') || path.startsWith('https://')) {\n        throw new TypeError(`staticFile() does not support remote URLs - got \"${path}\". Instead, pass the URL without wrapping it in staticFile(). See: https://remotion.dev/docs/staticfile-remote-urls`);\n    }\n    if (path.startsWith('..') || path.startsWith('./')) {\n        throw new TypeError(`staticFile() does not support relative paths - got \"${path}\". Instead, pass the name of a file that is inside the public/ folder. See: https://remotion.dev/docs/staticfile-relative-paths`);\n    }\n    if (path.startsWith('/Users') ||\n        path.startsWith('/home') ||\n        path.startsWith('/tmp') ||\n        path.startsWith('/etc') ||\n        path.startsWith('/opt') ||\n        path.startsWith('/var') ||\n        path.startsWith('C:') ||\n        path.startsWith('D:') ||\n        path.startsWith('E:')) {\n        throw new TypeError(`staticFile() does not support absolute paths - got \"${path}\". Instead, pass the name of a file that is inside the public/ folder. See: https://remotion.dev/docs/staticfile-relative-paths`);\n    }\n    if (path.startsWith('public/')) {\n        throw new TypeError(`Do not include the public/ prefix when using staticFile() - got \"${path}\". See: https://remotion.dev/docs/staticfile-relative-paths`);\n    }\n    const includesHex = includesHexOfUnsafeChar(path);\n    if (includesHex.containsHex) {\n        warnOnce$1(`WARNING: You seem to pass an already encoded path (path contains ${includesHex.hexCode}). Since Remotion 4.0, the encoding is done by staticFile() itself. You may want to remove a encodeURIComponent() wrapping.`);\n    }\n    const preprocessed = encodeBySplitting(path);\n    const preparsed = inner(preprocessed);\n    if (!preparsed.startsWith('/')) {\n        return `/${preparsed}`;\n    }\n    return preparsed;\n};\n\n// Must keep this file in sync with the one in packages/lambda/src/shared/serialize-props.ts!\nconst DATE_TOKEN = 'remotion-date:';\nconst FILE_TOKEN = 'remotion-file:';\nconst serializeJSONWithDate = ({ data, indent, staticBase, }) => {\n    let customDateUsed = false;\n    let customFileUsed = false;\n    let mapUsed = false;\n    let setUsed = false;\n    const serializedString = JSON.stringify(data, function (key, value) {\n        const item = this[key];\n        if (item instanceof Date) {\n            customDateUsed = true;\n            return `${DATE_TOKEN}${item.toISOString()}`;\n        }\n        if (item instanceof Map) {\n            mapUsed = true;\n            return value;\n        }\n        if (item instanceof Set) {\n            setUsed = true;\n            return value;\n        }\n        if (typeof item === 'string' &&\n            staticBase !== null &&\n            item.startsWith(staticBase)) {\n            customFileUsed = true;\n            return `${FILE_TOKEN}${item.replace(staticBase + '/', '')}`;\n        }\n        return value;\n    }, indent);\n    return { serializedString, customDateUsed, customFileUsed, mapUsed, setUsed };\n};\nconst deserializeJSONWithCustomFields = (data) => {\n    return JSON.parse(data, (_, value) => {\n        if (typeof value === 'string' && value.startsWith(DATE_TOKEN)) {\n            return new Date(value.replace(DATE_TOKEN, ''));\n        }\n        if (typeof value === 'string' && value.startsWith(FILE_TOKEN)) {\n            return staticFile(value.replace(FILE_TOKEN, ''));\n        }\n        return value;\n    });\n};\n\nlet didWarnSSRImport = false;\nconst warnOnceSSRImport = () => {\n    if (didWarnSSRImport) {\n        return;\n    }\n    didWarnSSRImport = true;\n    console.warn('Called `getInputProps()` on the server. This function is not available server-side and has returned an empty object.');\n    console.warn(\"To hide this warning, don't call this function on the server:\");\n    console.warn(\"  typeof window === 'undefined' ? {} : getInputProps()\");\n};\nconst getInputProps = () => {\n    if (typeof window === 'undefined') {\n        warnOnceSSRImport();\n        return {};\n    }\n    if (getRemotionEnvironment().isPlayer) {\n        throw new Error('You cannot call `getInputProps()` from a <Player>. Instead, the props are available as React props from component that you passed as `component` prop.');\n    }\n    const param = window.remotion_inputProps;\n    if (!param) {\n        return {};\n    }\n    const parsed = deserializeJSONWithCustomFields(param);\n    return parsed;\n};\n\nconst EditorPropsContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    props: {},\n    updateProps: () => {\n        throw new Error('Not implemented');\n    },\n});\nconst EditorPropsProvider = ({ children }) => {\n    const [props, setProps] = react__WEBPACK_IMPORTED_MODULE_0__.useState({});\n    const updateProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ defaultProps, id, newProps, }) => {\n        setProps((prev) => {\n            var _a;\n            return {\n                ...prev,\n                [id]: typeof newProps === 'function'\n                    ? newProps((_a = prev[id]) !== null && _a !== void 0 ? _a : defaultProps)\n                    : newProps,\n            };\n        });\n    }, []);\n    const ctx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return { props, updateProps };\n    }, [props, updateProps]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EditorPropsContext.Provider, { value: ctx, children: children }));\n};\n\nfunction validateDimension(amount, nameOfProp, location) {\n    if (typeof amount !== 'number') {\n        throw new Error(`The \"${nameOfProp}\" prop ${location} must be a number, but you passed a value of type ${typeof amount}`);\n    }\n    if (isNaN(amount)) {\n        throw new TypeError(`The \"${nameOfProp}\" prop ${location} must not be NaN, but is NaN.`);\n    }\n    if (!Number.isFinite(amount)) {\n        throw new TypeError(`The \"${nameOfProp}\" prop ${location} must be finite, but is ${amount}.`);\n    }\n    if (amount % 1 !== 0) {\n        throw new TypeError(`The \"${nameOfProp}\" prop ${location} must be an integer, but is ${amount}.`);\n    }\n    if (amount <= 0) {\n        throw new TypeError(`The \"${nameOfProp}\" prop ${location} must be positive, but got ${amount}.`);\n    }\n}\n\nfunction validateDurationInFrames(durationInFrames, options) {\n    const { allowFloats, component } = options;\n    if (typeof durationInFrames === 'undefined') {\n        throw new Error(`The \"durationInFrames\" prop ${component} is missing.`);\n    }\n    if (typeof durationInFrames !== 'number') {\n        throw new Error(`The \"durationInFrames\" prop ${component} must be a number, but you passed a value of type ${typeof durationInFrames}`);\n    }\n    if (durationInFrames <= 0) {\n        throw new TypeError(`The \"durationInFrames\" prop ${component} must be positive, but got ${durationInFrames}.`);\n    }\n    if (!allowFloats && durationInFrames % 1 !== 0) {\n        throw new TypeError(`The \"durationInFrames\" prop ${component} must be an integer, but got ${durationInFrames}.`);\n    }\n    if (!Number.isFinite(durationInFrames)) {\n        throw new TypeError(`The \"durationInFrames\" prop ${component} must be finite, but got ${durationInFrames}.`);\n    }\n}\n\nfunction validateFps(fps, location, isGif) {\n    if (typeof fps !== 'number') {\n        throw new Error(`\"fps\" must be a number, but you passed a value of type ${typeof fps} ${location}`);\n    }\n    if (!Number.isFinite(fps)) {\n        throw new Error(`\"fps\" must be a finite, but you passed ${fps} ${location}`);\n    }\n    if (isNaN(fps)) {\n        throw new Error(`\"fps\" must not be NaN, but got ${fps} ${location}`);\n    }\n    if (fps <= 0) {\n        throw new TypeError(`\"fps\" must be positive, but got ${fps} ${location}`);\n    }\n    if (isGif && fps > 50) {\n        throw new TypeError(`The FPS for a GIF cannot be higher than 50. Use the --every-nth-frame option to lower the FPS: https://remotion.dev/docs/render-as-gif`);\n    }\n}\n\nconst validateCalculated = ({ composition, calculated, }) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const calculateMetadataErrorLocation = `calculated by calculateMetadata() for the composition \"${composition.id}\"`;\n    const defaultErrorLocation = `of the \"<Composition />\" component with the id \"${composition.id}\"`;\n    const width = (_b = (_a = calculated === null || calculated === void 0 ? void 0 : calculated.width) !== null && _a !== void 0 ? _a : composition.width) !== null && _b !== void 0 ? _b : undefined;\n    validateDimension(width, 'width', (calculated === null || calculated === void 0 ? void 0 : calculated.width) ? calculateMetadataErrorLocation : defaultErrorLocation);\n    const height = (_d = (_c = calculated === null || calculated === void 0 ? void 0 : calculated.height) !== null && _c !== void 0 ? _c : composition.height) !== null && _d !== void 0 ? _d : undefined;\n    validateDimension(height, 'height', (calculated === null || calculated === void 0 ? void 0 : calculated.height) ? calculateMetadataErrorLocation : defaultErrorLocation);\n    const fps = (_f = (_e = calculated === null || calculated === void 0 ? void 0 : calculated.fps) !== null && _e !== void 0 ? _e : composition.fps) !== null && _f !== void 0 ? _f : null;\n    validateFps(fps, (calculated === null || calculated === void 0 ? void 0 : calculated.fps) ? calculateMetadataErrorLocation : defaultErrorLocation, false);\n    const durationInFrames = (_h = (_g = calculated === null || calculated === void 0 ? void 0 : calculated.durationInFrames) !== null && _g !== void 0 ? _g : composition.durationInFrames) !== null && _h !== void 0 ? _h : null;\n    validateDurationInFrames(durationInFrames, {\n        allowFloats: false,\n        component: `of the \"<Composition />\" component with the id \"${composition.id}\"`,\n    });\n    return { width, height, fps, durationInFrames };\n};\nconst resolveVideoConfig = ({ composition, editorProps: editorPropsOrUndefined, signal, inputProps, }) => {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const calculatedProm = composition.calculateMetadata\n        ? composition.calculateMetadata({\n            defaultProps: (_a = composition.defaultProps) !== null && _a !== void 0 ? _a : {},\n            props: {\n                ...((_b = composition.defaultProps) !== null && _b !== void 0 ? _b : {}),\n                ...(editorPropsOrUndefined !== null && editorPropsOrUndefined !== void 0 ? editorPropsOrUndefined : {}),\n                ...inputProps,\n            },\n            abortSignal: signal,\n        })\n        : null;\n    const fallbackProps = {\n        ...((_c = composition.defaultProps) !== null && _c !== void 0 ? _c : {}),\n        ...(inputProps !== null && inputProps !== void 0 ? inputProps : {}),\n    };\n    if (calculatedProm !== null &&\n        typeof calculatedProm === 'object' &&\n        'then' in calculatedProm) {\n        return calculatedProm.then((c) => {\n            var _a, _b;\n            const { height, width, durationInFrames, fps } = validateCalculated({\n                calculated: c,\n                composition,\n            });\n            return {\n                width,\n                height,\n                fps,\n                durationInFrames,\n                id: composition.id,\n                defaultProps: (_a = composition.defaultProps) !== null && _a !== void 0 ? _a : {},\n                props: (_b = c.props) !== null && _b !== void 0 ? _b : fallbackProps,\n            };\n        });\n    }\n    const data = validateCalculated({\n        calculated: calculatedProm,\n        composition,\n    });\n    if (calculatedProm === null) {\n        return {\n            ...data,\n            id: composition.id,\n            defaultProps: (_d = composition.defaultProps) !== null && _d !== void 0 ? _d : {},\n            props: fallbackProps,\n        };\n    }\n    return {\n        ...data,\n        id: composition.id,\n        defaultProps: (_e = composition.defaultProps) !== null && _e !== void 0 ? _e : {},\n        props: (_g = (_f = calculatedProm.props) !== null && _f !== void 0 ? _f : composition.defaultProps) !== null && _g !== void 0 ? _g : {},\n    };\n};\n\nconst ResolveCompositionContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst resolveCompositionsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\nconst needsResolution = (composition) => {\n    return Boolean(composition.calculateMetadata);\n};\nconst ResolveCompositionConfig = ({ children }) => {\n    const [currentRenderModalComposition, setCurrentRenderModalComposition] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const { compositions, canvasContent, currentCompositionMetadata } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionManager);\n    const selectedComposition = compositions.find((c) => canvasContent &&\n        canvasContent.type === 'composition' &&\n        canvasContent.compositionId === c.id);\n    const renderModalComposition = compositions.find((c) => c.id === currentRenderModalComposition);\n    const { props: allEditorProps } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EditorPropsContext);\n    const [resolvedConfigs, setResolvedConfigs] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const selectedEditorProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        var _a;\n        return selectedComposition\n            ? (_a = allEditorProps[selectedComposition.id]) !== null && _a !== void 0 ? _a : {}\n            : {};\n    }, [allEditorProps, selectedComposition]);\n    const renderModalProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        var _a;\n        return renderModalComposition\n            ? (_a = allEditorProps[renderModalComposition.id]) !== null && _a !== void 0 ? _a : {}\n            : {};\n    }, [allEditorProps, renderModalComposition]);\n    const doResolution = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((composition, editorProps) => {\n        var _a;\n        const controller = new AbortController();\n        if (currentCompositionMetadata) {\n            return controller;\n        }\n        const inputProps = typeof window === 'undefined' || getRemotionEnvironment().isPlayer\n            ? {}\n            : (_a = getInputProps()) !== null && _a !== void 0 ? _a : {};\n        const { signal } = controller;\n        const promOrNot = resolveVideoConfig({\n            composition,\n            editorProps,\n            inputProps,\n            signal,\n        });\n        if (typeof promOrNot === 'object' && 'then' in promOrNot) {\n            setResolvedConfigs((r) => ({\n                ...r,\n                [composition.id]: {\n                    type: 'loading',\n                },\n            }));\n            promOrNot\n                .then((c) => {\n                if (controller.signal.aborted) {\n                    return;\n                }\n                setResolvedConfigs((r) => ({\n                    ...r,\n                    [composition.id]: {\n                        type: 'success',\n                        result: c,\n                    },\n                }));\n            })\n                .catch((err) => {\n                if (controller.signal.aborted) {\n                    return;\n                }\n                setResolvedConfigs((r) => ({\n                    ...r,\n                    [composition.id]: {\n                        type: 'error',\n                        error: err,\n                    },\n                }));\n            });\n        }\n        else {\n            setResolvedConfigs((r) => ({\n                ...r,\n                [composition.id]: {\n                    type: 'success',\n                    result: promOrNot,\n                },\n            }));\n        }\n        return controller;\n    }, [currentCompositionMetadata]);\n    const currentComposition = (canvasContent === null || canvasContent === void 0 ? void 0 : canvasContent.type) === 'composition' ? canvasContent.compositionId : null;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(resolveCompositionsRef, () => {\n        return {\n            setCurrentRenderModalComposition: (id) => {\n                setCurrentRenderModalComposition(id);\n            },\n            reloadCurrentlySelectedComposition: () => {\n                var _a;\n                if (!currentComposition) {\n                    return;\n                }\n                const composition = compositions.find((c) => c.id === currentComposition);\n                if (!composition) {\n                    throw new Error(`Could not find composition with id ${currentComposition}`);\n                }\n                const editorProps = (_a = allEditorProps[currentComposition]) !== null && _a !== void 0 ? _a : {};\n                doResolution(composition, editorProps);\n            },\n        };\n    }, [allEditorProps, compositions, currentComposition, doResolution]);\n    const isTheSame = (selectedComposition === null || selectedComposition === void 0 ? void 0 : selectedComposition.id) === (renderModalComposition === null || renderModalComposition === void 0 ? void 0 : renderModalComposition.id);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (selectedComposition && needsResolution(selectedComposition)) {\n            const controller = doResolution(selectedComposition, selectedEditorProps);\n            return () => {\n                controller.abort();\n            };\n        }\n    }, [doResolution, selectedComposition, selectedEditorProps]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (renderModalComposition && !isTheSame) {\n            const controller = doResolution(renderModalComposition, renderModalProps);\n            return () => {\n                controller.abort();\n            };\n        }\n    }, [doResolution, isTheSame, renderModalComposition, renderModalProps]);\n    const resolvedConfigsIncludingStaticOnes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        const staticComps = compositions.filter((c) => {\n            return c.calculateMetadata === null;\n        });\n        return {\n            ...resolvedConfigs,\n            ...staticComps.reduce((acc, curr) => {\n                var _a;\n                return {\n                    ...acc,\n                    [curr.id]: {\n                        type: 'success',\n                        result: { ...curr, defaultProps: (_a = curr.defaultProps) !== null && _a !== void 0 ? _a : {} },\n                    },\n                };\n            }, {}),\n        };\n    }, [compositions, resolvedConfigs]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ResolveCompositionContext.Provider, { value: resolvedConfigsIncludingStaticOnes, children: children }));\n};\nconst useResolvedVideoConfig = (preferredCompositionId) => {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ResolveCompositionContext);\n    const { props: allEditorProps } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EditorPropsContext);\n    const { compositions, canvasContent, currentCompositionMetadata } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionManager);\n    const currentComposition = (canvasContent === null || canvasContent === void 0 ? void 0 : canvasContent.type) === 'composition' ? canvasContent.compositionId : null;\n    const compositionId = preferredCompositionId !== null && preferredCompositionId !== void 0 ? preferredCompositionId : currentComposition;\n    const composition = compositions.find((c) => c.id === compositionId);\n    const selectedEditorProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        var _a;\n        return composition ? (_a = allEditorProps[composition.id]) !== null && _a !== void 0 ? _a : {} : {};\n    }, [allEditorProps, composition]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        var _a, _b, _c, _d;\n        if (!composition) {\n            return null;\n        }\n        if (currentCompositionMetadata) {\n            return {\n                type: 'success',\n                result: {\n                    ...currentCompositionMetadata,\n                    id: composition.id,\n                    props: currentCompositionMetadata.props,\n                    defaultProps: (_a = composition.defaultProps) !== null && _a !== void 0 ? _a : {},\n                },\n            };\n        }\n        if (!needsResolution(composition)) {\n            return {\n                type: 'success',\n                result: {\n                    width: composition.width,\n                    height: composition.height,\n                    fps: composition.fps,\n                    id: composition.id,\n                    durationInFrames: composition.durationInFrames,\n                    defaultProps: (_b = composition.defaultProps) !== null && _b !== void 0 ? _b : {},\n                    props: {\n                        ...((_c = composition.defaultProps) !== null && _c !== void 0 ? _c : {}),\n                        ...(selectedEditorProps !== null && selectedEditorProps !== void 0 ? selectedEditorProps : {}),\n                        ...(typeof window === 'undefined' ||\n                            getRemotionEnvironment().isPlayer\n                            ? {}\n                            : (_d = getInputProps()) !== null && _d !== void 0 ? _d : {}),\n                    },\n                },\n            };\n        }\n        if (!context[composition.id]) {\n            return null;\n        }\n        return context[composition.id];\n    }, [composition, context, currentCompositionMetadata, selectedEditorProps]);\n};\n\nconst useVideo = () => {\n    var _a;\n    const { canvasContent, compositions, currentCompositionMetadata } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionManager);\n    const selected = compositions.find((c) => {\n        return ((canvasContent === null || canvasContent === void 0 ? void 0 : canvasContent.type) === 'composition' &&\n            c.id === canvasContent.compositionId);\n    });\n    const resolved = useResolvedVideoConfig((_a = selected === null || selected === void 0 ? void 0 : selected.id) !== null && _a !== void 0 ? _a : null);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        var _a;\n        if (!resolved) {\n            return null;\n        }\n        if (resolved.type === 'error') {\n            return null;\n        }\n        if (resolved.type === 'loading') {\n            return null;\n        }\n        if (!selected) {\n            return null;\n        }\n        return {\n            ...resolved.result,\n            defaultProps: (_a = selected.defaultProps) !== null && _a !== void 0 ? _a : {},\n            id: selected.id,\n            // We override the selected metadata with the metadata that was passed to renderMedia(),\n            // and don't allow it to be changed during render anymore\n            ...(currentCompositionMetadata !== null && currentCompositionMetadata !== void 0 ? currentCompositionMetadata : {}),\n            component: selected.component,\n        };\n    }, [currentCompositionMetadata, resolved, selected]);\n};\n\nconst TimelineContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    frame: {},\n    playing: false,\n    playbackRate: 1,\n    rootId: '',\n    imperativePlaying: {\n        current: false,\n    },\n    setPlaybackRate: () => {\n        throw new Error('default');\n    },\n    audioAndVideoTags: { current: [] },\n});\nconst SetTimelineContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    setFrame: () => {\n        throw new Error('default');\n    },\n    setPlaying: () => {\n        throw new Error('default');\n    },\n});\nconst makeKey = (composition) => {\n    return `remotion.time.${composition}`;\n};\nconst persistCurrentFrame = (frame, composition) => {\n    localStorage.setItem(makeKey(composition), String(frame));\n};\nconst getFrameForComposition = (composition) => {\n    var _a, _b;\n    const frame = localStorage.getItem(makeKey(composition));\n    return frame\n        ? Number(frame)\n        : (_b = (typeof window === 'undefined' ? 0 : (_a = window.remotion_initialFrame) !== null && _a !== void 0 ? _a : 0)) !== null && _b !== void 0 ? _b : 0;\n};\nconst useTimelinePosition = () => {\n    var _a, _b;\n    const videoConfig = useVideo();\n    const state = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);\n    if (!videoConfig) {\n        return typeof window === 'undefined'\n            ? 0\n            : (_a = window.remotion_initialFrame) !== null && _a !== void 0 ? _a : 0;\n    }\n    const unclamped = (_b = state.frame[videoConfig.id]) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && window.remotion_isPlayer\n        ? 0\n        : getFrameForComposition(videoConfig.id));\n    return Math.min(videoConfig.durationInFrames - 1, unclamped);\n};\nconst useTimelineSetFrame = () => {\n    const { setFrame } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SetTimelineContext);\n    return setFrame;\n};\nconst usePlayingState = () => {\n    const { playing, imperativePlaying } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);\n    const { setPlaying } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SetTimelineContext);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => [playing, setPlaying, imperativePlaying], [imperativePlaying, playing, setPlaying]);\n};\n\nvar TimelinePosition = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    TimelineContext: TimelineContext,\n    SetTimelineContext: SetTimelineContext,\n    persistCurrentFrame: persistCurrentFrame,\n    getFrameForComposition: getFrameForComposition,\n    useTimelinePosition: useTimelinePosition,\n    useTimelineSetFrame: useTimelineSetFrame,\n    usePlayingState: usePlayingState\n});\n\nconst CanUseRemotionHooks = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(false);\nconst CanUseRemotionHooksProvider = ({ children }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CanUseRemotionHooks.Provider, { value: true, children: children }));\n};\n\nconst useUnsafeVideoConfig = () => {\n    var _a;\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const ctxDuration = (_a = context === null || context === void 0 ? void 0 : context.durationInFrames) !== null && _a !== void 0 ? _a : null;\n    const video = useVideo();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        if (!video) {\n            return null;\n        }\n        const { id, durationInFrames, fps, height, width, defaultProps, props } = video;\n        return {\n            id,\n            width,\n            height,\n            fps,\n            durationInFrames: ctxDuration !== null && ctxDuration !== void 0 ? ctxDuration : durationInFrames,\n            defaultProps,\n            props,\n        };\n    }, [ctxDuration, video]);\n};\n\n/**\n * /**\n * @description Get some info about the context of the video that you are making.\n * @see [Documentation](https://www.remotion.dev/docs/use-video-config)\n * @returns Returns an object containing `fps`, `width`, `height` and `durationInFrames`, all of type `number`.\n */\nconst useVideoConfig = () => {\n    const videoConfig = useUnsafeVideoConfig();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CanUseRemotionHooks);\n    const isPlayer = useIsPlayer();\n    if (!videoConfig) {\n        if ((typeof window !== 'undefined' && window.remotion_isPlayer) ||\n            isPlayer) {\n            throw new Error([\n                'No video config found. Likely reasons:',\n                '- You are probably calling useVideoConfig() from outside the component passed to <Player />. See https://www.remotion.dev/docs/player/examples for how to set up the Player correctly.',\n                '- You have multiple versions of Remotion installed which causes the React context to get lost.',\n            ].join('-'));\n        }\n        throw new Error('No video config found. You are probably calling useVideoConfig() from a component which has not been registered as a <Composition />. See https://www.remotion.dev/docs/the-fundamentals#defining-compositions for more information.');\n    }\n    if (!context) {\n        throw new Error('Called useVideoConfig() outside a Remotion composition.');\n    }\n    return videoConfig;\n};\n\nconst SequenceRefForwardingFunction = ({ from = 0, durationInFrames = Infinity, children, name, showInTimeline = true, loopDisplay, ...other }, ref) => {\n    const { layout = 'absolute-fill' } = other;\n    const [id] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => String(Math.random()));\n    const parentSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const { rootId } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);\n    const cumulatedFrom = parentSequence\n        ? parentSequence.cumulatedFrom + parentSequence.relativeFrom\n        : 0;\n    const nonce = useNonce();\n    if (layout !== 'absolute-fill' && layout !== 'none') {\n        throw new TypeError(`The layout prop of <Sequence /> expects either \"absolute-fill\" or \"none\", but you passed: ${layout}`);\n    }\n    // @ts-expect-error\n    if (layout === 'none' && typeof other.style !== 'undefined') {\n        throw new TypeError('If layout=\"none\", you may not pass a style.');\n    }\n    if (typeof durationInFrames !== 'number') {\n        throw new TypeError(`You passed to durationInFrames an argument of type ${typeof durationInFrames}, but it must be a number.`);\n    }\n    if (durationInFrames <= 0) {\n        throw new TypeError(`durationInFrames must be positive, but got ${durationInFrames}`);\n    }\n    if (typeof from !== 'number') {\n        throw new TypeError(`You passed to the \"from\" props of your <Sequence> an argument of type ${typeof from}, but it must be a number.`);\n    }\n    if (!Number.isFinite(from)) {\n        throw new TypeError(`The \"from\" prop of a sequence must be finite, but got ${from}.`);\n    }\n    const absoluteFrame = useTimelinePosition();\n    const videoConfig = useVideoConfig();\n    const parentSequenceDuration = parentSequence\n        ? Math.min(parentSequence.durationInFrames - from, durationInFrames)\n        : durationInFrames;\n    const actualDurationInFrames = Math.max(0, Math.min(videoConfig.durationInFrames - from, parentSequenceDuration));\n    const { registerSequence, unregisterSequence } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceManager);\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        var _a;\n        return {\n            cumulatedFrom,\n            relativeFrom: from,\n            durationInFrames: actualDurationInFrames,\n            parentFrom: (_a = parentSequence === null || parentSequence === void 0 ? void 0 : parentSequence.relativeFrom) !== null && _a !== void 0 ? _a : 0,\n            id,\n        };\n    }, [\n        cumulatedFrom,\n        from,\n        actualDurationInFrames,\n        parentSequence === null || parentSequence === void 0 ? void 0 : parentSequence.relativeFrom,\n        id,\n    ]);\n    const timelineClipName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return name !== null && name !== void 0 ? name : getTimelineClipName(children);\n    }, [children, name]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        var _a;\n        if (!getRemotionEnvironment().isStudio) {\n            return;\n        }\n        registerSequence({\n            from,\n            duration: actualDurationInFrames,\n            id,\n            displayName: timelineClipName,\n            parent: (_a = parentSequence === null || parentSequence === void 0 ? void 0 : parentSequence.id) !== null && _a !== void 0 ? _a : null,\n            type: 'sequence',\n            rootId,\n            showInTimeline,\n            nonce,\n            loopDisplay,\n        });\n        return () => {\n            unregisterSequence(id);\n        };\n    }, [\n        durationInFrames,\n        id,\n        name,\n        registerSequence,\n        timelineClipName,\n        unregisterSequence,\n        parentSequence === null || parentSequence === void 0 ? void 0 : parentSequence.id,\n        actualDurationInFrames,\n        rootId,\n        from,\n        showInTimeline,\n        nonce,\n        loopDisplay,\n    ]);\n    // Ceil to support floats\n    // https://github.com/remotion-dev/remotion/issues/2958\n    const endThreshold = Math.ceil(cumulatedFrom + from + durationInFrames - 1);\n    const content = absoluteFrame < cumulatedFrom + from\n        ? null\n        : absoluteFrame > endThreshold\n            ? null\n            : children;\n    const styleIfThere = other.layout === 'none' ? undefined : other.style;\n    const defaultStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            flexDirection: undefined,\n            ...(styleIfThere !== null && styleIfThere !== void 0 ? styleIfThere : {}),\n        };\n    }, [styleIfThere]);\n    if (ref !== null && layout === 'none') {\n        throw new TypeError('It is not supported to pass both a `ref` and `layout=\"none\"` to <Sequence />.');\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceContext.Provider, { value: contextValue, children: content === null ? null : other.layout === 'none' ? (content) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(AbsoluteFill, { ref: ref, style: defaultStyle, className: other.className, children: content })) }));\n};\n/**\n * @description A component that time-shifts its children and wraps them in an absolutely positioned <div>.\n * @see [Documentation](https://www.remotion.dev/docs/sequence)\n */\nconst Sequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(SequenceRefForwardingFunction);\n\n/**\n * @description Get the current frame of the video. Frames are 0-indexed, meaning the first frame is 0, the last frame is the duration of the composition in frames minus one.\n * @see [Documentation](https://remotion.dev/docs/use-current-frame)\n */\nconst useCurrentFrame = () => {\n    const canUseRemotionHooks = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CanUseRemotionHooks);\n    if (!canUseRemotionHooks) {\n        if (typeof window !== 'undefined' && window.remotion_isPlayer) {\n            throw new Error(`useCurrentFrame can only be called inside a component that was passed to <Player>. See: https://www.remotion.dev/docs/player/examples`);\n        }\n        throw new Error(`useCurrentFrame() can only be called inside a component that was registered as a composition. See https://www.remotion.dev/docs/the-fundamentals#defining-compositions`);\n    }\n    const frame = useTimelinePosition();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const contextOffset = context\n        ? context.cumulatedFrom + context.relativeFrom\n        : 0;\n    return frame - contextOffset;\n};\n\n/**\n * @description This component allows you to quickly lay out an animation so it repeats itself.\n * @see [Documentation](https://www.remotion.dev/docs/loop)\n */\nconst Loop = ({ durationInFrames, times = Infinity, children, name, ...props }) => {\n    const currentFrame = useCurrentFrame();\n    const { durationInFrames: compDuration } = useVideoConfig();\n    validateDurationInFrames(durationInFrames, {\n        component: 'of the <Loop /> component',\n        allowFloats: true,\n    });\n    if (typeof times !== 'number') {\n        throw new TypeError(`You passed to \"times\" an argument of type ${typeof times}, but it must be a number.`);\n    }\n    if (times !== Infinity && times % 1 !== 0) {\n        throw new TypeError(`The \"times\" prop of a loop must be an integer, but got ${times}.`);\n    }\n    if (times < 0) {\n        throw new TypeError(`The \"times\" prop of a loop must be at least 0, but got ${times}`);\n    }\n    const maxTimes = Math.ceil(compDuration / durationInFrames);\n    const actualTimes = Math.min(maxTimes, times);\n    const style = props.layout === 'none' ? undefined : props.style;\n    const maxFrame = durationInFrames * (actualTimes - 1);\n    const start = Math.floor(currentFrame / durationInFrames) * durationInFrames;\n    const from = Math.min(start, maxFrame);\n    const loopDisplay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            numberOfTimes: actualTimes,\n            startOffset: -from,\n            durationInFrames,\n        };\n    }, [actualTimes, durationInFrames, from]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, { durationInFrames: durationInFrames, from: from, name: name, loopDisplay: loopDisplay, layout: props.layout, style: style, children: children }));\n};\n\nconst validateMediaProps = (props, component) => {\n    if (typeof props.volume !== 'number' &&\n        typeof props.volume !== 'function' &&\n        typeof props.volume !== 'undefined') {\n        throw new TypeError(`You have passed a volume of type ${typeof props.volume} to your <${component} /> component. Volume must be a number or a function with the signature '(frame: number) => number' undefined.`);\n    }\n    if (typeof props.volume === 'number' && props.volume < 0) {\n        throw new TypeError(`You have passed a volume below 0 to your <${component} /> component. Volume must be between 0 and 1`);\n    }\n    if (typeof props.playbackRate !== 'number' &&\n        typeof props.playbackRate !== 'undefined') {\n        throw new TypeError(`You have passed a playbackRate of type ${typeof props.playbackRate} to your <${component} /> component. Playback rate must a real number or undefined.`);\n    }\n    if (typeof props.playbackRate === 'number' &&\n        (isNaN(props.playbackRate) ||\n            !Number.isFinite(props.playbackRate) ||\n            props.playbackRate <= 0)) {\n        throw new TypeError(`You have passed a playbackRate of ${props.playbackRate} to your <${component} /> component. Playback rate must be a real number above 0.`);\n    }\n};\n\nconst validateStartFromProps = (startFrom, endAt) => {\n    if (typeof startFrom !== 'undefined') {\n        if (typeof startFrom !== 'number') {\n            throw new TypeError(`type of startFrom prop must be a number, instead got type ${typeof startFrom}.`);\n        }\n        if (isNaN(startFrom) || startFrom === Infinity) {\n            throw new TypeError('startFrom prop can not be NaN or Infinity.');\n        }\n        if (startFrom < 0) {\n            throw new TypeError(`startFrom must be greater than equal to 0 instead got ${startFrom}.`);\n        }\n    }\n    if (typeof endAt !== 'undefined') {\n        if (typeof endAt !== 'number') {\n            throw new TypeError(`type of endAt prop must be a number, instead got type ${typeof endAt}.`);\n        }\n        if (isNaN(endAt)) {\n            throw new TypeError('endAt prop can not be NaN.');\n        }\n        if (endAt <= 0) {\n            throw new TypeError(`endAt must be a positive number, instead got ${endAt}.`);\n        }\n    }\n    if (endAt < startFrom) {\n        throw new TypeError('endAt prop must be greater than startFrom prop.');\n    }\n};\n\nconst durationReducer = (state, action) => {\n    switch (action.type) {\n        case 'got-duration':\n            return {\n                ...state,\n                [getAbsoluteSrc(action.src)]: action.durationInSeconds,\n            };\n        default:\n            return state;\n    }\n};\nconst DurationsContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    durations: {},\n    setDurations: () => {\n        throw new Error('context missing');\n    },\n});\nconst DurationsContextProvider = ({ children }) => {\n    const [durations, setDurations] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(durationReducer, {});\n    const value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            durations,\n            setDurations,\n        };\n    }, [durations]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DurationsContext.Provider, { value: value, children: children }));\n};\n\nconst PreloadContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nlet preloads = {};\nlet updaters = [];\nconst setPreloads = (updater) => {\n    preloads = updater(preloads);\n    updaters.forEach((u) => u());\n};\nconst PrefetchProvider = ({ children }) => {\n    const [_preloads, _setPreloads] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => preloads);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const updaterFunction = () => {\n            _setPreloads(preloads);\n        };\n        updaters.push(updaterFunction);\n        return () => {\n            updaters = updaters.filter((u) => u !== updaterFunction);\n        };\n    }, []);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PreloadContext.Provider, { value: _preloads, children: children }));\n};\n\nconst usePreload = (src) => {\n    var _a;\n    const preloads = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PreloadContext);\n    return (_a = preloads[src]) !== null && _a !== void 0 ? _a : src;\n};\nconst blobToBase64 = function (blob) {\n    const reader = new FileReader();\n    return new Promise((resolve, reject) => {\n        reader.onload = function () {\n            const dataUrl = reader.result;\n            resolve(dataUrl);\n        };\n        reader.onerror = (err) => {\n            return reject(err);\n        };\n        reader.readAsDataURL(blob);\n    });\n};\n/**\n * @description When you call the preFetch() function, an asset will be fetched and kept in memory so it is ready when you want to play it in a <Player>.\n * @see [Documentation](https://www.remotion.dev/docs/prefetch)\n */\nconst prefetch = (src, options) => {\n    var _a;\n    const method = (_a = options === null || options === void 0 ? void 0 : options.method) !== null && _a !== void 0 ? _a : 'blob-url';\n    if (getRemotionEnvironment().isRendering) {\n        return {\n            free: () => undefined,\n            waitUntilDone: () => Promise.resolve(src),\n        };\n    }\n    let canceled = false;\n    let objectUrl = null;\n    let resolve = () => undefined;\n    let reject = () => undefined;\n    const waitUntilDone = new Promise((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n    const controller = new AbortController();\n    let canBeAborted = true;\n    fetch(src, {\n        signal: controller.signal,\n    })\n        .then((res) => {\n        canBeAborted = false;\n        if (canceled) {\n            return null;\n        }\n        if (!res.ok) {\n            throw new Error(`HTTP error, status = ${res.status}`);\n        }\n        return res.blob();\n    })\n        .then((buf) => {\n        if (!buf) {\n            return;\n        }\n        if (!buf.type.startsWith('video/') &&\n            !buf.type.startsWith('audio/') &&\n            !(options === null || options === void 0 ? void 0 : options.contentType)) {\n            console.warn(`Called prefetch() on ${src} which returned a \"Content-Type\" of ${buf.type}. Prefetched content should have a proper content type (video/... or audio/...) or a contentType passed the options of prefetch(). Otherwise, prefetching will not work properly in all browsers.`);\n        }\n        const actualBlob = (options === null || options === void 0 ? void 0 : options.contentType)\n            ? new Blob([buf], { type: options.contentType })\n            : buf;\n        if (method === 'base64') {\n            return blobToBase64(actualBlob);\n        }\n        return URL.createObjectURL(actualBlob);\n    })\n        .then((url) => {\n        if (canceled) {\n            return;\n        }\n        objectUrl = url;\n        setPreloads((p) => ({\n            ...p,\n            [src]: objectUrl,\n        }));\n        resolve(objectUrl);\n    })\n        .catch((err) => {\n        reject(err);\n    });\n    return {\n        free: () => {\n            if (objectUrl) {\n                if (method === 'blob-url') {\n                    URL.revokeObjectURL(objectUrl);\n                }\n                setPreloads((p) => {\n                    const copy = { ...p };\n                    delete copy[src];\n                    return copy;\n                });\n            }\n            else {\n                canceled = true;\n                if (canBeAborted) {\n                    try {\n                        controller.abort();\n                    }\n                    catch (e) { }\n                }\n            }\n        },\n        waitUntilDone: () => {\n            return waitUntilDone;\n        },\n    };\n};\n\n/* eslint-disable no-bitwise */\nfunction mulberry32(a) {\n    let t = a + 0x6d2b79f5;\n    t = Math.imul(t ^ (t >>> 15), t | 1);\n    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\n    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n}\nfunction hashCode(str) {\n    let i = 0;\n    let chr = 0;\n    let hash = 0;\n    for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n}\n/**\n * @description A deterministic pseudo-random number generator. Pass in the same seed and get the same pseudorandom number.\n * @see [Documentation](https://remotion.dev/docs/random)\n */\nconst random = (seed, dummy) => {\n    if (dummy !== undefined) {\n        throw new TypeError('random() takes only one argument');\n    }\n    if (seed === null) {\n        return Math.random();\n    }\n    if (typeof seed === 'string') {\n        return mulberry32(hashCode(seed));\n    }\n    if (typeof seed === 'number') {\n        return mulberry32(seed * 10000000000);\n    }\n    throw new Error('random() argument must be a number or a string');\n};\n\nconst useMediaStartsAt = () => {\n    var _a;\n    const parentSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const startsAt = Math.min(0, (_a = parentSequence === null || parentSequence === void 0 ? void 0 : parentSequence.relativeFrom) !== null && _a !== void 0 ? _a : 0);\n    return startsAt;\n};\n/**\n * When passing a function as the prop for `volume`,\n * we calculate the way more intuitive value for currentFrame\n */\nconst useFrameForVolumeProp = () => {\n    const frame = useCurrentFrame();\n    const startsAt = useMediaStartsAt();\n    return frame + startsAt;\n};\n\nconst getAssetDisplayName = (filename) => {\n    if (/data:|blob:/.test(filename.substring(0, 5))) {\n        return 'Data URL';\n    }\n    const splitted = filename\n        .split('/')\n        .map((s) => s.split('\\\\'))\n        .flat(1);\n    return splitted[splitted.length - 1];\n};\n\nconst playAndHandleNotAllowedError = (mediaRef, mediaType) => {\n    const { current } = mediaRef;\n    if (!current) {\n        return;\n    }\n    const prom = current.play();\n    if (prom.catch) {\n        prom.catch((err) => {\n            if (!current) {\n                return;\n            }\n            // Pause was called after play in Chrome\n            if (err.message.includes('request was interrupted by a call to pause')) {\n                return;\n            }\n            // Pause was called after play in Safari\n            if (err.message.includes('The operation was aborted.')) {\n                return;\n            }\n            // Pause was called after play in Firefox\n            if (err.message.includes('The fetching process for the media resource was aborted by the user agent')) {\n                return;\n            }\n            // Got replaced by a different audio source in Chromium\n            if (err.message.includes('request was interrupted by a new load request')) {\n                return;\n            }\n            // Audio tag got unmounted\n            if (err.message.includes('because the media was removed from the document')) {\n                return;\n            }\n            console.log(`Could not play ${mediaType} due to following error: `, err);\n            if (!current.muted) {\n                console.log(`The video will be muted and we'll retry playing it.`, err);\n                current.muted = true;\n                current.play();\n            }\n        });\n    }\n};\n\nconst evaluateVolume = ({ frame, volume, mediaVolume = 1, allowAmplificationDuringRender, }) => {\n    const maxVolume = allowAmplificationDuringRender ? Infinity : 1;\n    if (typeof volume === 'number') {\n        return Math.min(maxVolume, volume * mediaVolume);\n    }\n    if (typeof volume === 'undefined') {\n        return Number(mediaVolume);\n    }\n    const evaluated = volume(frame) * mediaVolume;\n    if (typeof evaluated !== 'number') {\n        throw new TypeError(`You passed in a a function to the volume prop but it did not return a number but a value of type ${typeof evaluated} for frame ${frame}`);\n    }\n    if (Number.isNaN(evaluated)) {\n        throw new TypeError(`You passed in a function to the volume prop but it returned NaN for frame ${frame}.`);\n    }\n    if (!Number.isFinite(evaluated)) {\n        throw new TypeError(`You passed in a function to the volume prop but it returned a non-finite number for frame ${frame}.`);\n    }\n    return Math.max(0, Math.min(maxVolume, evaluated));\n};\n\nconst didWarn = {};\nconst warnOnce = (message) => {\n    if (didWarn[message]) {\n        return;\n    }\n    console.warn(message);\n    didWarn[message] = true;\n};\nconst useMediaInTimeline = ({ volume, mediaVolume, mediaRef, src, mediaType, playbackRate, }) => {\n    const videoConfig = useVideoConfig();\n    const { rootId, audioAndVideoTags } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);\n    const parentSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const actualFrom = parentSequence\n        ? parentSequence.relativeFrom + parentSequence.cumulatedFrom\n        : 0;\n    const [playing] = usePlayingState();\n    const startsAt = useMediaStartsAt();\n    const { registerSequence, unregisterSequence } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceManager);\n    const [id] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => String(Math.random()));\n    const [initialVolume] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => volume);\n    const nonce = useNonce();\n    const duration = parentSequence\n        ? Math.min(parentSequence.durationInFrames, videoConfig.durationInFrames)\n        : videoConfig.durationInFrames;\n    const doesVolumeChange = typeof volume === 'function';\n    const volumes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        if (typeof volume === 'number') {\n            return volume;\n        }\n        return new Array(Math.floor(Math.max(0, duration + startsAt)))\n            .fill(true)\n            .map((_, i) => {\n            return evaluateVolume({\n                frame: i + startsAt,\n                volume,\n                mediaVolume,\n                allowAmplificationDuringRender: false,\n            });\n        })\n            .join(',');\n    }, [duration, startsAt, volume, mediaVolume]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof volume === 'number' && volume !== initialVolume) {\n            warnOnce(`Remotion: The ${mediaType} with src ${src} has changed it's volume. Prefer the callback syntax for setting volume to get better timeline display: https://www.remotion.dev/docs/using-audio/#controlling-volume`);\n        }\n    }, [initialVolume, mediaType, src, volume]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        var _a;\n        if (!mediaRef.current) {\n            return;\n        }\n        if (!src) {\n            throw new Error('No src passed');\n        }\n        if (!getRemotionEnvironment().isStudio && \"development\" !== 'test') {\n            return;\n        }\n        registerSequence({\n            type: mediaType,\n            src,\n            id,\n            duration,\n            from: 0,\n            parent: (_a = parentSequence === null || parentSequence === void 0 ? void 0 : parentSequence.id) !== null && _a !== void 0 ? _a : null,\n            displayName: getAssetDisplayName(src),\n            rootId,\n            volume: volumes,\n            showInTimeline: true,\n            nonce,\n            startMediaFrom: 0 - startsAt,\n            doesVolumeChange,\n            loopDisplay: undefined,\n            playbackRate,\n        });\n        return () => {\n            unregisterSequence(id);\n        };\n    }, [\n        actualFrom,\n        duration,\n        id,\n        parentSequence,\n        src,\n        registerSequence,\n        rootId,\n        unregisterSequence,\n        videoConfig,\n        volumes,\n        doesVolumeChange,\n        nonce,\n        mediaRef,\n        mediaType,\n        startsAt,\n        playbackRate,\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const tag = {\n            id,\n            play: () => {\n                if (!playing) {\n                    // Don't play if for example in a <Freeze> state.\n                    return;\n                }\n                return playAndHandleNotAllowedError(mediaRef, mediaType);\n            },\n        };\n        audioAndVideoTags.current.push(tag);\n        return () => {\n            audioAndVideoTags.current = audioAndVideoTags.current.filter((a) => a.id !== id);\n        };\n    }, [audioAndVideoTags, id, mediaRef, mediaType, playing]);\n};\n\n// Taken from https://github.com/facebook/react-native/blob/0b9ea60b4fee8cacc36e7160e31b91fc114dbc0d/Libraries/Animated/src/nodes/AnimatedInterpolation.js\nfunction interpolateFunction(input, inputRange, outputRange, options) {\n    const { extrapolateLeft, extrapolateRight, easing } = options;\n    let result = input;\n    const [inputMin, inputMax] = inputRange;\n    const [outputMin, outputMax] = outputRange;\n    if (result < inputMin) {\n        if (extrapolateLeft === 'identity') {\n            return result;\n        }\n        if (extrapolateLeft === 'clamp') {\n            result = inputMin;\n        }\n    }\n    if (result > inputMax) {\n        if (extrapolateRight === 'identity') {\n            return result;\n        }\n        if (extrapolateRight === 'clamp') {\n            result = inputMax;\n        }\n    }\n    if (outputMin === outputMax) {\n        return outputMin;\n    }\n    // Input Range\n    result = (result - inputMin) / (inputMax - inputMin);\n    // Easing\n    result = easing(result);\n    // Output Range\n    result = result * (outputMax - outputMin) + outputMin;\n    return result;\n}\nfunction findRange(input, inputRange) {\n    let i;\n    for (i = 1; i < inputRange.length - 1; ++i) {\n        if (inputRange[i] >= input) {\n            break;\n        }\n    }\n    return i - 1;\n}\nfunction checkValidInputRange(arr) {\n    for (let i = 1; i < arr.length; ++i) {\n        if (!(arr[i] > arr[i - 1])) {\n            throw new Error(`inputRange must be strictly monotonically non-decreasing but got [${arr.join(',')}]`);\n        }\n    }\n}\nfunction checkInfiniteRange(name, arr) {\n    if (arr.length < 2) {\n        throw new Error(name + ' must have at least 2 elements');\n    }\n    for (const index in arr) {\n        if (typeof arr[index] !== 'number') {\n            throw new Error(`${name} must contain only numbers`);\n        }\n        if (arr[index] === -Infinity || arr[index] === Infinity) {\n            throw new Error(`${name} must contain only finite numbers, but got [${arr.join(',')}]`);\n        }\n    }\n}\n/**\n * Map a value from an input range to an output range.\n * @link https://www.remotion.dev/docs/interpolate\n * @param {!number} input value to interpolate\n * @param {!number[]} inputRange range of values that you expect the input to assume.\n * @param {!number[]} outputRange range of output values that you want the input to map to.\n * @param {?object} options\n * @param {?Function} options.easing easing function which allows you to customize the input, for example to apply a certain easing function. By default, the input is left unmodified, resulting in a pure linear interpolation {@link https://www.remotion.dev/docs/easing}\n * @param {string=} [options.extrapolateLeft=\"extend\"] What should happen if the input value is outside left the input range, default: \"extend\" {@link https://www.remotion.dev/docs/interpolate#extrapolateleft}\n * @param {string=} [options.extrapolateRight=\"extend\"] Same as extrapolateLeft, except for values outside right the input range {@link https://www.remotion.dev/docs/interpolate#extrapolateright}\n */\nfunction interpolate(input, inputRange, outputRange, options) {\n    var _a;\n    if (typeof input === 'undefined') {\n        throw new Error('input can not be undefined');\n    }\n    if (typeof inputRange === 'undefined') {\n        throw new Error('inputRange can not be undefined');\n    }\n    if (typeof outputRange === 'undefined') {\n        throw new Error('outputRange can not be undefined');\n    }\n    if (inputRange.length !== outputRange.length) {\n        throw new Error('inputRange (' +\n            inputRange.length +\n            ') and outputRange (' +\n            outputRange.length +\n            ') must have the same length');\n    }\n    checkInfiniteRange('inputRange', inputRange);\n    checkInfiniteRange('outputRange', outputRange);\n    checkValidInputRange(inputRange);\n    const easing = (_a = options === null || options === void 0 ? void 0 : options.easing) !== null && _a !== void 0 ? _a : ((num) => num);\n    let extrapolateLeft = 'extend';\n    if ((options === null || options === void 0 ? void 0 : options.extrapolateLeft) !== undefined) {\n        extrapolateLeft = options.extrapolateLeft;\n    }\n    let extrapolateRight = 'extend';\n    if ((options === null || options === void 0 ? void 0 : options.extrapolateRight) !== undefined) {\n        extrapolateRight = options.extrapolateRight;\n    }\n    if (typeof input !== 'number') {\n        throw new TypeError('Cannot interpolate an input which is not a number');\n    }\n    const range = findRange(input, inputRange);\n    return interpolateFunction(input, [inputRange[range], inputRange[range + 1]], [outputRange[range], outputRange[range + 1]], {\n        easing,\n        extrapolateLeft,\n        extrapolateRight,\n    });\n}\n\n// Calculate the `.currentTime` of a video or audio element\nconst getExpectedMediaFrameUncorrected = ({ frame, playbackRate, startFrom, }) => {\n    return interpolate(frame, [-1, startFrom, startFrom + 1], [-1, startFrom, startFrom + playbackRate]);\n};\nconst getMediaTime = ({ fps, frame, src, playbackRate, startFrom, mediaType, }) => {\n    const expectedFrame = getExpectedMediaFrameUncorrected({\n        frame,\n        playbackRate,\n        startFrom,\n    });\n    const isChrome = typeof window !== 'undefined' &&\n        window.navigator.userAgent.match(/Chrome\\/([0-9]+)/);\n    if (isChrome &&\n        Number(isChrome[1]) < 112 &&\n        mediaType === 'video' &&\n        src.endsWith('.mp4')) {\n        // In Chrome, for MP4s, if 30fps, the first frame is still displayed at 0.033333\n        // even though after that it increases by 0.033333333 each.\n        // So frame = 0 in Remotion is like frame = 1 for the browser\n        return (expectedFrame + 1) / fps;\n    }\n    // For WebM videos, we need to add a little bit of shift to get the right frame.\n    const msPerFrame = 1000 / fps;\n    const msShift = msPerFrame / 2;\n    return (expectedFrame * msPerFrame + msShift) / 1000;\n};\n\nconst toSeconds = (time, fps) => {\n    return Math.round((time / fps) * 100) / 100;\n};\n// https://github.com/remotion-dev/remotion/issues/1655\nconst isIOSSafariCase = (actualSrc) => {\n    return typeof window === 'undefined'\n        ? false\n        : /iP(ad|od|hone)/i.test(window.navigator.userAgent) &&\n            Boolean(navigator.userAgent.match(/Version\\/[\\d.]+.*Safari/)) &&\n            actualSrc.startsWith('blob:');\n};\nconst appendVideoFragment = ({ actualSrc, actualFrom, duration, fps, }) => {\n    var _a;\n    if (isIOSSafariCase(actualSrc)) {\n        return actualSrc;\n    }\n    if (actualSrc.startsWith('data:')) {\n        return actualSrc;\n    }\n    const existingHash = Boolean(new URL(actualSrc, (_a = (typeof window === 'undefined' ? null : window.location.href)) !== null && _a !== void 0 ? _a : 'http://localhost:3000').hash);\n    if (existingHash) {\n        return actualSrc;\n    }\n    if (!Number.isFinite(actualFrom)) {\n        return actualSrc;\n    }\n    actualSrc += `#t=${toSeconds(-actualFrom, fps)}`;\n    if (!Number.isFinite(duration)) {\n        return actualSrc;\n    }\n    actualSrc += `,${toSeconds(duration, fps)}`;\n    return actualSrc;\n};\nconst isSubsetOfDuration = (prevStartFrom, newStartFrom, prevDuration, newDuration) => {\n    return (prevStartFrom <= newStartFrom &&\n        prevStartFrom + prevDuration >= newStartFrom + newDuration);\n};\nconst useAppendVideoFragment = ({ actualSrc: initialActualSrc, actualFrom: initialActualFrom, duration: initialDuration, fps, }) => {\n    const actualFromRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialActualFrom);\n    const actualDuration = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialDuration);\n    const actualSrc = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialActualSrc);\n    if (!isSubsetOfDuration || initialActualSrc !== actualSrc.current) {\n        actualFromRef.current = initialActualFrom;\n        actualDuration.current = initialDuration;\n        actualSrc.current = initialActualSrc;\n    }\n    const appended = appendVideoFragment({\n        actualSrc: actualSrc.current,\n        actualFrom: actualFromRef.current,\n        duration: actualDuration.current,\n        fps,\n    });\n    return appended;\n};\nconst isIosSafari = () => {\n    return typeof window === 'undefined'\n        ? false\n        : /iP(ad|od|hone)/i.test(window.navigator.userAgent) &&\n            Boolean(navigator.userAgent.match(/Version\\/[\\d.]+.*Safari/));\n};\n\nconst alreadyWarned = {};\nconst warnAboutNonSeekableMedia = (ref, type) => {\n    // Media is not loaded yet, but this does not yet mean something is wrong with the media\n    if (ref === null) {\n        return;\n    }\n    if (ref.seekable.length === 0) {\n        return;\n    }\n    if (ref.seekable.length > 1) {\n        return;\n    }\n    if (alreadyWarned[ref.src]) {\n        return;\n    }\n    const range = { start: ref.seekable.start(0), end: ref.seekable.end(0) };\n    if (range.start === 0 && range.end === 0) {\n        const msg = `The media ${ref.src} cannot be seeked. This could be one of two reasons: 1) The media resource was replaced while the video is playing but it was not loaded yet. 2) The media does not support seeking. Please see https://remotion.dev/docs/non-seekable-media for assistance.`;\n        if (type === 'console-error') {\n            console.error(msg);\n        }\n        else if (type === 'console-warning') {\n            console.warn(`The media ${ref.src} does not support seeking. The video will render fine, but may not play correctly in the Remotion Studio and in the <Player>. See https://remotion.dev/docs/non-seekable-media for an explanation.`);\n        }\n        else {\n            throw new Error(msg);\n        }\n        alreadyWarned[ref.src] = true;\n    }\n};\n\nconst DEFAULT_ACCEPTABLE_TIMESHIFT = 0.45;\nconst seek = (mediaRef, time) => {\n    if (!mediaRef.current) {\n        return;\n    }\n    // iOS seeking does not support multiple decimals\n    if (isIosSafari()) {\n        mediaRef.current.currentTime = Number(time.toFixed(1));\n        return;\n    }\n    mediaRef.current.currentTime = time;\n};\nconst useMediaPlayback = ({ mediaRef, src, mediaType, playbackRate: localPlaybackRate, onlyWarnForMediaSeekingError, acceptableTimeshift, }) => {\n    const { playbackRate: globalPlaybackRate } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);\n    const frame = useCurrentFrame();\n    const absoluteFrame = useTimelinePosition();\n    const [playing] = usePlayingState();\n    const { fps } = useVideoConfig();\n    const mediaStartsAt = useMediaStartsAt();\n    const playbackRate = localPlaybackRate * globalPlaybackRate;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        var _a;\n        if (!playing) {\n            (_a = mediaRef.current) === null || _a === void 0 ? void 0 : _a.pause();\n        }\n    }, [mediaRef, mediaType, playing]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const tagName = mediaType === 'audio' ? '<Audio>' : '<Video>';\n        if (!mediaRef.current) {\n            throw new Error(`No ${mediaType} ref found`);\n        }\n        if (!src) {\n            throw new Error(`No 'src' attribute was passed to the ${tagName} element.`);\n        }\n        const playbackRateToSet = Math.max(0, playbackRate);\n        if (mediaRef.current.playbackRate !== playbackRateToSet) {\n            mediaRef.current.playbackRate = playbackRateToSet;\n        }\n        const desiredUnclampedTime = getMediaTime({\n            fps,\n            frame,\n            src,\n            playbackRate: localPlaybackRate,\n            startFrom: -mediaStartsAt,\n            mediaType,\n        });\n        const { duration } = mediaRef.current;\n        const shouldBeTime = !Number.isNaN(duration) && Number.isFinite(duration)\n            ? Math.min(duration, desiredUnclampedTime)\n            : desiredUnclampedTime;\n        const isTime = mediaRef.current.currentTime;\n        const timeShift = Math.abs(shouldBeTime - isTime);\n        if (timeShift > acceptableTimeshift) {\n            // If scrubbing around, adjust timing\n            // or if time shift is bigger than 0.45sec\n            seek(mediaRef, shouldBeTime);\n            if (!onlyWarnForMediaSeekingError) {\n                warnAboutNonSeekableMedia(mediaRef.current, onlyWarnForMediaSeekingError ? 'console-warning' : 'console-error');\n            }\n            return;\n        }\n        // Only perform a seek if the time is not already the same.\n        // Chrome rounds to 6 digits, so 0.033333333 -> 0.033333,\n        // therefore a threshold is allowed.\n        // Refer to the https://github.com/remotion-dev/video-buffering-example\n        // which is fixed by only seeking conditionally.\n        const makesSenseToSeek = Math.abs(mediaRef.current.currentTime - shouldBeTime) > 0.00001;\n        if (!playing || absoluteFrame === 0) {\n            if (makesSenseToSeek) {\n                seek(mediaRef, shouldBeTime);\n            }\n        }\n        if (mediaRef.current.paused && !mediaRef.current.ended && playing) {\n            if (makesSenseToSeek) {\n                seek(mediaRef, shouldBeTime);\n            }\n            playAndHandleNotAllowedError(mediaRef, mediaType);\n        }\n    }, [\n        absoluteFrame,\n        fps,\n        playbackRate,\n        frame,\n        mediaRef,\n        mediaType,\n        playing,\n        src,\n        mediaStartsAt,\n        localPlaybackRate,\n        onlyWarnForMediaSeekingError,\n        acceptableTimeshift,\n    ]);\n};\n\n// Returns the real volume of the audio or video while playing,\n// no matter what the supposed volume should be\nconst useMediaTagVolume = (mediaRef) => {\n    const [actualVolume, setActualVolume] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const ref = mediaRef.current;\n        if (!ref) {\n            return;\n        }\n        const onChange = () => {\n            setActualVolume(ref.volume);\n        };\n        ref.addEventListener('volumechange', onChange);\n        return () => ref.removeEventListener('volumechange', onChange);\n    }, [mediaRef]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const ref = mediaRef.current;\n        if (!ref) {\n            return;\n        }\n        if (ref.volume !== actualVolume) {\n            setActualVolume(ref.volume);\n        }\n    }, [actualVolume, mediaRef]);\n    return actualVolume;\n};\n\nconst FLOATING_POINT_ERROR_THRESHOLD = 0.00001;\nconst isApproximatelyTheSame = (num1, num2) => {\n    return Math.abs(num1 - num2) < FLOATING_POINT_ERROR_THRESHOLD;\n};\n\nconst useSyncVolumeWithMediaTag = ({ volumePropFrame, actualVolume, volume, mediaVolume, mediaRef, }) => {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const userPreferredVolume = evaluateVolume({\n            frame: volumePropFrame,\n            volume,\n            mediaVolume,\n            allowAmplificationDuringRender: false,\n        });\n        if (!isApproximatelyTheSame(userPreferredVolume, actualVolume) &&\n            mediaRef.current) {\n            mediaRef.current.volume = userPreferredVolume;\n        }\n    }, [actualVolume, volumePropFrame, mediaRef, volume, mediaVolume]);\n};\n\nconst MediaVolumeContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    mediaMuted: false,\n    mediaVolume: 1,\n});\nconst SetMediaVolumeContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    setMediaMuted: () => {\n        throw new Error('default');\n    },\n    setMediaVolume: () => {\n        throw new Error('default');\n    },\n});\nconst useMediaVolumeState = () => {\n    const { mediaVolume } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MediaVolumeContext);\n    const { setMediaVolume } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SetMediaVolumeContext);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return [mediaVolume, setMediaVolume];\n    }, [mediaVolume, setMediaVolume]);\n};\nconst useMediaMutedState = () => {\n    const { mediaMuted } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MediaVolumeContext);\n    const { setMediaMuted } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SetMediaVolumeContext);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return [mediaMuted, setMediaMuted];\n    }, [mediaMuted, setMediaMuted]);\n};\n\nconst EMPTY_AUDIO = 'data:audio/mp3;base64,/+MYxAAJcAV8AAgAABn//////+/gQ5BAMA+D4Pg+BAQBAEAwD4Pg+D4EBAEAQDAPg++hYBH///hUFQVBUFREDQNHmf///////+MYxBUGkAGIMAAAAP/29Xt6lUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV/+MYxDUAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\nconst compareProps = (obj1, obj2) => {\n    const keysA = Object.keys(obj1).sort();\n    const keysB = Object.keys(obj2).sort();\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n    for (let i = 0; i < keysA.length; i++) {\n        // Not the same keys\n        if (keysA[i] !== keysB[i]) {\n            return false;\n        }\n        // Not the same values\n        if (obj1[keysA[i]] !== obj2[keysB[i]]) {\n            return false;\n        }\n    }\n    return true;\n};\nconst didPropChange = (key, newProp, prevProp) => {\n    // /music.mp3 and http://localhost:3000/music.mp3 are the same\n    if (key === 'src' &&\n        !prevProp.startsWith('data:') &&\n        !newProp.startsWith('data:')) {\n        return (new URL(prevProp, window.location.origin).toString() !==\n            new URL(newProp, window.location.origin).toString());\n    }\n    if (prevProp === newProp) {\n        return false;\n    }\n    return true;\n};\nconst SharedAudioContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst SharedAudioContextProvider = ({ children, numberOfAudioTags, component }) => {\n    const audios = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const [initialNumberOfAudioTags] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(numberOfAudioTags);\n    if (numberOfAudioTags !== initialNumberOfAudioTags) {\n        throw new Error('The number of shared audio tags has changed dynamically. Once you have set this property, you cannot change it afterwards.');\n    }\n    const refs = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return new Array(numberOfAudioTags).fill(true).map(() => {\n            return { id: Math.random(), ref: (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)() };\n        });\n    }, [numberOfAudioTags]);\n    const takenAudios = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new Array(numberOfAudioTags).fill(false));\n    const rerenderAudios = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        refs.forEach(({ ref, id }) => {\n            var _a;\n            const data = (_a = audios.current) === null || _a === void 0 ? void 0 : _a.find((a) => a.id === id);\n            const { current } = ref;\n            if (!current) {\n                // Whole player has been unmounted, the refs don't exist anymore.\n                // It is not an error anymore though\n                return;\n            }\n            if (data === undefined) {\n                current.src = EMPTY_AUDIO;\n                return;\n            }\n            if (!data) {\n                throw new TypeError('Expected audio data to be there');\n            }\n            Object.keys(data.props).forEach((key) => {\n                // @ts-expect-error\n                if (didPropChange(key, data.props[key], current[key])) {\n                    // @ts-expect-error\n                    current[key] = data.props[key];\n                }\n            });\n        });\n    }, [refs]);\n    const registerAudio = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((aud, audioId) => {\n        var _a, _b;\n        const found = (_a = audios.current) === null || _a === void 0 ? void 0 : _a.find((a) => a.audioId === audioId);\n        if (found) {\n            return found;\n        }\n        const firstFreeAudio = takenAudios.current.findIndex((a) => a === false);\n        if (firstFreeAudio === -1) {\n            throw new Error(`Tried to simultaneously mount ${numberOfAudioTags + 1} <Audio /> tags at the same time. With the current settings, the maximum amount of <Audio /> tags is limited to ${numberOfAudioTags} at the same time. Remotion pre-mounts silent audio tags to help avoid browser autoplay restrictions. See https://remotion.dev/docs/player/autoplay#use-the-numberofsharedaudiotags-property for more information on how to increase this limit.`);\n        }\n        const { id, ref } = refs[firstFreeAudio];\n        const cloned = [...takenAudios.current];\n        cloned[firstFreeAudio] = id;\n        takenAudios.current = cloned;\n        const newElem = {\n            props: aud,\n            id,\n            el: ref,\n            audioId,\n        };\n        (_b = audios.current) === null || _b === void 0 ? void 0 : _b.push(newElem);\n        rerenderAudios();\n        return newElem;\n    }, [numberOfAudioTags, refs, rerenderAudios]);\n    const unregisterAudio = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id) => {\n        var _a;\n        const cloned = [...takenAudios.current];\n        const index = refs.findIndex((r) => r.id === id);\n        if (index === -1) {\n            throw new TypeError('Error occured in ');\n        }\n        cloned[index] = false;\n        takenAudios.current = cloned;\n        audios.current = (_a = audios.current) === null || _a === void 0 ? void 0 : _a.filter((a) => a.id !== id);\n        rerenderAudios();\n    }, [refs, rerenderAudios]);\n    const updateAudio = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ aud, audioId, id, }) => {\n        var _a;\n        let changed = false;\n        audios.current = (_a = audios.current) === null || _a === void 0 ? void 0 : _a.map((prevA) => {\n            if (prevA.id === id) {\n                const isTheSame = compareProps(aud, prevA.props);\n                if (isTheSame) {\n                    return prevA;\n                }\n                changed = true;\n                return {\n                    ...prevA,\n                    props: aud,\n                    audioId,\n                };\n            }\n            return prevA;\n        });\n        if (changed) {\n            rerenderAudios();\n        }\n    }, [rerenderAudios]);\n    const playAllAudios = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        refs.forEach((ref) => {\n            var _a;\n            (_a = ref.ref.current) === null || _a === void 0 ? void 0 : _a.play();\n        });\n    }, [refs]);\n    const value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            registerAudio,\n            unregisterAudio,\n            updateAudio,\n            playAllAudios,\n            numberOfAudioTags,\n        };\n    }, [\n        numberOfAudioTags,\n        playAllAudios,\n        registerAudio,\n        unregisterAudio,\n        updateAudio,\n    ]);\n    // Fixing a bug: In React, if a component is unmounted using useInsertionEffect, then\n    // the cleanup function does sometimes not work properly. That is why when we\n    // are changing the composition, we reset the audio state.\n    // TODO: Possibly this does not save the problem completely, since the\n    // if an audio tag that is inside a sequence will also not be removed\n    // from the shared audios.\n    const resetAudio = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        takenAudios.current = new Array(numberOfAudioTags).fill(false);\n        audios.current = [];\n        rerenderAudios();\n    }, [numberOfAudioTags, rerenderAudios]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        return () => {\n            resetAudio();\n        };\n    }, [component, resetAudio]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(SharedAudioContext.Provider, { value: value, children: [refs.map(({ id, ref }) => {\n                return (\n                // Without preload=\"metadata\", iOS will seek the time internally\n                // but not actually with sound. Adding `preload=\"metadata\"` helps here.\n                // https://discord.com/channels/809501355504959528/817306414069710848/1130519583367888906\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"audio\", { ref: ref, preload: \"metadata\", src: EMPTY_AUDIO }, id));\n            }), children] }));\n};\nconst useSharedAudio = (aud, audioId) => {\n    var _a;\n    const ctx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SharedAudioContext);\n    /**\n     * We work around this in React 18 so an audio tag will only register itself once\n     */\n    const [elem] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => {\n        if (ctx && ctx.numberOfAudioTags > 0) {\n            return ctx.registerAudio(aud, audioId);\n        }\n        return {\n            el: react__WEBPACK_IMPORTED_MODULE_0__.createRef(),\n            id: Math.random(),\n            props: aud,\n            audioId,\n        };\n    });\n    /**\n     * Effects in React 18 fire twice, and we are looking for a way to only fire it once.\n     * - useInsertionEffect only fires once. If it's available we are in React 18.\n     * - useLayoutEffect only fires once in React 17.\n     *\n     * Need to import it from React to fix React 17 ESM support.\n     */\n    const effectToUse = (_a = react__WEBPACK_IMPORTED_MODULE_0__.useInsertionEffect) !== null && _a !== void 0 ? _a : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;\n    if (typeof document !== 'undefined') {\n        effectToUse(() => {\n            if (ctx && ctx.numberOfAudioTags > 0) {\n                ctx.updateAudio({ id: elem.id, aud, audioId });\n            }\n        }, [aud, ctx, elem.id, audioId]);\n        effectToUse(() => {\n            return () => {\n                if (ctx && ctx.numberOfAudioTags > 0) {\n                    ctx.unregisterAudio(elem.id);\n                }\n            };\n        }, [ctx, elem.id]);\n    }\n    return elem;\n};\n\nconst AudioForDevelopmentForwardRefFunction = (props, ref) => {\n    const [initialShouldPreMountAudioElements] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.shouldPreMountAudioTags);\n    if (props.shouldPreMountAudioTags !== initialShouldPreMountAudioElements) {\n        throw new Error('Cannot change the behavior for pre-mounting audio tags dynamically.');\n    }\n    const [mediaVolume] = useMediaVolumeState();\n    const [mediaMuted] = useMediaMutedState();\n    const volumePropFrame = useFrameForVolumeProp();\n    const { volume, muted, playbackRate, shouldPreMountAudioTags, src, onDuration, acceptableTimeShiftInSeconds, _remotionInternalNeedsDurationCalculation, allowAmplificationDuringRender, ...nativeProps } = props;\n    if (!src) {\n        throw new TypeError(\"No 'src' was passed to <Audio>.\");\n    }\n    const preloadedSrc = usePreload(src);\n    const propsToPass = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            muted: muted || mediaMuted,\n            src: preloadedSrc,\n            ...nativeProps,\n        };\n    }, [mediaMuted, muted, nativeProps, preloadedSrc]);\n    const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    // Generate a string that's as unique as possible for this asset\n    // but at the same time deterministic. We use it to combat strict mode issues.\n    const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => `audio-${random(src !== null && src !== void 0 ? src : '')}-${sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.relativeFrom}-${sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.cumulatedFrom}-${sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.durationInFrames}-muted:${props.muted}-loop:${props.loop}`, [\n        src,\n        sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.relativeFrom,\n        sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.cumulatedFrom,\n        sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.durationInFrames,\n        props.muted,\n        props.loop,\n    ]);\n    const audioRef = useSharedAudio(propsToPass, id).el;\n    const actualVolume = useMediaTagVolume(audioRef);\n    useSyncVolumeWithMediaTag({\n        volumePropFrame,\n        actualVolume,\n        volume,\n        mediaVolume,\n        mediaRef: audioRef,\n    });\n    useMediaInTimeline({\n        volume,\n        mediaVolume,\n        mediaRef: audioRef,\n        src,\n        mediaType: 'audio',\n        playbackRate: playbackRate !== null && playbackRate !== void 0 ? playbackRate : 1,\n    });\n    useMediaPlayback({\n        mediaRef: audioRef,\n        src,\n        mediaType: 'audio',\n        playbackRate: playbackRate !== null && playbackRate !== void 0 ? playbackRate : 1,\n        onlyWarnForMediaSeekingError: false,\n        acceptableTimeshift: acceptableTimeShiftInSeconds !== null && acceptableTimeShiftInSeconds !== void 0 ? acceptableTimeShiftInSeconds : DEFAULT_ACCEPTABLE_TIMESHIFT,\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => {\n        return audioRef.current;\n    }, [audioRef]);\n    const currentOnDurationCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    currentOnDurationCallback.current = onDuration;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        var _a;\n        const { current } = audioRef;\n        if (!current) {\n            return;\n        }\n        if (current.duration) {\n            (_a = currentOnDurationCallback.current) === null || _a === void 0 ? void 0 : _a.call(currentOnDurationCallback, current.src, current.duration);\n            return;\n        }\n        const onLoadedMetadata = () => {\n            var _a;\n            (_a = currentOnDurationCallback.current) === null || _a === void 0 ? void 0 : _a.call(currentOnDurationCallback, current.src, current.duration);\n        };\n        current.addEventListener('loadedmetadata', onLoadedMetadata);\n        return () => {\n            current.removeEventListener('loadedmetadata', onLoadedMetadata);\n        };\n    }, [audioRef, src]);\n    if (initialShouldPreMountAudioElements) {\n        return null;\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"audio\", { ref: audioRef, preload: \"metadata\", ...propsToPass });\n};\nconst AudioForDevelopment = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(AudioForDevelopmentForwardRefFunction);\n\nif (typeof window !== 'undefined') {\n    window.remotion_renderReady = false;\n}\nlet handles = [];\nif (typeof window !== 'undefined') {\n    window.remotion_delayRenderTimeouts = {};\n}\nconst DELAY_RENDER_CALLSTACK_TOKEN = 'The delayRender was called:';\nconst defaultTimeout = 30000;\n/**\n * @description Call this function to tell Remotion to wait before capturing this frame until data has loaded. Use continueRender() to unblock the render.\n * @param label _optional_ A label to identify the call in case it does time out.\n * @returns {number} An identifier to be passed to continueRender().\n * @see [Documentation](https://www.remotion.dev/docs/delay-render)\n */\nconst delayRender = (label) => {\n    var _a, _b, _c;\n    if (typeof label !== 'string' && typeof label !== 'undefined') {\n        throw new Error('The label parameter of delayRender() must be a string or undefined, got: ' +\n            JSON.stringify(label));\n    }\n    const handle = Math.random();\n    handles.push(handle);\n    const called = (_b = (_a = Error().stack) === null || _a === void 0 ? void 0 : _a.replace(/^Error/g, '')) !== null && _b !== void 0 ? _b : '';\n    if (getRemotionEnvironment().isRendering) {\n        const timeoutToUse = typeof window === 'undefined'\n            ? defaultTimeout\n            : ((_c = window.remotion_puppeteerTimeout) !== null && _c !== void 0 ? _c : defaultTimeout) - 2000;\n        if (typeof window !== 'undefined') {\n            window.remotion_delayRenderTimeouts[handle] = {\n                label: label !== null && label !== void 0 ? label : null,\n                timeout: setTimeout(() => {\n                    const message = [\n                        `A delayRender()`,\n                        label ? `\"${label}\"` : null,\n                        `was called but not cleared after ${timeoutToUse}ms. See https://remotion.dev/docs/timeout for help.`,\n                        DELAY_RENDER_CALLSTACK_TOKEN,\n                        called,\n                    ]\n                        .filter(truthy)\n                        .join(' ');\n                    throw new Error(message);\n                }, timeoutToUse),\n            };\n        }\n    }\n    if (typeof window !== 'undefined') {\n        window.remotion_renderReady = false;\n    }\n    return handle;\n};\n/**\n * @description Unblock a render that has been blocked by delayRender()\n * @param handle The return value of delayRender().\n * @see [Documentation](https://www.remotion.dev/docs/continue-render)\n */\nconst continueRender = (handle) => {\n    if (typeof handle === 'undefined') {\n        throw new TypeError('The continueRender() method must be called with a parameter that is the return value of delayRender(). No value was passed.');\n    }\n    if (typeof handle !== 'number') {\n        throw new TypeError('The parameter passed into continueRender() must be the return value of delayRender() which is a number. Got: ' +\n            JSON.stringify(handle));\n    }\n    handles = handles.filter((h) => {\n        if (h === handle) {\n            if (getRemotionEnvironment().isRendering) {\n                clearTimeout(window.remotion_delayRenderTimeouts[handle].timeout);\n                delete window.remotion_delayRenderTimeouts[handle];\n            }\n            return false;\n        }\n        return true;\n    });\n    if (handles.length === 0 && typeof window !== 'undefined') {\n        window.remotion_renderReady = true;\n    }\n};\n\nconst RenderAssetManager = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    // Must be undefined, otherwise error in Player\n    registerRenderAsset: () => undefined,\n    unregisterRenderAsset: () => undefined,\n    renderAssets: [],\n});\nconst RenderAssetManagerProvider = ({ children }) => {\n    const [renderAssets, setRenderAssets] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const registerRenderAsset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((renderAsset) => {\n        setRenderAssets((assets) => {\n            return [...assets, renderAsset];\n        });\n    }, []);\n    const unregisterRenderAsset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id) => {\n        setRenderAssets((assts) => {\n            return assts.filter((a) => a.id !== id);\n        });\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n        if (typeof window !== 'undefined') {\n            window.remotion_collectAssets = () => {\n                setRenderAssets([]); // clear assets at next render\n                return renderAssets;\n            };\n        }\n    }, [renderAssets]);\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            registerRenderAsset,\n            unregisterRenderAsset,\n            renderAssets,\n        };\n    }, [renderAssets, registerRenderAsset, unregisterRenderAsset]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RenderAssetManager.Provider, { value: contextValue, children: children }));\n};\n\nconst AudioForRenderingRefForwardingFunction = (props, ref) => {\n    const audioRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const absoluteFrame = useTimelinePosition();\n    const volumePropFrame = useFrameForVolumeProp();\n    const frame = useCurrentFrame();\n    const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const { registerRenderAsset, unregisterRenderAsset } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RenderAssetManager);\n    // Generate a string that's as unique as possible for this asset\n    // but at the same time the same on all threads\n    const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        var _a;\n        return `audio-${random((_a = props.src) !== null && _a !== void 0 ? _a : '')}-${sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.relativeFrom}-${sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.cumulatedFrom}-${sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.durationInFrames}`;\n    }, [props.src, sequenceContext]);\n    const { volume: volumeProp, playbackRate, allowAmplificationDuringRender, onDuration, toneFrequency, _remotionInternalNeedsDurationCalculation, acceptableTimeShiftInSeconds, ...nativeProps } = props;\n    const volume = evaluateVolume({\n        volume: volumeProp,\n        frame: volumePropFrame,\n        mediaVolume: 1,\n        allowAmplificationDuringRender: allowAmplificationDuringRender !== null && allowAmplificationDuringRender !== void 0 ? allowAmplificationDuringRender : false,\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => {\n        return audioRef.current;\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        var _a;\n        if (!props.src) {\n            throw new Error('No src passed');\n        }\n        if (!window.remotion_audioEnabled) {\n            return;\n        }\n        if (props.muted) {\n            return;\n        }\n        if (volume <= 0) {\n            return;\n        }\n        registerRenderAsset({\n            type: 'audio',\n            src: getAbsoluteSrc(props.src),\n            id,\n            frame: absoluteFrame,\n            volume,\n            mediaFrame: frame,\n            playbackRate: (_a = props.playbackRate) !== null && _a !== void 0 ? _a : 1,\n            allowAmplificationDuringRender: allowAmplificationDuringRender !== null && allowAmplificationDuringRender !== void 0 ? allowAmplificationDuringRender : false,\n            toneFrequency: toneFrequency !== null && toneFrequency !== void 0 ? toneFrequency : null,\n        });\n        return () => unregisterRenderAsset(id);\n    }, [\n        props.muted,\n        props.src,\n        registerRenderAsset,\n        absoluteFrame,\n        id,\n        unregisterRenderAsset,\n        volume,\n        volumePropFrame,\n        frame,\n        playbackRate,\n        props.playbackRate,\n        allowAmplificationDuringRender,\n        toneFrequency,\n    ]);\n    const { src } = props;\n    // The <audio> tag is only rendered if the duration needs to be calculated for the `loop`\n    // attribute to work, or if the user assigns a ref to it.\n    const needsToRenderAudioTag = ref || _remotionInternalNeedsDurationCalculation;\n    // If audio source switches, make new handle\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n        if (false) {}\n        if (!needsToRenderAudioTag) {\n            return;\n        }\n        const newHandle = delayRender('Loading <Audio> duration with src=' + src);\n        const { current } = audioRef;\n        const didLoad = () => {\n            if (current === null || current === void 0 ? void 0 : current.duration) {\n                onDuration(current.src, current.duration);\n            }\n            continueRender(newHandle);\n        };\n        if (current === null || current === void 0 ? void 0 : current.duration) {\n            onDuration(current.src, current.duration);\n            continueRender(newHandle);\n        }\n        else {\n            current === null || current === void 0 ? void 0 : current.addEventListener('loadedmetadata', didLoad, { once: true });\n        }\n        // If tag gets unmounted, clear pending handles because video metadata is not going to load\n        return () => {\n            current === null || current === void 0 ? void 0 : current.removeEventListener('loadedmetadata', didLoad);\n            continueRender(newHandle);\n        };\n    }, [src, onDuration, needsToRenderAudioTag]);\n    if (!needsToRenderAudioTag) {\n        return null;\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"audio\", { ref: audioRef, ...nativeProps });\n};\nconst AudioForRendering = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(AudioForRenderingRefForwardingFunction);\n\nconst AudioRefForwardingFunction = (props, ref) => {\n    var _a;\n    const audioContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SharedAudioContext);\n    const { startFrom, endAt, ...otherProps } = props;\n    const { loop, ...propsOtherThanLoop } = props;\n    const { fps } = useVideoConfig();\n    const environment = getRemotionEnvironment();\n    const { durations, setDurations } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(DurationsContext);\n    if (typeof props.src !== 'string') {\n        throw new TypeError(`The \\`<Audio>\\` tag requires a string for \\`src\\`, but got ${JSON.stringify(props.src)} instead.`);\n    }\n    const onError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {\n        console.log(e.currentTarget.error);\n        // If there is no `loop` property, we don't need to get the duration\n        // and this does not need to be a fatal error\n        const errMessage = `Could not play audio with src ${otherProps.src}: ${e.currentTarget.error}. See https://remotion.dev/docs/media-playback-error for help.`;\n        if (loop) {\n            cancelRender(new Error(errMessage));\n        }\n        else {\n            console.warn(errMessage);\n        }\n    }, [loop, otherProps.src]);\n    const onDuration = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((src, durationInSeconds) => {\n        setDurations({ type: 'got-duration', durationInSeconds, src });\n    }, [setDurations]);\n    if (loop && props.src && durations[getAbsoluteSrc(props.src)] !== undefined) {\n        const duration = Math.floor(durations[getAbsoluteSrc(props.src)] * fps);\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Loop, { layout: \"none\", durationInFrames: calculateLoopDuration({\n                endAt,\n                mediaDuration: duration,\n                playbackRate: (_a = props.playbackRate) !== null && _a !== void 0 ? _a : 1,\n                startFrom,\n            }), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Audio, { ...propsOtherThanLoop, ref: ref }) }));\n    }\n    if (typeof startFrom !== 'undefined' || typeof endAt !== 'undefined') {\n        validateStartFromProps(startFrom, endAt);\n        const startFromFrameNo = startFrom !== null && startFrom !== void 0 ? startFrom : 0;\n        const endAtFrameNo = endAt !== null && endAt !== void 0 ? endAt : Infinity;\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, { layout: \"none\", from: 0 - startFromFrameNo, showInTimeline: false, durationInFrames: endAtFrameNo, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Audio, { _remotionInternalNeedsDurationCalculation: Boolean(loop), ...otherProps, ref: ref }) }));\n    }\n    validateMediaProps(props, 'Audio');\n    if (environment.isRendering) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(AudioForRendering, { onDuration: onDuration, ...props, ref: ref, onError: onError, _remotionInternalNeedsDurationCalculation: Boolean(loop) }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(AudioForDevelopment, { shouldPreMountAudioTags: audioContext !== null && audioContext.numberOfAudioTags > 0, ...props, ref: ref, onError: onError, onDuration: onDuration, _remotionInternalNeedsDurationCalculation: Boolean(loop) }));\n};\n/**\n * @description With this component, you can add audio to your video. All audio formats which are supported by Chromium are supported by the component.\n * @see [Documentation](https://www.remotion.dev/docs/audio)\n */\nconst Audio = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(AudioRefForwardingFunction);\n\nconst getRegex$1 = () => /^([a-zA-Z0-9-])+$/g;\nconst isFolderNameValid = (name) => name.match(getRegex$1());\nconst validateFolderName = (name) => {\n    if (name === undefined || name === null) {\n        throw new TypeError('You must pass a name to a <Folder />.');\n    }\n    if (typeof name !== 'string') {\n        throw new TypeError(`The \"name\" you pass into <Folder /> must be a string. Got: ${typeof name}`);\n    }\n    if (!isFolderNameValid(name)) {\n        throw new Error(`Folder name can only contain a-z, A-Z, 0-9 and -. You passed ${name}`);\n    }\n};\n\nconst FolderContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    folderName: null,\n    parentName: null,\n});\n/**\n * @description By wrapping a <Composition /> inside a <Folder />, you can visually categorize it in your sidebar, should you have many compositions.\n * @see [Documentation](https://www.remotion.dev/docs/folder)\n */\nconst Folder = ({ name, children, }) => {\n    const parent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(FolderContext);\n    const { registerFolder, unregisterFolder } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionManager);\n    validateFolderName(name);\n    const parentNameArr = [parent.parentName, parent.folderName].filter(truthy);\n    const parentName = parentNameArr.length === 0 ? null : parentNameArr.join('/');\n    const value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            folderName: name,\n            parentName,\n        };\n    }, [name, parentName]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        registerFolder(name, parentName);\n        return () => {\n            unregisterFolder(name, parentName);\n        };\n    }, [name, parent.folderName, parentName, registerFolder, unregisterFolder]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FolderContext.Provider, { value: value, children: children }));\n};\n\nconst rotate = {\n    transform: `rotate(90deg)`,\n};\nconst ICON_SIZE = 40;\nconst label = {\n    color: 'white',\n    fontSize: 14,\n    fontFamily: 'sans-serif',\n};\nconst container = {\n    justifyContent: 'center',\n    alignItems: 'center',\n};\nconst Loading = () => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(AbsoluteFill, { style: container, id: \"remotion-comp-loading\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"style\", { type: \"text/css\", children: `\n\t\t\t\t@keyframes anim {\n\t\t\t\t\tfrom {\n\t\t\t\t\t\topacity: 0\n\t\t\t\t\t}\n\t\t\t\t\tto {\n\t\t\t\t\t\topacity: 1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t#remotion-comp-loading {\n\t\t\t\t\tanimation: anim 2s;\n\t\t\t\t\tanimation-fill-mode: forwards;\n\t\t\t\t}\n\t\t\t` }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"svg\", { width: ICON_SIZE, height: ICON_SIZE, viewBox: \"-100 -100 400 400\", style: rotate, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"path\", { fill: \"#555\", stroke: \"#555\", strokeWidth: \"100\", strokeLinejoin: \"round\", d: \"M 2 172 a 196 100 0 0 0 195 5 A 196 240 0 0 0 100 2.259 A 196 240 0 0 0 2 172 z\" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"p\", { style: label, children: [\"Resolving \", '<Suspense>', \"...\"] })] }));\n};\n\nlet _portalNode = null;\nconst portalNode = () => {\n    if (!_portalNode) {\n        if (typeof document === 'undefined') {\n            throw new Error('Tried to call an API that only works in the browser from outside the browser');\n        }\n        _portalNode = document.createElement('div');\n        _portalNode.style.position = 'absolute';\n        _portalNode.style.top = '0px';\n        _portalNode.style.left = '0px';\n        _portalNode.style.right = '0px';\n        _portalNode.style.bottom = '0px';\n        _portalNode.style.width = '100%';\n        _portalNode.style.height = '100%';\n        _portalNode.style.display = 'flex';\n        _portalNode.style.flexDirection = 'column';\n    }\n    return _portalNode;\n};\n\n// Expected, it can be any component props\nconst useLazyComponent = (compProps) => {\n    const lazy = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        if ('lazyComponent' in compProps) {\n            return react__WEBPACK_IMPORTED_MODULE_0__.lazy(compProps.lazyComponent);\n        }\n        if ('component' in compProps) {\n            // In SSR, suspense is not yet supported, we cannot use React.lazy\n            if (typeof document === 'undefined') {\n                return compProps.component;\n            }\n            return react__WEBPACK_IMPORTED_MODULE_0__.lazy(() => Promise.resolve({ default: compProps.component }));\n        }\n        throw new Error(\"You must pass either 'component' or 'lazyComponent'\");\n        // Very important to leave the dependencies as they are, or instead\n        // the player will remount on every frame.\n        // @ts-expect-error\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [compProps.component, compProps.lazyComponent]);\n    return lazy;\n};\n\nconst getRegex = () => /^([a-zA-Z0-9-])+$/g;\nconst isCompositionIdValid = (id) => id.match(getRegex());\nconst validateCompositionId = (id) => {\n    if (!isCompositionIdValid(id)) {\n        throw new Error(`Composition id can only contain a-z, A-Z, 0-9 and -. You passed ${id}`);\n    }\n};\nconst invalidCompositionErrorMessage = `Composition ID must match ${String(getRegex())}`;\n\nconst validateDefaultAndInputProps = (defaultProps, name, compositionId) => {\n    if (!defaultProps) {\n        return;\n    }\n    if (typeof defaultProps !== 'object') {\n        throw new Error(`\"${name}\" must be an object, but you passed a value of type ${typeof defaultProps}`);\n    }\n    if (Array.isArray(defaultProps)) {\n        throw new Error(`\"${name}\" must be an object, an array was passed ${compositionId ? `for composition \"${compositionId}\"` : ''}`);\n    }\n};\n\nconst ClipComposition = ({ children }) => {\n    const { clipRegion } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(NativeLayersContext);\n    const style = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            display: 'flex',\n            flexDirection: 'row',\n            opacity: clipRegion === 'hide' ? 0 : 1,\n            clipPath: clipRegion && clipRegion !== 'hide'\n                ? `polygon(${clipRegion.x}px ${clipRegion.y}px, ${clipRegion.x}px ${clipRegion.height + clipRegion.y}px, ${clipRegion.width + clipRegion.x}px ${clipRegion.height + clipRegion.y}px, ${clipRegion.width + clipRegion.x}px ${clipRegion.y}px)`\n                : undefined,\n        };\n    }, [clipRegion]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(AbsoluteFill, { style: style, children: children });\n};\nconst Fallback = () => {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const fallback = delayRender('Waiting for Root component to unsuspend');\n        return () => continueRender(fallback);\n    }, []);\n    return null;\n};\n/**\n * @description This component is used to register a video to make it renderable and make it show in the sidebar, in dev mode.\n * @see [Documentation](https://www.remotion.dev/docs/composition)\n */\nconst Composition = ({ width, height, fps, durationInFrames, id, defaultProps, schema, ...compProps }) => {\n    var _a, _b;\n    const { registerComposition, unregisterComposition } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionManager);\n    const video = useVideo();\n    const lazy = useLazyComponent(compProps);\n    const nonce = useNonce();\n    const isPlayer = useIsPlayer();\n    const environment = getRemotionEnvironment();\n    const canUseComposition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CanUseRemotionHooks);\n    if (canUseComposition) {\n        if (isPlayer) {\n            throw new Error('<Composition> was mounted inside the `component` that was passed to the <Player>. See https://remotion.dev/docs/wrong-composition-mount for help.');\n        }\n        throw new Error('<Composition> mounted inside another composition. See https://remotion.dev/docs/wrong-composition-mount for help.');\n    }\n    const { folderName, parentName } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(FolderContext);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        var _a;\n        // Ensure it's a URL safe id\n        if (!id) {\n            throw new Error('No id for composition passed.');\n        }\n        validateCompositionId(id);\n        validateDefaultAndInputProps(defaultProps, 'defaultProps', id);\n        registerComposition({\n            durationInFrames: durationInFrames !== null && durationInFrames !== void 0 ? durationInFrames : undefined,\n            fps: fps !== null && fps !== void 0 ? fps : undefined,\n            height: height !== null && height !== void 0 ? height : undefined,\n            width: width !== null && width !== void 0 ? width : undefined,\n            id,\n            folderName,\n            component: lazy,\n            defaultProps: defaultProps,\n            nonce,\n            parentFolderName: parentName,\n            schema: schema !== null && schema !== void 0 ? schema : null,\n            calculateMetadata: (_a = compProps.calculateMetadata) !== null && _a !== void 0 ? _a : null,\n        });\n        return () => {\n            unregisterComposition(id);\n        };\n    }, [\n        durationInFrames,\n        fps,\n        height,\n        lazy,\n        id,\n        folderName,\n        defaultProps,\n        registerComposition,\n        unregisterComposition,\n        width,\n        nonce,\n        parentName,\n        schema,\n        compProps.calculateMetadata,\n    ]);\n    const resolved = useResolvedVideoConfig(id);\n    if (environment.isStudio && video && video.component === lazy) {\n        const Comp = lazy;\n        if (resolved === null || resolved.type !== 'success') {\n            return null;\n        }\n        return (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal)((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ClipComposition, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CanUseRemotionHooksProvider, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, { fallback: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Loading, {}), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Comp, { ...((_a = resolved.result.props) !== null && _a !== void 0 ? _a : {}) }) }) }) }), portalNode());\n    }\n    if (environment.isRendering && video && video.component === lazy) {\n        const Comp = lazy;\n        if (resolved === null || resolved.type !== 'success') {\n            return null;\n        }\n        return (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal)((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CanUseRemotionHooksProvider, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, { fallback: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Fallback, {}), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Comp, { ...((_b = resolved.result.props) !== null && _b !== void 0 ? _b : {}) }) }) }), portalNode());\n    }\n    return null;\n};\n\n// Taken from https://github.com/facebook/react-native/blob/0b9ea60b4fee8cacc36e7160e31b91fc114dbc0d/Libraries/Animated/src/bezier.js\nconst NEWTON_ITERATIONS = 4;\nconst NEWTON_MIN_SLOPE = 0.001;\nconst SUBDIVISION_PRECISION = 0.0000001;\nconst SUBDIVISION_MAX_ITERATIONS = 10;\nconst kSplineTableSize = 11;\nconst kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nconst float32ArraySupported = typeof Float32Array === 'function';\nfunction a(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\nfunction b(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n}\nfunction c(aA1) {\n    return 3.0 * aA1;\n}\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT, aA1, aA2) {\n    return ((a(aA1, aA2) * aT + b(aA1, aA2)) * aT + c(aA1)) * aT;\n}\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT, aA1, aA2) {\n    return 3.0 * a(aA1, aA2) * aT * aT + 2.0 * b(aA1, aA2) * aT + c(aA1);\n}\nfunction binarySubdivide({ aX, _aA, _aB, mX1, mX2, }) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    let aA = _aA;\n    let aB = _aB;\n    do {\n        currentT = aA + (aB - aA) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\n        if (currentX > 0.0) {\n            aB = currentT;\n        }\n        else {\n            aA = currentT;\n        }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION &&\n        ++i < SUBDIVISION_MAX_ITERATIONS);\n    return currentT;\n}\nfunction newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {\n    let aGuessT = _aGuessT;\n    for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n        const currentSlope = getSlope(aGuessT, mX1, mX2);\n        if (currentSlope === 0.0) {\n            return aGuessT;\n        }\n        const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n        aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n}\nfunction bezier(mX1, mY1, mX2, mY2) {\n    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n        throw new Error('bezier x values must be in [0, 1] range');\n    }\n    // Precompute samples table\n    const sampleValues = float32ArraySupported\n        ? new Float32Array(kSplineTableSize)\n        : new Array(kSplineTableSize);\n    if (mX1 !== mY1 || mX2 !== mY2) {\n        for (let i = 0; i < kSplineTableSize; ++i) {\n            sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n        }\n    }\n    function getTForX(aX) {\n        let intervalStart = 0.0;\n        let currentSample = 1;\n        const lastSample = kSplineTableSize - 1;\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n        }\n        --currentSample;\n        // Interpolate to provide an initial guess for t\n        const dist = (aX - sampleValues[currentSample]) /\n            (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        const guessForT = intervalStart + dist * kSampleStepSize;\n        const initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        }\n        if (initialSlope === 0.0) {\n            return guessForT;\n        }\n        return binarySubdivide({\n            aX,\n            _aA: intervalStart,\n            _aB: intervalStart + kSampleStepSize,\n            mX1,\n            mX2,\n        });\n    }\n    return function (x) {\n        if (mX1 === mY1 && mX2 === mY2) {\n            return x; // linear\n        }\n        // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n        if (x === 0) {\n            return 0;\n        }\n        if (x === 1) {\n            return 1;\n        }\n        return calcBezier(getTForX(x), mY1, mY2);\n    };\n}\n\n// Taken from https://github.com/facebook/react-native/blob/0b9ea60b4fee8cacc36e7160e31b91fc114dbc0d/Libraries/Animated/src/Easing.js\n/**\n * @description The Easing module implements common easing functions. You can use it with the interpolate() API.\n * @see [Documentation](https://www.remotion.dev/docs/easing)\n */\nclass Easing {\n    static step0(n) {\n        return n > 0 ? 1 : 0;\n    }\n    static step1(n) {\n        return n >= 1 ? 1 : 0;\n    }\n    static linear(t) {\n        return t;\n    }\n    static ease(t) {\n        return Easing.bezier(0.42, 0, 1, 1)(t);\n    }\n    static quad(t) {\n        return t * t;\n    }\n    static cubic(t) {\n        return t * t * t;\n    }\n    static poly(n) {\n        return (t) => t ** n;\n    }\n    static sin(t) {\n        return 1 - Math.cos((t * Math.PI) / 2);\n    }\n    static circle(t) {\n        return 1 - Math.sqrt(1 - t * t);\n    }\n    static exp(t) {\n        return 2 ** (10 * (t - 1));\n    }\n    static elastic(bounciness = 1) {\n        const p = bounciness * Math.PI;\n        return (t) => 1 - Math.cos((t * Math.PI) / 2) ** 3 * Math.cos(t * p);\n    }\n    static back(s = 1.70158) {\n        return (t) => t * t * ((s + 1) * t - s);\n    }\n    static bounce(t) {\n        if (t < 1 / 2.75) {\n            return 7.5625 * t * t;\n        }\n        if (t < 2 / 2.75) {\n            const t2_ = t - 1.5 / 2.75;\n            return 7.5625 * t2_ * t2_ + 0.75;\n        }\n        if (t < 2.5 / 2.75) {\n            const t2_ = t - 2.25 / 2.75;\n            return 7.5625 * t2_ * t2_ + 0.9375;\n        }\n        const t2 = t - 2.625 / 2.75;\n        return 7.5625 * t2 * t2 + 0.984375;\n    }\n    static bezier(x1, y1, x2, y2) {\n        return bezier(x1, y1, x2, y2);\n    }\n    static in(easing) {\n        return easing;\n    }\n    static out(easing) {\n        return (t) => 1 - easing(1 - t);\n    }\n    static inOut(easing) {\n        return (t) => {\n            if (t < 0.5) {\n                return easing(t * 2) / 2;\n            }\n            return 1 - easing((1 - t) * 2) / 2;\n        };\n    }\n}\n\n/**\n * @description This method freezes all of its children to the frame that you specify as a prop\n * @see [Documentation](https://www.remotion.dev/docs/freeze)\n */\nconst Freeze = ({ frame, children }) => {\n    const videoConfig = useVideoConfig();\n    if (typeof frame === 'undefined') {\n        throw new Error(`The <Freeze /> component requires a 'frame' prop, but none was passed.`);\n    }\n    if (typeof frame !== 'number') {\n        throw new Error(`The 'frame' prop of <Freeze /> must be a number, but is of type ${typeof frame}`);\n    }\n    if (Number.isNaN(frame)) {\n        throw new Error(`The 'frame' prop of <Freeze /> must be a real number, but it is NaN.`);\n    }\n    if (!Number.isFinite(frame)) {\n        throw new Error(`The 'frame' prop of <Freeze /> must be a finite number, but it is ${frame}.`);\n    }\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);\n    const value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            ...context,\n            playing: false,\n            imperativePlaying: {\n                current: false,\n            },\n            frame: {\n                [videoConfig.id]: frame,\n            },\n        };\n    }, [context, frame, videoConfig.id]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(TimelineContext.Provider, { value: value, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceContext.Provider, { value: null, children: children }) }));\n};\n\nlet warnedServer = false;\nlet warnedPlayer = false;\nconst warnServerOnce = () => {\n    if (warnedServer) {\n        return;\n    }\n    warnedServer = true;\n    console.warn('Called getStaticFiles() on the server. The API is only available in the browser. An empty array was returned.');\n};\nconst warnPlayerOnce = () => {\n    if (warnedPlayer) {\n        return;\n    }\n    warnedPlayer = true;\n    console.warn('Called getStaticFiles() while using the Remotion Player. The API is only available while using the Remotion Studio. An empty array was returned.');\n};\n/**\n * @description The function array containing all files in the public/ folder. You can reference them by using staticFile().\n * @see [Documentation](https://www.remotion.dev/docs/getstaticfiles)\n */\nconst getStaticFiles = () => {\n    if (typeof document === 'undefined') {\n        warnServerOnce();\n        return [];\n    }\n    if (window.remotion_isPlayer) {\n        warnPlayerOnce();\n        return [];\n    }\n    return window.remotion_staticFiles;\n};\n\nconst IFrameRefForwarding = ({ onLoad, onError, ...props }, ref) => {\n    const [handle] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => delayRender(`Loading <IFrame> with source ${props.src}`));\n    const didLoad = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {\n        continueRender(handle);\n        onLoad === null || onLoad === void 0 ? void 0 : onLoad(e);\n    }, [handle, onLoad]);\n    const didGetError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {\n        continueRender(handle);\n        if (onError) {\n            onError(e);\n        }\n        else {\n            console.error('Error loading iframe:', e, 'Handle the event using the onError() prop to make this message disappear.');\n        }\n    }, [handle, onError]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"iframe\", { ...props, ref: ref, onError: didGetError, onLoad: didLoad });\n};\n/**\n * @description The <IFrame /> can be used like a regular <iframe> HTML tag.\n * @see [Documentation](https://www.remotion.dev/docs/iframe)\n */\nconst IFrame = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(IFrameRefForwarding);\n\nfunction exponentialBackoff(errorCount) {\n    return 1000 * 2 ** (errorCount - 1);\n}\nconst ImgRefForwarding = ({ onError, maxRetries = 2, src, ...props }, ref) => {\n    const imageRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const errors = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    if (!src) {\n        throw new Error('No \"src\" prop was passed to <Img>.');\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => {\n        return imageRef.current;\n    }, []);\n    const actualSrc = usePreload(src);\n    const retryIn = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((timeout) => {\n        if (!imageRef.current) {\n            return;\n        }\n        const currentSrc = imageRef.current.src;\n        setTimeout(() => {\n            var _a;\n            if (!imageRef.current) {\n                // Component has been unmounted, do not retry\n                return;\n            }\n            const newSrc = (_a = imageRef.current) === null || _a === void 0 ? void 0 : _a.src;\n            if (newSrc !== currentSrc) {\n                // src has changed, do not retry\n                return;\n            }\n            imageRef.current.removeAttribute('src');\n            imageRef.current.setAttribute('src', newSrc);\n        }, timeout);\n    }, []);\n    const didGetError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        if (!errors.current) {\n            return;\n        }\n        errors.current[(_a = imageRef.current) === null || _a === void 0 ? void 0 : _a.src] =\n            ((_c = errors.current[(_b = imageRef.current) === null || _b === void 0 ? void 0 : _b.src]) !== null && _c !== void 0 ? _c : 0) + 1;\n        if (onError &&\n            ((_e = errors.current[(_d = imageRef.current) === null || _d === void 0 ? void 0 : _d.src]) !== null && _e !== void 0 ? _e : 0) > maxRetries) {\n            onError(e);\n            return;\n        }\n        if (((_g = errors.current[(_f = imageRef.current) === null || _f === void 0 ? void 0 : _f.src]) !== null && _g !== void 0 ? _g : 0) <= maxRetries) {\n            const backoff = exponentialBackoff((_j = errors.current[(_h = imageRef.current) === null || _h === void 0 ? void 0 : _h.src]) !== null && _j !== void 0 ? _j : 0);\n            console.warn(`Could not load image with source ${(_k = imageRef.current) === null || _k === void 0 ? void 0 : _k.src}, retrying again in ${backoff}ms`);\n            retryIn(backoff);\n            return;\n        }\n        cancelRender('Error loading image with src: ' + ((_l = imageRef.current) === null || _l === void 0 ? void 0 : _l.src));\n    }, [maxRetries, onError, retryIn]);\n    if (typeof window !== 'undefined') {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n            if (false) {}\n            const newHandle = delayRender('Loading <Img> with src=' + actualSrc);\n            const { current } = imageRef;\n            const onComplete = () => {\n                var _a, _b, _c, _d;\n                if (((_b = errors.current[(_a = imageRef.current) === null || _a === void 0 ? void 0 : _a.src]) !== null && _b !== void 0 ? _b : 0) > 0) {\n                    delete errors.current[(_c = imageRef.current) === null || _c === void 0 ? void 0 : _c.src];\n                    console.info(`Retry successful - ${(_d = imageRef.current) === null || _d === void 0 ? void 0 : _d.src} is now loaded`);\n                }\n                continueRender(newHandle);\n            };\n            const didLoad = () => {\n                onComplete();\n            };\n            if (current === null || current === void 0 ? void 0 : current.complete) {\n                onComplete();\n            }\n            else {\n                current === null || current === void 0 ? void 0 : current.addEventListener('load', didLoad, { once: true });\n            }\n            // If tag gets unmounted, clear pending handles because image is not going to load\n            return () => {\n                current === null || current === void 0 ? void 0 : current.removeEventListener('load', didLoad);\n                continueRender(newHandle);\n            };\n        }, [actualSrc]);\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"img\", { ...props, ref: imageRef, src: actualSrc, onError: didGetError }));\n};\n/**\n * @description Works just like a regular HTML img tag. When you use the <Img> tag, Remotion will ensure that the image is loaded before rendering the frame.\n * @see [Documentation](https://www.remotion.dev/docs/img)\n */\nconst Img = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(ImgRefForwarding);\n\nconst compositionsRef = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\nconst CompositionManagerProvider = ({ children, numberOfAudioTags }) => {\n    var _a;\n    // Wontfix, expected to have\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const [compositions, setCompositions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const currentcompositionsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(compositions);\n    const [folders, setFolders] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [canvasContent, setCanvasContent] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [currentCompositionMetadata, setCurrentCompositionMetadata] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const updateCompositions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    updateComps) => {\n        setCompositions((comps) => {\n            const updated = updateComps(comps);\n            currentcompositionsRef.current = updated;\n            return updated;\n        });\n    }, []);\n    const registerComposition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((comp) => {\n        updateCompositions((comps) => {\n            if (comps.find((c) => c.id === comp.id)) {\n                throw new Error(`Multiple composition with id ${comp.id} are registered.`);\n            }\n            const value = [...comps, comp]\n                .slice()\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                .sort((a, b) => a.nonce - b.nonce);\n            return value;\n        });\n    }, [updateCompositions]);\n    const unregisterComposition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id) => {\n        setCompositions((comps) => {\n            return comps.filter((c) => c.id !== id);\n        });\n    }, []);\n    const registerFolder = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((name, parent) => {\n        setFolders((prevFolders) => {\n            return [\n                ...prevFolders,\n                {\n                    name,\n                    parent,\n                },\n            ];\n        });\n    }, []);\n    const unregisterFolder = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((name, parent) => {\n        setFolders((prevFolders) => {\n            return prevFolders.filter((p) => !(p.name === name && p.parent === parent));\n        });\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(compositionsRef, () => {\n        return {\n            getCompositions: () => currentcompositionsRef.current,\n        };\n    }, []);\n    const composition = compositions.find((c) => (canvasContent === null || canvasContent === void 0 ? void 0 : canvasContent.type) === 'composition'\n        ? c.id === canvasContent.compositionId\n        : null);\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            compositions,\n            registerComposition,\n            unregisterComposition,\n            folders,\n            registerFolder,\n            unregisterFolder,\n            currentCompositionMetadata,\n            setCurrentCompositionMetadata,\n            canvasContent,\n            setCanvasContent,\n        };\n    }, [\n        compositions,\n        registerComposition,\n        unregisterComposition,\n        folders,\n        registerFolder,\n        unregisterFolder,\n        currentCompositionMetadata,\n        canvasContent,\n        setCanvasContent,\n    ]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CompositionManager.Provider, { value: contextValue, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceManagerProvider, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RenderAssetManagerProvider, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ResolveCompositionConfig, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SharedAudioContextProvider, { numberOfAudioTags: numberOfAudioTags, component: (_a = composition === null || composition === void 0 ? void 0 : composition.component) !== null && _a !== void 0 ? _a : null, children: children }) }) }) }) }));\n};\n\nconst injected = {};\nconst injectCSS = (css) => {\n    // Skip in node\n    if (typeof document === 'undefined') {\n        return;\n    }\n    if (injected[css]) {\n        return;\n    }\n    const head = document.head || document.getElementsByTagName('head')[0];\n    const style = document.createElement('style');\n    style.appendChild(document.createTextNode(css));\n    head.prepend(style);\n    injected[css] = true;\n};\nconst OFFTHREAD_VIDEO_CLASS_NAME = '__remotion_offthreadvideo';\nconst makeDefaultCSS = (scope, backgroundColor) => {\n    if (!scope) {\n        return `\n    * {\n      box-sizing: border-box;\n    }\n    body {\n      margin: 0;\n\t    background-color: ${backgroundColor};\n    }\n    .${OFFTHREAD_VIDEO_CLASS_NAME} {\n      object-fit: contain;\n    }\n    `;\n    }\n    return `\n    ${scope} * {\n      box-sizing: border-box;\n    }\n    ${scope} *:-webkit-full-screen {\n      width: 100%;\n      height: 100%;\n    }\n    ${scope} .${OFFTHREAD_VIDEO_CLASS_NAME} {\n      object-fit: contain;\n    }\n  `;\n};\n\nvar CSSUtils = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    injectCSS: injectCSS,\n    OFFTHREAD_VIDEO_CLASS_NAME: OFFTHREAD_VIDEO_CLASS_NAME,\n    makeDefaultCSS: makeDefaultCSS\n});\n\nconst REMOTION_STUDIO_CONTAINER_ELEMENT = '__remotion-studio-container';\nconst getPreviewDomElement = () => {\n    return document.getElementById(REMOTION_STUDIO_CONTAINER_ELEMENT);\n};\n\n/**\n * Copied from:\n * https://github.com/software-mansion/react-native-reanimated/blob/master/src/reanimated2/Colors.ts\n */\n// var INTEGER = '[-+]?\\\\d+';\nconst NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\nconst PERCENTAGE = NUMBER + '%';\nfunction call(...args) {\n    return '\\\\(\\\\s*(' + args.join(')\\\\s*,\\\\s*(') + ')\\\\s*\\\\)';\n}\nfunction getMatchers() {\n    const cachedMatchers = {\n        rgb: undefined,\n        rgba: undefined,\n        hsl: undefined,\n        hsla: undefined,\n        hex3: undefined,\n        hex4: undefined,\n        hex5: undefined,\n        hex6: undefined,\n        hex8: undefined,\n    };\n    if (cachedMatchers.rgb === undefined) {\n        cachedMatchers.rgb = new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER));\n        cachedMatchers.rgba = new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER));\n        cachedMatchers.hsl = new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE));\n        cachedMatchers.hsla = new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\n        cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n        cachedMatchers.hex4 =\n            /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n        cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;\n        cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;\n    }\n    return cachedMatchers;\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0) {\n        t += 1;\n    }\n    if (t > 1) {\n        t -= 1;\n    }\n    if (t < 1 / 6) {\n        return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n        return q;\n    }\n    if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n}\nfunction hslToRgb(h, s, l) {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    const r = hue2rgb(p, q, h + 1 / 3);\n    const g = hue2rgb(p, q, h);\n    const b = hue2rgb(p, q, h - 1 / 3);\n    return ((Math.round(r * 255) << 24) |\n        (Math.round(g * 255) << 16) |\n        (Math.round(b * 255) << 8));\n}\nfunction parse255(str) {\n    const int = Number.parseInt(str, 10);\n    if (int < 0) {\n        return 0;\n    }\n    if (int > 255) {\n        return 255;\n    }\n    return int;\n}\nfunction parse360(str) {\n    const int = Number.parseFloat(str);\n    return (((int % 360) + 360) % 360) / 360;\n}\nfunction parse1(str) {\n    const num = Number.parseFloat(str);\n    if (num < 0) {\n        return 0;\n    }\n    if (num > 1) {\n        return 255;\n    }\n    return Math.round(num * 255);\n}\nfunction parsePercentage(str) {\n    // parseFloat conveniently ignores the final %\n    const int = Number.parseFloat(str);\n    if (int < 0) {\n        return 0;\n    }\n    if (int > 100) {\n        return 1;\n    }\n    return int / 100;\n}\nconst names = {\n    transparent: 0x00000000,\n    // http://www.w3.org/TR/css3-color/#svg-color\n    aliceblue: 0xf0f8ffff,\n    antiquewhite: 0xfaebd7ff,\n    aqua: 0x00ffffff,\n    aquamarine: 0x7fffd4ff,\n    azure: 0xf0ffffff,\n    beige: 0xf5f5dcff,\n    bisque: 0xffe4c4ff,\n    black: 0x000000ff,\n    blanchedalmond: 0xffebcdff,\n    blue: 0x0000ffff,\n    blueviolet: 0x8a2be2ff,\n    brown: 0xa52a2aff,\n    burlywood: 0xdeb887ff,\n    burntsienna: 0xea7e5dff,\n    cadetblue: 0x5f9ea0ff,\n    chartreuse: 0x7fff00ff,\n    chocolate: 0xd2691eff,\n    coral: 0xff7f50ff,\n    cornflowerblue: 0x6495edff,\n    cornsilk: 0xfff8dcff,\n    crimson: 0xdc143cff,\n    cyan: 0x00ffffff,\n    darkblue: 0x00008bff,\n    darkcyan: 0x008b8bff,\n    darkgoldenrod: 0xb8860bff,\n    darkgray: 0xa9a9a9ff,\n    darkgreen: 0x006400ff,\n    darkgrey: 0xa9a9a9ff,\n    darkkhaki: 0xbdb76bff,\n    darkmagenta: 0x8b008bff,\n    darkolivegreen: 0x556b2fff,\n    darkorange: 0xff8c00ff,\n    darkorchid: 0x9932ccff,\n    darkred: 0x8b0000ff,\n    darksalmon: 0xe9967aff,\n    darkseagreen: 0x8fbc8fff,\n    darkslateblue: 0x483d8bff,\n    darkslategray: 0x2f4f4fff,\n    darkslategrey: 0x2f4f4fff,\n    darkturquoise: 0x00ced1ff,\n    darkviolet: 0x9400d3ff,\n    deeppink: 0xff1493ff,\n    deepskyblue: 0x00bfffff,\n    dimgray: 0x696969ff,\n    dimgrey: 0x696969ff,\n    dodgerblue: 0x1e90ffff,\n    firebrick: 0xb22222ff,\n    floralwhite: 0xfffaf0ff,\n    forestgreen: 0x228b22ff,\n    fuchsia: 0xff00ffff,\n    gainsboro: 0xdcdcdcff,\n    ghostwhite: 0xf8f8ffff,\n    gold: 0xffd700ff,\n    goldenrod: 0xdaa520ff,\n    gray: 0x808080ff,\n    green: 0x008000ff,\n    greenyellow: 0xadff2fff,\n    grey: 0x808080ff,\n    honeydew: 0xf0fff0ff,\n    hotpink: 0xff69b4ff,\n    indianred: 0xcd5c5cff,\n    indigo: 0x4b0082ff,\n    ivory: 0xfffff0ff,\n    khaki: 0xf0e68cff,\n    lavender: 0xe6e6faff,\n    lavenderblush: 0xfff0f5ff,\n    lawngreen: 0x7cfc00ff,\n    lemonchiffon: 0xfffacdff,\n    lightblue: 0xadd8e6ff,\n    lightcoral: 0xf08080ff,\n    lightcyan: 0xe0ffffff,\n    lightgoldenrodyellow: 0xfafad2ff,\n    lightgray: 0xd3d3d3ff,\n    lightgreen: 0x90ee90ff,\n    lightgrey: 0xd3d3d3ff,\n    lightpink: 0xffb6c1ff,\n    lightsalmon: 0xffa07aff,\n    lightseagreen: 0x20b2aaff,\n    lightskyblue: 0x87cefaff,\n    lightslategray: 0x778899ff,\n    lightslategrey: 0x778899ff,\n    lightsteelblue: 0xb0c4deff,\n    lightyellow: 0xffffe0ff,\n    lime: 0x00ff00ff,\n    limegreen: 0x32cd32ff,\n    linen: 0xfaf0e6ff,\n    magenta: 0xff00ffff,\n    maroon: 0x800000ff,\n    mediumaquamarine: 0x66cdaaff,\n    mediumblue: 0x0000cdff,\n    mediumorchid: 0xba55d3ff,\n    mediumpurple: 0x9370dbff,\n    mediumseagreen: 0x3cb371ff,\n    mediumslateblue: 0x7b68eeff,\n    mediumspringgreen: 0x00fa9aff,\n    mediumturquoise: 0x48d1ccff,\n    mediumvioletred: 0xc71585ff,\n    midnightblue: 0x191970ff,\n    mintcream: 0xf5fffaff,\n    mistyrose: 0xffe4e1ff,\n    moccasin: 0xffe4b5ff,\n    navajowhite: 0xffdeadff,\n    navy: 0x000080ff,\n    oldlace: 0xfdf5e6ff,\n    olive: 0x808000ff,\n    olivedrab: 0x6b8e23ff,\n    orange: 0xffa500ff,\n    orangered: 0xff4500ff,\n    orchid: 0xda70d6ff,\n    palegoldenrod: 0xeee8aaff,\n    palegreen: 0x98fb98ff,\n    paleturquoise: 0xafeeeeff,\n    palevioletred: 0xdb7093ff,\n    papayawhip: 0xffefd5ff,\n    peachpuff: 0xffdab9ff,\n    peru: 0xcd853fff,\n    pink: 0xffc0cbff,\n    plum: 0xdda0ddff,\n    powderblue: 0xb0e0e6ff,\n    purple: 0x800080ff,\n    rebeccapurple: 0x663399ff,\n    red: 0xff0000ff,\n    rosybrown: 0xbc8f8fff,\n    royalblue: 0x4169e1ff,\n    saddlebrown: 0x8b4513ff,\n    salmon: 0xfa8072ff,\n    sandybrown: 0xf4a460ff,\n    seagreen: 0x2e8b57ff,\n    seashell: 0xfff5eeff,\n    sienna: 0xa0522dff,\n    silver: 0xc0c0c0ff,\n    skyblue: 0x87ceebff,\n    slateblue: 0x6a5acdff,\n    slategray: 0x708090ff,\n    slategrey: 0x708090ff,\n    snow: 0xfffafaff,\n    springgreen: 0x00ff7fff,\n    steelblue: 0x4682b4ff,\n    tan: 0xd2b48cff,\n    teal: 0x008080ff,\n    thistle: 0xd8bfd8ff,\n    tomato: 0xff6347ff,\n    turquoise: 0x40e0d0ff,\n    violet: 0xee82eeff,\n    wheat: 0xf5deb3ff,\n    white: 0xffffffff,\n    whitesmoke: 0xf5f5f5ff,\n    yellow: 0xffff00ff,\n    yellowgreen: 0x9acd32ff,\n};\nfunction normalizeColor(color) {\n    const matchers = getMatchers();\n    let match;\n    // Ordered based on occurrences on Facebook codebase\n    if (matchers.hex6) {\n        if ((match = matchers.hex6.exec(color))) {\n            return Number.parseInt(match[1] + 'ff', 16) >>> 0;\n        }\n    }\n    if (names[color] !== undefined) {\n        return names[color];\n    }\n    if (matchers.rgb) {\n        if ((match = matchers.rgb.exec(color))) {\n            return (\n            // b\n            ((parse255(match[1]) << 24) | // r\n                (parse255(match[2]) << 16) | // g\n                (parse255(match[3]) << 8) |\n                0x000000ff) >>> // a\n                0);\n        }\n    }\n    if (matchers.rgba) {\n        if ((match = matchers.rgba.exec(color))) {\n            return (\n            // b\n            ((parse255(match[1]) << 24) | // r\n                (parse255(match[2]) << 16) | // g\n                (parse255(match[3]) << 8) |\n                parse1(match[4])) >>> // a\n                0);\n        }\n    }\n    if (matchers.hex3) {\n        if ((match = matchers.hex3.exec(color))) {\n            return (Number.parseInt(match[1] +\n                match[1] + // r\n                match[2] +\n                match[2] + // g\n                match[3] +\n                match[3] + // b\n                'ff', // a\n            16) >>> 0);\n        }\n    }\n    // https://drafts.csswg.org/css-color-4/#hex-notation\n    if (matchers.hex8) {\n        if ((match = matchers.hex8.exec(color))) {\n            return Number.parseInt(match[1], 16) >>> 0;\n        }\n    }\n    if (matchers.hex4) {\n        if ((match = matchers.hex4.exec(color))) {\n            return (Number.parseInt(match[1] +\n                match[1] + // r\n                match[2] +\n                match[2] + // g\n                match[3] +\n                match[3] + // b\n                match[4] +\n                match[4], // a\n            16) >>> 0);\n        }\n    }\n    if (matchers.hsl) {\n        if ((match = matchers.hsl.exec(color))) {\n            return ((hslToRgb(parse360(match[1]), // h\n            parsePercentage(match[2]), // s\n            parsePercentage(match[3])) |\n                0x000000ff) >>> // a\n                0);\n        }\n    }\n    if (matchers.hsla) {\n        if ((match = matchers.hsla.exec(color))) {\n            return ((hslToRgb(parse360(match[1]), // h\n            parsePercentage(match[2]), // s\n            parsePercentage(match[3])) |\n                parse1(match[4])) >>> // a\n                0);\n        }\n    }\n    throw new Error(`invalid color string ${color} provided`);\n}\nconst opacity = (c) => {\n    return ((c >> 24) & 255) / 255;\n};\nconst red = (c) => {\n    return (c >> 16) & 255;\n};\nconst green = (c) => {\n    return (c >> 8) & 255;\n};\nconst blue = (c) => {\n    return c & 255;\n};\nconst rgbaColor = (r, g, b, alpha) => {\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n};\nfunction processColor(color) {\n    const normalizedColor = normalizeColor(color);\n    return ((normalizedColor << 24) | (normalizedColor >>> 8)) >>> 0; // argb\n}\nconst interpolateColorsRGB = (value, inputRange, colors) => {\n    const [r, g, b, a] = [red, green, blue, opacity].map((f) => {\n        const unrounded = interpolate(value, inputRange, colors.map((c) => f(c)), {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n        });\n        if (f === opacity) {\n            return Number(unrounded.toFixed(3));\n        }\n        return Math.round(unrounded);\n    });\n    return rgbaColor(r, g, b, a);\n};\n/**\n * @description This function allows you to map a range of values to colors using a concise syntax.\n * @see [Documentation](https://www.remotion.dev/docs/interpolate-colors)\n */\nconst interpolateColors = (input, inputRange, outputRange) => {\n    if (typeof input === 'undefined') {\n        throw new TypeError('input can not be undefined');\n    }\n    if (typeof inputRange === 'undefined') {\n        throw new TypeError('inputRange can not be undefined');\n    }\n    if (typeof outputRange === 'undefined') {\n        throw new TypeError('outputRange can not be undefined');\n    }\n    if (inputRange.length !== outputRange.length) {\n        throw new TypeError('inputRange (' +\n            inputRange.length +\n            ' values provided) and outputRange (' +\n            outputRange.length +\n            ' values provided) must have the same length');\n    }\n    const processedOutputRange = outputRange.map((c) => processColor(c));\n    return interpolateColorsRGB(input, inputRange, processedOutputRange);\n};\n\nlet Root = null;\nlet listeners = [];\n/**\n * @description This function registers the root component of the Remotion project\n * @see [Documentation](https://www.remotion.dev/docs/register-root)\n */\nconst registerRoot = (comp) => {\n    if (!comp) {\n        throw new Error(`You must pass a React component to registerRoot(), but ${JSON.stringify(comp)} was passed.`);\n    }\n    if (Root) {\n        throw new Error('registerRoot() was called more than once.');\n    }\n    Root = comp;\n    listeners.forEach((l) => {\n        l(comp);\n    });\n};\nconst getRoot = () => {\n    return Root;\n};\nconst waitForRoot = (fn) => {\n    if (Root) {\n        fn(Root);\n        return () => undefined;\n    }\n    listeners.push(fn);\n    return () => {\n        listeners = listeners.filter((l) => l !== fn);\n    };\n};\n\nconst RemotionRoot = ({ children, numberOfAudioTags }) => {\n    const [remotionRootId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => String(random(null)));\n    const [frame, setFrame] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const [playing, setPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const imperativePlaying = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const [fastRefreshes, setFastRefreshes] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [playbackRate, setPlaybackRate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n    const audioAndVideoTags = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    if (typeof window !== 'undefined') {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n            window.remotion_setFrame = (f, composition) => {\n                const id = delayRender(`Setting the current frame to ${f}`);\n                setFrame((s) => ({\n                    ...s,\n                    [composition]: f,\n                }));\n                requestAnimationFrame(() => continueRender(id));\n            };\n            window.remotion_isPlayer = false;\n        }, []);\n    }\n    const timelineContextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            frame,\n            playing,\n            imperativePlaying,\n            rootId: remotionRootId,\n            playbackRate,\n            setPlaybackRate,\n            audioAndVideoTags,\n        };\n    }, [frame, playbackRate, playing, remotionRootId]);\n    const setTimelineContextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return {\n            setFrame,\n            setPlaying,\n        };\n    }, []);\n    const nonceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        let counter = 0;\n        return {\n            getNonce: () => counter++,\n            fastRefreshes,\n        };\n    }, [fastRefreshes]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (true) {\n            if (__webpack_module__.hot) {\n                __webpack_module__.hot.addStatusHandler((status) => {\n                    if (status === 'idle') {\n                        setFastRefreshes((i) => i + 1);\n                    }\n                });\n            }\n        }\n    }, []);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(NonceContext.Provider, { value: nonceContext, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(TimelineContext.Provider, { value: timelineContextValue, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SetTimelineContext.Provider, { value: setTimelineContextValue, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EditorPropsProvider, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PrefetchProvider, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(NativeLayersProvider, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CompositionManagerProvider, { numberOfAudioTags: numberOfAudioTags, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DurationsContextProvider, { children: children }) }) }) }) }) }) }) }));\n};\n\nconst getEnvVariables = () => {\n    if (getRemotionEnvironment().isRendering) {\n        const param = window.remotion_envVariables;\n        if (!param) {\n            return {};\n        }\n        return { ...JSON.parse(param), NODE_ENV: \"development\" };\n    }\n    if (getRemotionEnvironment().isStudio) {\n        // For the Studio, we already set the environment variables in index-html.ts.\n        // We just add NODE_ENV here.\n        return {\n            NODE_ENV: 'development',\n        };\n    }\n    throw new Error('Can only call getEnvVariables() if environment is `rendering` or `preview`');\n};\nconst setupEnvVariables = () => {\n    const env = getEnvVariables();\n    if (!window.process) {\n        window.process = {};\n    }\n    if (!window.process.env) {\n        window.process.env = {};\n    }\n    Object.keys(env).forEach((key) => {\n        window.process.env[key] = env[key];\n    });\n};\n\nconst validateFrame = ({ allowFloats, durationInFrames, frame, }) => {\n    if (typeof frame === 'undefined') {\n        throw new TypeError(`Argument missing for parameter \"frame\"`);\n    }\n    if (typeof frame !== 'number') {\n        throw new TypeError(`Argument passed for \"frame\" is not a number: ${frame}`);\n    }\n    if (!Number.isFinite(frame)) {\n        throw new RangeError(`Frame ${frame} is not finite`);\n    }\n    if (frame % 1 !== 0 && !allowFloats) {\n        throw new RangeError(`Argument for frame must be an integer, but got ${frame}`);\n    }\n    if (frame < 0 && frame < -durationInFrames) {\n        throw new RangeError(`Cannot use frame ${frame}: Duration of composition is ${durationInFrames}, therefore the lowest frame that can be rendered is ${-durationInFrames}`);\n    }\n    if (frame > durationInFrames - 1) {\n        throw new RangeError(`Cannot use frame ${frame}: Duration of composition is ${durationInFrames}, therefore the highest frame that can be rendered is ${durationInFrames - 1}`);\n    }\n};\n\nfunction useRemotionContexts() {\n    const compositionManagerCtx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(CompositionManager);\n    const timelineContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(TimelineContext);\n    const setTimelineContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(SetTimelineContext);\n    const sequenceContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(SequenceContext);\n    const nonceContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(NonceContext);\n    const canUseRemotionHooksContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(CanUseRemotionHooks);\n    const nativeLayersContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(NativeLayersContext);\n    const preloadContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(PreloadContext);\n    const resolveCompositionContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ResolveCompositionContext);\n    const renderAssetManagerContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(RenderAssetManager);\n    const sequenceManagerContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(SequenceManager);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({\n        compositionManagerCtx,\n        timelineContext,\n        setTimelineContext,\n        sequenceContext,\n        nonceContext,\n        canUseRemotionHooksContext,\n        nativeLayersContext,\n        preloadContext,\n        resolveCompositionContext,\n        renderAssetManagerContext,\n        sequenceManagerContext,\n    }), [\n        compositionManagerCtx,\n        nonceContext,\n        sequenceContext,\n        setTimelineContext,\n        timelineContext,\n        canUseRemotionHooksContext,\n        nativeLayersContext,\n        preloadContext,\n        resolveCompositionContext,\n        renderAssetManagerContext,\n        sequenceManagerContext,\n    ]);\n}\nconst RemotionContextProvider = (props) => {\n    const { children, contexts } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CanUseRemotionHooks.Provider, { value: contexts.canUseRemotionHooksContext, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(NonceContext.Provider, { value: contexts.nonceContext, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(NativeLayersContext.Provider, { value: contexts.nativeLayersContext, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PreloadContext.Provider, { value: contexts.preloadContext, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CompositionManager.Provider, { value: contexts.compositionManagerCtx, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceManager.Provider, { value: contexts.sequenceManagerContext, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RenderAssetManager.Provider, { value: contexts.renderAssetManagerContext, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ResolveCompositionContext.Provider, { value: contexts.resolveCompositionContext, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(TimelineContext.Provider, { value: contexts.timelineContext, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SetTimelineContext.Provider, { value: contexts.setTimelineContext, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceContext.Provider, { value: contexts.sequenceContext, children: children }) }) }) }) }) }) }) }) }) }) }));\n};\n\n// Mark them as Internals so use don't assume this is public\n// API and are less likely to use it\nconst Internals = {\n    useUnsafeVideoConfig,\n    Timeline: TimelinePosition,\n    CompositionManager,\n    SequenceManager,\n    RemotionRoot,\n    useVideo,\n    getRoot,\n    useMediaVolumeState,\n    useMediaMutedState,\n    useLazyComponent,\n    truthy,\n    SequenceContext,\n    useRemotionContexts,\n    RemotionContextProvider,\n    CSSUtils,\n    setupEnvVariables,\n    MediaVolumeContext,\n    SetMediaVolumeContext,\n    validateDurationInFrames,\n    validateFps,\n    validateDefaultAndInputProps,\n    validateDimension,\n    getRemotionEnvironment,\n    SharedAudioContext,\n    SharedAudioContextProvider,\n    invalidCompositionErrorMessage,\n    isCompositionIdValid,\n    getPreviewDomElement,\n    compositionsRef,\n    DELAY_RENDER_CALLSTACK_TOKEN,\n    portalNode,\n    waitForRoot,\n    CanUseRemotionHooksProvider,\n    CanUseRemotionHooks,\n    PrefetchProvider,\n    DurationsContextProvider,\n    IsPlayerContextProvider,\n    useIsPlayer,\n    validateFrame,\n    EditorPropsProvider,\n    EditorPropsContext,\n    usePreload,\n    processColor,\n    NonceContext,\n    resolveVideoConfig,\n    useResolvedVideoConfig,\n    resolveCompositionsRef,\n    ResolveCompositionConfig,\n    REMOTION_STUDIO_CONTAINER_ELEMENT,\n    RenderAssetManager,\n    bundleName: 'bundle.js',\n    bundleMapName: 'bundle.js.map',\n    persistCurrentFrame,\n    useTimelineSetFrame,\n    serializeJSONWithDate,\n    deserializeJSONWithCustomFields,\n    FILE_TOKEN,\n    DATE_TOKEN,\n    NativeLayersProvider,\n    ClipComposition,\n    isIosSafari,\n};\n\nconst flattenChildren = (children) => {\n    const childrenArray = react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(children);\n    return childrenArray.reduce((flatChildren, child) => {\n        if (child.type === react__WEBPACK_IMPORTED_MODULE_0__.Fragment) {\n            return flatChildren.concat(flattenChildren(child.props\n                .children));\n        }\n        flatChildren.push(child);\n        return flatChildren;\n    }, []);\n};\n\nconst SeriesSequenceRefForwardingFunction = ({ children }, _ref) => {\n    // Discard ref\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: children });\n};\nconst SeriesSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(SeriesSequenceRefForwardingFunction);\n/**\n * @description with this component, you can easily stitch together scenes that should play sequentially after another.\n * @see [Documentation](https://www.remotion.dev/docs/series)\n */\nconst Series = ({ children }) => {\n    const childrenValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        let startFrame = 0;\n        const flattenedChildren = flattenChildren(children);\n        return react__WEBPACK_IMPORTED_MODULE_0__.Children.map(flattenedChildren, (child, i) => {\n            var _a;\n            const castedChild = child;\n            if (typeof castedChild === 'string') {\n                // Don't throw if it's just some accidential whitespace\n                if (castedChild.trim() === '') {\n                    return null;\n                }\n                throw new TypeError(`The <Series /> component only accepts a list of <Series.Sequence /> components as it's children, but you passed a string \"${castedChild}\"`);\n            }\n            if (castedChild.type !== SeriesSequence) {\n                throw new TypeError(`The <Series /> component only accepts a list of <Series.Sequence /> components as it's children, but got ${castedChild} instead`);\n            }\n            const debugInfo = `index = ${i}, duration = ${castedChild.props.durationInFrames}`;\n            if (!(castedChild === null || castedChild === void 0 ? void 0 : castedChild.props.children)) {\n                throw new TypeError(`A <Series.Sequence /> component (${debugInfo}) was detected to not have any children. Delete it to fix this error.`);\n            }\n            const durationInFramesProp = castedChild.props.durationInFrames;\n            const { durationInFrames, children: _children, from, ...passedProps } = castedChild.props; // `from` is not accepted and must be filtered out if used in JS\n            if (i !== flattenedChildren.length - 1 ||\n                durationInFramesProp !== Infinity) {\n                validateDurationInFrames(durationInFramesProp, {\n                    component: `of a <Series.Sequence /> component`,\n                    allowFloats: true,\n                });\n            }\n            const offset = (_a = castedChild.props.offset) !== null && _a !== void 0 ? _a : 0;\n            if (Number.isNaN(offset)) {\n                throw new TypeError(`The \"offset\" property of a <Series.Sequence /> must not be NaN, but got NaN (${debugInfo}).`);\n            }\n            if (!Number.isFinite(offset)) {\n                throw new TypeError(`The \"offset\" property of a <Series.Sequence /> must be finite, but got ${offset} (${debugInfo}).`);\n            }\n            if (offset % 1 !== 0) {\n                throw new TypeError(`The \"offset\" property of a <Series.Sequence /> must be finite, but got ${offset} (${debugInfo}).`);\n            }\n            const currentStartFrame = startFrame + offset;\n            startFrame += durationInFramesProp + offset;\n            return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, { from: currentStartFrame, durationInFrames: durationInFramesProp, ...passedProps, ref: castedChild.ref, children: child }));\n        });\n    }, [children]);\n    /* eslint-disable react/jsx-no-useless-fragment */\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: childrenValue });\n};\nSeries.Sequence = SeriesSequence;\n\nconst validateSpringDuration = (dur) => {\n    if (typeof dur === 'undefined') {\n        return;\n    }\n    if (typeof dur !== 'number') {\n        throw new TypeError(`A \"duration\" of a spring must be a \"number\" but is \"${typeof dur}\"`);\n    }\n    if (Number.isNaN(dur)) {\n        throw new TypeError('A \"duration\" of a spring is NaN, which it must not be');\n    }\n    if (!Number.isFinite(dur)) {\n        throw new TypeError('A \"duration\" of a spring must be finite, but is ' + dur);\n    }\n    if (dur <= 0) {\n        throw new TypeError('A \"duration\" of a spring must be positive, but is ' + dur);\n    }\n};\n\nconst defaultSpringConfig = {\n    damping: 10,\n    mass: 1,\n    stiffness: 100,\n    overshootClamping: false,\n};\nconst advanceCache = {};\nfunction advance({ animation, now, config, }) {\n    const { toValue, lastTimestamp, current, velocity } = animation;\n    const deltaTime = Math.min(now - lastTimestamp, 64);\n    const c = config.damping;\n    const m = config.mass;\n    const k = config.stiffness;\n    const cacheKey = [\n        toValue,\n        lastTimestamp,\n        current,\n        velocity,\n        c,\n        m,\n        k,\n        now,\n    ].join('-');\n    if (advanceCache[cacheKey]) {\n        return advanceCache[cacheKey];\n    }\n    const v0 = -velocity;\n    const x0 = toValue - current;\n    const zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n    const omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n    const omega1 = omega0 * Math.sqrt(1 - zeta ** 2); // exponential decay\n    const t = deltaTime / 1000;\n    const sin1 = Math.sin(omega1 * t);\n    const cos1 = Math.cos(omega1 * t);\n    // under damped\n    const underDampedEnvelope = Math.exp(-zeta * omega0 * t);\n    const underDampedFrag1 = underDampedEnvelope *\n        (sin1 * ((v0 + zeta * omega0 * x0) / omega1) + x0 * cos1);\n    const underDampedPosition = toValue - underDampedFrag1;\n    // This looks crazy -- it's actually just the derivative of the oscillation function\n    const underDampedVelocity = zeta * omega0 * underDampedFrag1 -\n        underDampedEnvelope *\n            (cos1 * (v0 + zeta * omega0 * x0) - omega1 * x0 * sin1);\n    // critically damped\n    const criticallyDampedEnvelope = Math.exp(-omega0 * t);\n    const criticallyDampedPosition = toValue - criticallyDampedEnvelope * (x0 + (v0 + omega0 * x0) * t);\n    const criticallyDampedVelocity = criticallyDampedEnvelope *\n        (v0 * (t * omega0 - 1) + t * x0 * omega0 * omega0);\n    const animationNode = {\n        toValue,\n        prevPosition: current,\n        lastTimestamp: now,\n        current: zeta < 1 ? underDampedPosition : criticallyDampedPosition,\n        velocity: zeta < 1 ? underDampedVelocity : criticallyDampedVelocity,\n    };\n    advanceCache[cacheKey] = animationNode;\n    return animationNode;\n}\nconst calculationCache = {};\nfunction springCalculation({ from = 0, to = 1, frame, fps, config = {}, }) {\n    const cacheKey = [\n        from,\n        to,\n        frame,\n        fps,\n        config.damping,\n        config.mass,\n        config.overshootClamping,\n        config.stiffness,\n    ].join('-');\n    if (calculationCache[cacheKey]) {\n        return calculationCache[cacheKey];\n    }\n    let animation = {\n        lastTimestamp: 0,\n        current: from,\n        toValue: to,\n        velocity: 0,\n        prevPosition: 0,\n    };\n    const frameClamped = Math.max(0, frame);\n    const unevenRest = frameClamped % 1;\n    for (let f = 0; f <= Math.floor(frameClamped); f++) {\n        if (f === Math.floor(frameClamped)) {\n            f += unevenRest;\n        }\n        const time = (f / fps) * 1000;\n        animation = advance({\n            animation,\n            now: time,\n            config: {\n                ...defaultSpringConfig,\n                ...config,\n            },\n        });\n    }\n    calculationCache[cacheKey] = animation;\n    return animation;\n}\n\n/**\n * @description The function returns how long it takes for a spring animation to settle\n * @see [Documentation](https://www.remotion.dev/docs/measure-spring)\n */\nfunction measureSpring({ fps, config = {}, threshold = 0.005, from = 0, to = 1, }) {\n    if (typeof threshold !== 'number') {\n        throw new TypeError(`threshold must be a number, got ${threshold} of type ${typeof threshold}`);\n    }\n    if (threshold === 0) {\n        return Infinity;\n    }\n    if (threshold === 1) {\n        return 0;\n    }\n    if (isNaN(threshold)) {\n        throw new TypeError('Threshold is NaN');\n    }\n    if (!Number.isFinite(threshold)) {\n        throw new TypeError('Threshold is not finite');\n    }\n    if (threshold < 0) {\n        throw new TypeError('Threshold is below 0');\n    }\n    validateFps(fps, 'to the measureSpring() function', false);\n    const range = Math.abs(from - to);\n    let frame = 0;\n    let finishedFrame = 0;\n    const calc = () => {\n        return springCalculation({\n            fps,\n            frame,\n            config,\n            from,\n            to,\n        });\n    };\n    let animation = calc();\n    const calcDifference = () => {\n        return (Math.abs(animation.current - animation.toValue) /\n            (range === 0 ? 1 : range));\n    };\n    let difference = calcDifference();\n    while (difference >= threshold) {\n        frame++;\n        animation = calc();\n        difference = calcDifference();\n    }\n    // Since spring is bouncy, just because it's under the threshold we\n    // cannot be sure it's done. We need to animate further until it stays in the\n    // threshold for, say, 20 frames.\n    finishedFrame = frame;\n    for (let i = 0; i < 20; i++) {\n        frame++;\n        animation = calc();\n        difference = calcDifference();\n        if (difference >= threshold) {\n            i = 0;\n            finishedFrame = frame + 1;\n        }\n    }\n    return finishedFrame;\n}\n\n/**\n * @description Calculates a position based on physical parameters, start and end value, and time.\n * @see [Documentation](https://www.remotion.dev/docs/spring)\n * @param {number} frame The current time value. Most of the time you want to pass in the return value of useCurrentFrame.\n * @param {number} fps The framerate at which the animation runs. Pass in the value obtained by `useVideoConfig()`.\n * @param {?boolean} reverse Whether the animation plays in reverse or not. Default `false`.\n * @param {?Object} config optional object that allows you to customize the physical properties of the animation.\n * @param {number} [config.mass=1] The weight of the spring. If you reduce the mass, the animation becomes faster!\n * @param {number} [config.damping=10] How hard the animation decelerates.\n * @param {number} [config.stiffness=100] Affects bounciness of the animation.\n * @param {boolean} [config.overshootClamping=false] Whether to prevent the animation going beyond the target value.\n * @param {?number} [config.from] The initial value of the animation. Default `0`\n * @param {?number} [config.to] The end value of the animation. Default `1`\n * @param {?number} [config.durationInFrames] Stretch the duration of an animation to  a set value.. Default `undefined`\n * @param {?number} [config.durationThreshold] How close to the end the animation is considered to be done. Default `0.005`\n * @param {?number} [config.delay] Delay the animation for this amount of frames. Default `0`\n */\nfunction spring({ frame: passedFrame, fps, config = {}, from = 0, to = 1, durationInFrames: passedDurationInFrames, durationRestThreshold, delay = 0, reverse = false, }) {\n    validateSpringDuration(passedDurationInFrames);\n    validateFrame({\n        frame: passedFrame,\n        durationInFrames: Infinity,\n        allowFloats: true,\n    });\n    validateFps(fps, 'to spring()', false);\n    const needsToCalculateNaturalDuration = reverse || typeof passedDurationInFrames !== 'undefined';\n    const naturalDuration = needsToCalculateNaturalDuration\n        ? measureSpring({\n            fps,\n            config,\n            from,\n            to,\n            threshold: durationRestThreshold,\n        })\n        : undefined;\n    const naturalDurationGetter = needsToCalculateNaturalDuration\n        ? {\n            get: () => naturalDuration,\n        }\n        : {\n            get: () => {\n                throw new Error('did not calculate natural duration, this is an error with Remotion. Please report');\n            },\n        };\n    const frame = (reverse\n        ? (passedDurationInFrames !== null && passedDurationInFrames !== void 0 ? passedDurationInFrames : naturalDurationGetter.get()) - passedFrame\n        : passedFrame) - (reverse ? -delay : delay);\n    const spr = springCalculation({\n        fps,\n        frame: passedDurationInFrames === undefined\n            ? frame\n            : frame / (passedDurationInFrames / naturalDurationGetter.get()),\n        config,\n        from,\n        to,\n    });\n    if (!config.overshootClamping) {\n        return spr.current;\n    }\n    if (to >= from) {\n        return Math.min(spr.current, to);\n    }\n    return Math.max(spr.current, to);\n}\n\n/**\n * @description A `<Still />` is a `<Composition />` that is only 1 frame long.\n * @see [Documentation](https://www.remotion.dev/docs/still)\n */\nconst Still = (props) => {\n    const newProps = {\n        ...props,\n        durationInFrames: 1,\n        fps: 1,\n    };\n    // @ts-expect-error TypeScript does not understand it, but should still fail on type mismatch\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement((Composition), newProps);\n};\n\nconst OffthreadVideoForRendering = ({ onError, volume: volumeProp, playbackRate, src, muted, allowAmplificationDuringRender, transparent = false, toneFrequency, ...props }) => {\n    const absoluteFrame = useTimelinePosition();\n    const frame = useCurrentFrame();\n    const volumePropsFrame = useFrameForVolumeProp();\n    const videoConfig = useUnsafeVideoConfig();\n    const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const mediaStartsAt = useMediaStartsAt();\n    const { registerRenderAsset, unregisterRenderAsset } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RenderAssetManager);\n    if (!src) {\n        throw new TypeError('No `src` was passed to <OffthreadVideo>.');\n    }\n    // Generate a string that's as unique as possible for this asset\n    // but at the same time the same on all threads\n    const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => `offthreadvideo-${random(src !== null && src !== void 0 ? src : '')}-${sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.cumulatedFrom}-${sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.relativeFrom}-${sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.durationInFrames}`, [\n        src,\n        sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.cumulatedFrom,\n        sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.relativeFrom,\n        sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.durationInFrames,\n    ]);\n    if (!videoConfig) {\n        throw new Error('No video config found');\n    }\n    const volume = evaluateVolume({\n        volume: volumeProp,\n        frame: volumePropsFrame,\n        mediaVolume: 1,\n        allowAmplificationDuringRender: allowAmplificationDuringRender !== null && allowAmplificationDuringRender !== void 0 ? allowAmplificationDuringRender : false,\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (!src) {\n            throw new Error('No src passed');\n        }\n        if (!window.remotion_audioEnabled) {\n            return;\n        }\n        if (muted) {\n            return;\n        }\n        if (volume <= 0) {\n            return;\n        }\n        registerRenderAsset({\n            type: 'video',\n            src: getAbsoluteSrc(src),\n            id,\n            frame: absoluteFrame,\n            volume,\n            mediaFrame: frame,\n            playbackRate: playbackRate !== null && playbackRate !== void 0 ? playbackRate : 1,\n            allowAmplificationDuringRender: allowAmplificationDuringRender !== null && allowAmplificationDuringRender !== void 0 ? allowAmplificationDuringRender : false,\n            toneFrequency: toneFrequency !== null && toneFrequency !== void 0 ? toneFrequency : null,\n        });\n        return () => unregisterRenderAsset(id);\n    }, [\n        muted,\n        src,\n        registerRenderAsset,\n        id,\n        unregisterRenderAsset,\n        volume,\n        frame,\n        absoluteFrame,\n        playbackRate,\n        allowAmplificationDuringRender,\n        toneFrequency,\n    ]);\n    const currentTime = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return (getExpectedMediaFrameUncorrected({\n            frame,\n            playbackRate: playbackRate || 1,\n            startFrom: -mediaStartsAt,\n        }) / videoConfig.fps);\n    }, [frame, mediaStartsAt, playbackRate, videoConfig.fps]);\n    const actualSrc = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return `http://localhost:${window.remotion_proxyPort}/proxy?src=${encodeURIComponent(getAbsoluteSrc(src))}&time=${encodeURIComponent(currentTime)}&transparent=${String(transparent)}`;\n    }, [currentTime, src, transparent]);\n    const onErr = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {\n        if (onError) {\n            onError === null || onError === void 0 ? void 0 : onError(e);\n        }\n        else {\n            cancelRender('Failed to load image with src ' + actualSrc);\n        }\n    }, [actualSrc, onError]);\n    const className = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return [OFFTHREAD_VIDEO_CLASS_NAME, props.className]\n            .filter(truthy)\n            .join(' ');\n    }, [props.className]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Img, { src: actualSrc, className: className, ...props, onError: onErr }));\n};\n\nconst VideoForDevelopmentRefForwardingFunction = (props, ref) => {\n    var _a, _b;\n    const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const volumePropFrame = useFrameForVolumeProp();\n    const { fps, durationInFrames } = useVideoConfig();\n    const parentSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const { volume, muted, playbackRate, onlyWarnForMediaSeekingError, src, onDuration, \n    // @ts-expect-error\n    acceptableTimeShift, acceptableTimeShiftInSeconds, toneFrequency, ...nativeProps } = props;\n    if (typeof acceptableTimeShift !== 'undefined') {\n        throw new Error('acceptableTimeShift has been removed. Use acceptableTimeShiftInSeconds instead.');\n    }\n    const actualVolume = useMediaTagVolume(videoRef);\n    const [mediaVolume] = useMediaVolumeState();\n    const [mediaMuted] = useMediaMutedState();\n    useMediaInTimeline({\n        mediaRef: videoRef,\n        volume,\n        mediaVolume,\n        mediaType: 'video',\n        src,\n        playbackRate: (_a = props.playbackRate) !== null && _a !== void 0 ? _a : 1,\n    });\n    useSyncVolumeWithMediaTag({\n        volumePropFrame,\n        actualVolume,\n        volume,\n        mediaVolume,\n        mediaRef: videoRef,\n    });\n    useMediaPlayback({\n        mediaRef: videoRef,\n        src,\n        mediaType: 'video',\n        playbackRate: (_b = props.playbackRate) !== null && _b !== void 0 ? _b : 1,\n        onlyWarnForMediaSeekingError,\n        acceptableTimeshift: acceptableTimeShiftInSeconds !== null && acceptableTimeShiftInSeconds !== void 0 ? acceptableTimeShiftInSeconds : DEFAULT_ACCEPTABLE_TIMESHIFT,\n    });\n    const actualFrom = parentSequence\n        ? parentSequence.relativeFrom + parentSequence.cumulatedFrom\n        : 0;\n    const duration = parentSequence\n        ? Math.min(parentSequence.durationInFrames, durationInFrames)\n        : durationInFrames;\n    const actualSrc = useAppendVideoFragment({\n        actualSrc: usePreload(src),\n        actualFrom,\n        duration,\n        fps,\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => {\n        return videoRef.current;\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const { current } = videoRef;\n        if (!current) {\n            return;\n        }\n        const errorHandler = () => {\n            var _a;\n            if (current === null || current === void 0 ? void 0 : current.error) {\n                console.error('Error occurred in video', current === null || current === void 0 ? void 0 : current.error);\n                // If user is handling the error, we don't cause an unhandled exception\n                if (props.onError) {\n                    return;\n                }\n                throw new Error(`The browser threw an error while playing the video ${src}: Code ${current.error.code} - ${(_a = current === null || current === void 0 ? void 0 : current.error) === null || _a === void 0 ? void 0 : _a.message}. See https://remotion.dev/docs/media-playback-error for help. Pass an onError() prop to handle the error.`);\n            }\n            else {\n                throw new Error('The browser threw an error');\n            }\n        };\n        current.addEventListener('error', errorHandler, { once: true });\n        return () => {\n            current.removeEventListener('error', errorHandler);\n        };\n    }, [props.onError, src]);\n    const currentOnDurationCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    currentOnDurationCallback.current = onDuration;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        var _a;\n        const { current } = videoRef;\n        if (!current) {\n            return;\n        }\n        if (current.duration) {\n            (_a = currentOnDurationCallback.current) === null || _a === void 0 ? void 0 : _a.call(currentOnDurationCallback, src, current.duration);\n            return;\n        }\n        const onLoadedMetadata = () => {\n            var _a;\n            (_a = currentOnDurationCallback.current) === null || _a === void 0 ? void 0 : _a.call(currentOnDurationCallback, src, current.duration);\n        };\n        current.addEventListener('loadedmetadata', onLoadedMetadata);\n        return () => {\n            current.removeEventListener('loadedmetadata', onLoadedMetadata);\n        };\n    }, [src]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"video\", { ref: videoRef, \n        // Without this, on iOS Safari, the video cannot be seeked.\n        // if a seek is triggered before `loadedmetadata` is fired,\n        // the video will not seek, even if `loadedmetadata` is fired afterwards.\n        preload: isIosSafari() ? 'metadata' : 'auto', muted: muted || mediaMuted, playsInline: true, src: actualSrc, ...nativeProps }));\n};\n// Copy types from forwardRef but not necessary to remove ref\nconst VideoForDevelopment = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(VideoForDevelopmentRefForwardingFunction);\n\n/**\n * @description This method imports and displays a video, similar to <Video />. During rendering, it extracts the exact frame from the video and displays it in an <img> tag\n * @see [Documentation](https://www.remotion.dev/docs/offthreadvideo)\n */\nconst OffthreadVideo = (props) => {\n    // Should only destruct `startFrom` and `endAt` from props,\n    // rest gets drilled down\n    const { startFrom, endAt, ...otherProps } = props;\n    const environment = getRemotionEnvironment();\n    const onDuration = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => undefined, []);\n    if (typeof props.src !== 'string') {\n        throw new TypeError(`The \\`<OffthreadVideo>\\` tag requires a string for \\`src\\`, but got ${JSON.stringify(props.src)} instead.`);\n    }\n    if (props.imageFormat) {\n        throw new TypeError(`The \\`<OffthreadVideo>\\` tag does no longer accept \\`imageFormat\\`. Use the \\`transparent\\` prop if you want to render a transparent video.`);\n    }\n    if (typeof startFrom !== 'undefined' || typeof endAt !== 'undefined') {\n        validateStartFromProps(startFrom, endAt);\n        const startFromFrameNo = startFrom !== null && startFrom !== void 0 ? startFrom : 0;\n        const endAtFrameNo = endAt !== null && endAt !== void 0 ? endAt : Infinity;\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, { layout: \"none\", from: 0 - startFromFrameNo, showInTimeline: false, durationInFrames: endAtFrameNo, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(OffthreadVideo, { ...otherProps }) }));\n    }\n    validateMediaProps(props, 'Video');\n    if (environment.isRendering) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(OffthreadVideoForRendering, { ...otherProps });\n    }\n    const { transparent, ...withoutTransparent } = otherProps;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(VideoForDevelopment, { onDuration: onDuration, onlyWarnForMediaSeekingError: true, ...withoutTransparent }));\n};\n\nconst VideoForRenderingForwardFunction = ({ onError, volume: volumeProp, allowAmplificationDuringRender, playbackRate, onDuration, toneFrequency, ...props }, ref) => {\n    const absoluteFrame = useTimelinePosition();\n    const frame = useCurrentFrame();\n    const volumePropsFrame = useFrameForVolumeProp();\n    const videoConfig = useUnsafeVideoConfig();\n    const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const mediaStartsAt = useMediaStartsAt();\n    const environment = getRemotionEnvironment();\n    const { registerRenderAsset, unregisterRenderAsset } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RenderAssetManager);\n    // Generate a string that's as unique as possible for this asset\n    // but at the same time the same on all threads\n    const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        var _a;\n        return `video-${random((_a = props.src) !== null && _a !== void 0 ? _a : '')}-${sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.cumulatedFrom}-${sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.relativeFrom}-${sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.durationInFrames}`;\n    }, [\n        props.src,\n        sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.cumulatedFrom,\n        sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.relativeFrom,\n        sequenceContext === null || sequenceContext === void 0 ? void 0 : sequenceContext.durationInFrames,\n    ]);\n    if (!videoConfig) {\n        throw new Error('No video config found');\n    }\n    const volume = evaluateVolume({\n        volume: volumeProp,\n        frame: volumePropsFrame,\n        mediaVolume: 1,\n        allowAmplificationDuringRender: allowAmplificationDuringRender !== null && allowAmplificationDuringRender !== void 0 ? allowAmplificationDuringRender : false,\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (!props.src) {\n            throw new Error('No src passed');\n        }\n        if (props.muted) {\n            return;\n        }\n        if (volume <= 0) {\n            return;\n        }\n        if (!window.remotion_audioEnabled) {\n            return;\n        }\n        registerRenderAsset({\n            type: 'video',\n            src: getAbsoluteSrc(props.src),\n            id,\n            frame: absoluteFrame,\n            volume,\n            mediaFrame: frame,\n            playbackRate: playbackRate !== null && playbackRate !== void 0 ? playbackRate : 1,\n            allowAmplificationDuringRender: allowAmplificationDuringRender !== null && allowAmplificationDuringRender !== void 0 ? allowAmplificationDuringRender : false,\n            toneFrequency: toneFrequency !== null && toneFrequency !== void 0 ? toneFrequency : null,\n        });\n        return () => unregisterRenderAsset(id);\n    }, [\n        props.muted,\n        props.src,\n        registerRenderAsset,\n        id,\n        unregisterRenderAsset,\n        volume,\n        frame,\n        absoluteFrame,\n        playbackRate,\n        allowAmplificationDuringRender,\n        toneFrequency,\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => {\n        return videoRef.current;\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (!window.remotion_videoEnabled) {\n            return;\n        }\n        const { current } = videoRef;\n        if (!current) {\n            return;\n        }\n        const currentTime = (() => {\n            return getMediaTime({\n                fps: videoConfig.fps,\n                frame,\n                src: props.src,\n                playbackRate: playbackRate || 1,\n                startFrom: -mediaStartsAt,\n                mediaType: 'video',\n            });\n        })();\n        const handle = delayRender(`Rendering <Video /> with src=\"${props.src}\"`);\n        if (false) {}\n        if (isApproximatelyTheSame(current.currentTime, currentTime)) {\n            if (current.readyState >= 2) {\n                continueRender(handle);\n                return;\n            }\n            const loadedDataHandler = () => {\n                continueRender(handle);\n            };\n            current.addEventListener('loadeddata', loadedDataHandler, { once: true });\n            return () => {\n                current.removeEventListener('loadeddata', loadedDataHandler);\n            };\n        }\n        current.currentTime = currentTime;\n        const seekedHandler = () => {\n            warnAboutNonSeekableMedia(current, 'exception');\n            if (window.navigator.platform.startsWith('Mac')) {\n                // Improve me: This is ensures frame perfectness but slows down render.\n                // Please see this issue for context: https://github.com/remotion-dev/remotion/issues/200\n                // Only affects macOS since it uses VideoToolbox decoding.\n                setTimeout(() => {\n                    continueRender(handle);\n                }, 100);\n            }\n            else {\n                continueRender(handle);\n            }\n        };\n        current.addEventListener('seeked', seekedHandler, { once: true });\n        const endedHandler = () => {\n            continueRender(handle);\n        };\n        current.addEventListener('ended', endedHandler, { once: true });\n        const errorHandler = () => {\n            var _a;\n            if (current === null || current === void 0 ? void 0 : current.error) {\n                console.error('Error occurred in video', current === null || current === void 0 ? void 0 : current.error);\n                // If user is handling the error, we don't cause an unhandled exception\n                if (onError) {\n                    return;\n                }\n                throw new Error(`The browser threw an error while playing the video ${props.src}: Code ${current.error.code} - ${(_a = current === null || current === void 0 ? void 0 : current.error) === null || _a === void 0 ? void 0 : _a.message}. See https://remotion.dev/docs/media-playback-error for help. Pass an onError() prop to handle the error.`);\n            }\n            else {\n                throw new Error('The browser threw an error');\n            }\n        };\n        current.addEventListener('error', errorHandler, { once: true });\n        // If video skips to another frame or unmounts, we clear the created handle\n        return () => {\n            current.removeEventListener('ended', endedHandler);\n            current.removeEventListener('error', errorHandler);\n            current.removeEventListener('seeked', seekedHandler);\n            continueRender(handle);\n        };\n    }, [\n        volumePropsFrame,\n        props.src,\n        playbackRate,\n        videoConfig.fps,\n        frame,\n        mediaStartsAt,\n        onError,\n    ]);\n    const { src } = props;\n    // If video source switches, make new handle\n    if (environment.isRendering) {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n            if (false) {}\n            const newHandle = delayRender('Loading <Video> duration with src=' + src);\n            const { current } = videoRef;\n            const didLoad = () => {\n                if (current === null || current === void 0 ? void 0 : current.duration) {\n                    onDuration(src, current.duration);\n                }\n                continueRender(newHandle);\n            };\n            if (current === null || current === void 0 ? void 0 : current.duration) {\n                onDuration(src, current.duration);\n                continueRender(newHandle);\n            }\n            else {\n                current === null || current === void 0 ? void 0 : current.addEventListener('loadedmetadata', didLoad, { once: true });\n            }\n            // If tag gets unmounted, clear pending handles because video metadata is not going to load\n            return () => {\n                current === null || current === void 0 ? void 0 : current.removeEventListener('loadedmetadata', didLoad);\n                continueRender(newHandle);\n            };\n        }, [src, onDuration]);\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"video\", { ref: videoRef, ...props, onError: onError });\n};\nconst VideoForRendering = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(VideoForRenderingForwardFunction);\n\nconst VideoForwardingFunction = (props, ref) => {\n    var _a;\n    const { startFrom, endAt, ...otherProps } = props;\n    const { loop, ...propsOtherThanLoop } = props;\n    const { fps } = useVideoConfig();\n    const environment = getRemotionEnvironment();\n    const { durations, setDurations } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(DurationsContext);\n    if (typeof ref === 'string') {\n        throw new Error('string refs are not supported');\n    }\n    if (typeof props.src !== 'string') {\n        throw new TypeError(`The \\`<Video>\\` tag requires a string for \\`src\\`, but got ${JSON.stringify(props.src)} instead.`);\n    }\n    const onDuration = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((src, durationInSeconds) => {\n        setDurations({ type: 'got-duration', durationInSeconds, src });\n    }, [setDurations]);\n    if (loop && props.src && durations[getAbsoluteSrc(props.src)] !== undefined) {\n        const mediaDuration = durations[getAbsoluteSrc(props.src)] * fps;\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Loop, { durationInFrames: calculateLoopDuration({\n                endAt,\n                mediaDuration,\n                playbackRate: (_a = props.playbackRate) !== null && _a !== void 0 ? _a : 1,\n                startFrom,\n            }), layout: \"none\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Video, { ...propsOtherThanLoop, ref: ref }) }));\n    }\n    if (typeof startFrom !== 'undefined' || typeof endAt !== 'undefined') {\n        validateStartFromProps(startFrom, endAt);\n        const startFromFrameNo = startFrom !== null && startFrom !== void 0 ? startFrom : 0;\n        const endAtFrameNo = endAt !== null && endAt !== void 0 ? endAt : Infinity;\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, { layout: \"none\", from: 0 - startFromFrameNo, showInTimeline: false, durationInFrames: endAtFrameNo, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Video, { ...otherProps, ref: ref }) }));\n    }\n    validateMediaProps(props, 'Video');\n    if (environment.isRendering) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(VideoForRendering, { onDuration: onDuration, ...otherProps, ref: ref }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(VideoForDevelopment, { onlyWarnForMediaSeekingError: false, ...otherProps, ref: ref, onDuration: onDuration }));\n};\nconst forward = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef;\n/**\n * @description allows you to include a video file in your Remotion project. It wraps the native HTMLVideoElement.\n * @see [Documentation](https://www.remotion.dev/docs/video)\n */\nconst Video = forward(VideoForwardingFunction);\n\ncheckMultipleRemotionVersions();\nconst Experimental = {\n    /**\n     * @description This is a special component that will cause Remotion to only partially capture the frame of the video.\n     * @see [Documentation](https://www.remotion.dev/docs/clipper)\n     */\n    Clipper,\n    /**\n     * @description This is a special component, that, when rendered, will skip rendering the frame altogether.\n     * @see [Documentation](https://www.remotion.dev/docs/null)\n     */\n    Null,\n    useIsPlayer,\n};\nconst proxyObj = {};\nconst Config = new Proxy(proxyObj, {\n    get(_, prop) {\n        if (prop === 'Bundling' ||\n            prop === 'Rendering' ||\n            prop === 'Log' ||\n            prop === 'Puppeteer' ||\n            prop === 'Output') {\n            return Config;\n        }\n        return () => {\n            console.warn('⚠️  The CLI configuration has been extracted from Remotion Core.');\n            console.warn('Update the import from the config file:');\n            console.warn();\n            console.warn('- Delete:');\n            console.warn('import {Config} from \"remotion\";');\n            console.warn('+ Replace:');\n            console.warn('import {Config} from \"@remotion/cli/config\";');\n            console.warn();\n            console.warn('For more information, see https://www.remotion.dev/docs/4-0-migration.');\n            process.exit(1);\n        };\n    },\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/remotion@4.0.47_react-dom@18.2.0_react@18.2.0/node_modules/remotion/dist/esm/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../use-remotion-player/dist/index.mjs":
/*!*********************************************!*\
  !*** ../use-remotion-player/dist/index.mjs ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomizablePlayer: function() { return /* binding */ CustomizablePlayer; },\n/* harmony export */   useRemotionPlayer: function() { return /* binding */ useRemotionPlayer; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _remotion_player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @remotion/player */ \"(app-pages-browser)/../../node_modules/.pnpm/@remotion+player@4.0.47_react-dom@18.2.0_react@18.2.0/node_modules/@remotion/player/dist/esm/index.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/jsx-runtime.js\");\n// src/use-remotion-player.ts\n\nvar useRemotionPlayer = (playerRef, {\n  onSeeked,\n  onPause,\n  onPlay,\n  onRateChange,\n  onScaleChange,\n  onVolumeChange,\n  onEnded,\n  onError,\n  onTimeUpdate,\n  onFrameUpdate,\n  onFullscreenChange,\n  onMuteChange\n}) => {\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!(playerRef == null ? void 0 : playerRef.current))\n      return;\n    const { current } = playerRef;\n    if (onScaleChange) {\n      current.addEventListener(\"scalechange\", onScaleChange);\n    }\n    if (onSeeked) {\n      current.addEventListener(\"seeked\", onSeeked);\n    }\n    if (onPause) {\n      current.addEventListener(\"pause\", onPause);\n    }\n    if (onPlay) {\n      current.addEventListener(\"play\", onPlay);\n    }\n    if (onRateChange) {\n      current.addEventListener(\"ratechange\", onRateChange);\n    }\n    if (onVolumeChange) {\n      current.addEventListener(\"volumechange\", onVolumeChange);\n    }\n    if (onEnded) {\n      current.addEventListener(\"ended\", onEnded);\n    }\n    if (onError) {\n      current.addEventListener(\"error\", onError);\n    }\n    if (onTimeUpdate) {\n      current.addEventListener(\"timeupdate\", onTimeUpdate);\n    }\n    if (onFrameUpdate) {\n      current.addEventListener(\"frameupdate\", onFrameUpdate);\n    }\n    if (onFullscreenChange) {\n      current.addEventListener(\"fullscreenchange\", onFullscreenChange);\n    }\n    if (onMuteChange) {\n      current.addEventListener(\"mutechange\", onMuteChange);\n    }\n    return () => {\n      if (onScaleChange) {\n        current.removeEventListener(\"scalechange\", onScaleChange);\n      }\n      if (onSeeked) {\n        current.removeEventListener(\"seeked\", onSeeked);\n      }\n      if (onPause) {\n        current.removeEventListener(\"pause\", onPause);\n      }\n      if (onPlay) {\n        current.removeEventListener(\"play\", onPlay);\n      }\n      if (onRateChange) {\n        current.removeEventListener(\"ratechange\", onRateChange);\n      }\n      if (onVolumeChange) {\n        current.removeEventListener(\"volumechange\", onVolumeChange);\n      }\n      if (onEnded) {\n        current.removeEventListener(\"ended\", onEnded);\n      }\n      if (onError) {\n        current.removeEventListener(\"error\", onError);\n      }\n      if (onTimeUpdate) {\n        current.removeEventListener(\"timeupdate\", onTimeUpdate);\n      }\n      if (onFrameUpdate) {\n        current.removeEventListener(\"frameupdate\", onFrameUpdate);\n      }\n      if (onFullscreenChange) {\n        current.removeEventListener(\"fullscreenchange\", onFullscreenChange);\n      }\n      if (onMuteChange) {\n        current.removeEventListener(\"mutechange\", onMuteChange);\n      }\n    };\n  }, [\n    onEnded,\n    onError,\n    onFrameUpdate,\n    onFullscreenChange,\n    onMuteChange,\n    onPause,\n    onPlay,\n    onRateChange,\n    onScaleChange,\n    onSeeked,\n    onTimeUpdate,\n    onVolumeChange,\n    playerRef\n  ]);\n};\n\n// src/CustomizablePlayer.tsx\n\n\n\n\nvar PlayerInternal = ({\n  onSeeked,\n  onPause,\n  onPlay,\n  onRateChange,\n  onScaleChange,\n  onVolumeChange,\n  onEnded,\n  onError,\n  onTimeUpdate,\n  onFrameUpdate,\n  onFullscreenChange,\n  onMuteChange,\n  ...props\n}, forwardedRef) => {\n  const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  if (forwardedRef) {\n    if (typeof forwardedRef === \"function\") {\n      forwardedRef(ref.current);\n    } else {\n      forwardedRef.current = ref.current;\n    }\n  }\n  useRemotionPlayer(ref, {\n    onSeeked,\n    onPause,\n    onPlay,\n    onRateChange,\n    onScaleChange,\n    onVolumeChange,\n    onEnded,\n    onError,\n    onTimeUpdate,\n    onFrameUpdate,\n    onFullscreenChange,\n    onMuteChange\n  });\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_remotion_player__WEBPACK_IMPORTED_MODULE_2__.Player, { ...props, ref });\n};\nvar CustomizablePlayer = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(PlayerInternal);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi91c2UtcmVtb3Rpb24tcGxheWVyL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsRUFBRSxnREFBUztBQUNYO0FBQ0E7QUFDQSxZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDK0I7QUFDSTtBQUNPO0FBQ0Y7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxjQUFjLDZDQUFNO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCx5QkFBeUIsc0RBQUcsQ0FBQyxvREFBTSxJQUFJLGVBQWU7QUFDdEQ7QUFDQSx5QkFBeUIsaURBQVU7QUFJakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL3VzZS1yZW1vdGlvbi1wbGF5ZXIvZGlzdC9pbmRleC5tanM/ZjFiYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXNlLXJlbW90aW9uLXBsYXllci50c1xuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG52YXIgdXNlUmVtb3Rpb25QbGF5ZXIgPSAocGxheWVyUmVmLCB7XG4gIG9uU2Vla2VkLFxuICBvblBhdXNlLFxuICBvblBsYXksXG4gIG9uUmF0ZUNoYW5nZSxcbiAgb25TY2FsZUNoYW5nZSxcbiAgb25Wb2x1bWVDaGFuZ2UsXG4gIG9uRW5kZWQsXG4gIG9uRXJyb3IsXG4gIG9uVGltZVVwZGF0ZSxcbiAgb25GcmFtZVVwZGF0ZSxcbiAgb25GdWxsc2NyZWVuQ2hhbmdlLFxuICBvbk11dGVDaGFuZ2Vcbn0pID0+IHtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIShwbGF5ZXJSZWYgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXllclJlZi5jdXJyZW50KSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCB7IGN1cnJlbnQgfSA9IHBsYXllclJlZjtcbiAgICBpZiAob25TY2FsZUNoYW5nZSkge1xuICAgICAgY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwic2NhbGVjaGFuZ2VcIiwgb25TY2FsZUNoYW5nZSk7XG4gICAgfVxuICAgIGlmIChvblNlZWtlZCkge1xuICAgICAgY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwic2Vla2VkXCIsIG9uU2Vla2VkKTtcbiAgICB9XG4gICAgaWYgKG9uUGF1c2UpIHtcbiAgICAgIGN1cnJlbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBhdXNlXCIsIG9uUGF1c2UpO1xuICAgIH1cbiAgICBpZiAob25QbGF5KSB7XG4gICAgICBjdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwbGF5XCIsIG9uUGxheSk7XG4gICAgfVxuICAgIGlmIChvblJhdGVDaGFuZ2UpIHtcbiAgICAgIGN1cnJlbnQuYWRkRXZlbnRMaXN0ZW5lcihcInJhdGVjaGFuZ2VcIiwgb25SYXRlQ2hhbmdlKTtcbiAgICB9XG4gICAgaWYgKG9uVm9sdW1lQ2hhbmdlKSB7XG4gICAgICBjdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ2b2x1bWVjaGFuZ2VcIiwgb25Wb2x1bWVDaGFuZ2UpO1xuICAgIH1cbiAgICBpZiAob25FbmRlZCkge1xuICAgICAgY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwiZW5kZWRcIiwgb25FbmRlZCk7XG4gICAgfVxuICAgIGlmIChvbkVycm9yKSB7XG4gICAgICBjdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBvbkVycm9yKTtcbiAgICB9XG4gICAgaWYgKG9uVGltZVVwZGF0ZSkge1xuICAgICAgY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwidGltZXVwZGF0ZVwiLCBvblRpbWVVcGRhdGUpO1xuICAgIH1cbiAgICBpZiAob25GcmFtZVVwZGF0ZSkge1xuICAgICAgY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwiZnJhbWV1cGRhdGVcIiwgb25GcmFtZVVwZGF0ZSk7XG4gICAgfVxuICAgIGlmIChvbkZ1bGxzY3JlZW5DaGFuZ2UpIHtcbiAgICAgIGN1cnJlbnQuYWRkRXZlbnRMaXN0ZW5lcihcImZ1bGxzY3JlZW5jaGFuZ2VcIiwgb25GdWxsc2NyZWVuQ2hhbmdlKTtcbiAgICB9XG4gICAgaWYgKG9uTXV0ZUNoYW5nZSkge1xuICAgICAgY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwibXV0ZWNoYW5nZVwiLCBvbk11dGVDaGFuZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKG9uU2NhbGVDaGFuZ2UpIHtcbiAgICAgICAgY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2NhbGVjaGFuZ2VcIiwgb25TY2FsZUNoYW5nZSk7XG4gICAgICB9XG4gICAgICBpZiAob25TZWVrZWQpIHtcbiAgICAgICAgY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Vla2VkXCIsIG9uU2Vla2VkKTtcbiAgICAgIH1cbiAgICAgIGlmIChvblBhdXNlKSB7XG4gICAgICAgIGN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhdXNlXCIsIG9uUGF1c2UpO1xuICAgICAgfVxuICAgICAgaWYgKG9uUGxheSkge1xuICAgICAgICBjdXJyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwbGF5XCIsIG9uUGxheSk7XG4gICAgICB9XG4gICAgICBpZiAob25SYXRlQ2hhbmdlKSB7XG4gICAgICAgIGN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJhdGVjaGFuZ2VcIiwgb25SYXRlQ2hhbmdlKTtcbiAgICAgIH1cbiAgICAgIGlmIChvblZvbHVtZUNoYW5nZSkge1xuICAgICAgICBjdXJyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2b2x1bWVjaGFuZ2VcIiwgb25Wb2x1bWVDaGFuZ2UpO1xuICAgICAgfVxuICAgICAgaWYgKG9uRW5kZWQpIHtcbiAgICAgICAgY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZW5kZWRcIiwgb25FbmRlZCk7XG4gICAgICB9XG4gICAgICBpZiAob25FcnJvcikge1xuICAgICAgICBjdXJyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBvbkVycm9yKTtcbiAgICAgIH1cbiAgICAgIGlmIChvblRpbWVVcGRhdGUpIHtcbiAgICAgICAgY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidGltZXVwZGF0ZVwiLCBvblRpbWVVcGRhdGUpO1xuICAgICAgfVxuICAgICAgaWYgKG9uRnJhbWVVcGRhdGUpIHtcbiAgICAgICAgY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZnJhbWV1cGRhdGVcIiwgb25GcmFtZVVwZGF0ZSk7XG4gICAgICB9XG4gICAgICBpZiAob25GdWxsc2NyZWVuQ2hhbmdlKSB7XG4gICAgICAgIGN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZ1bGxzY3JlZW5jaGFuZ2VcIiwgb25GdWxsc2NyZWVuQ2hhbmdlKTtcbiAgICAgIH1cbiAgICAgIGlmIChvbk11dGVDaGFuZ2UpIHtcbiAgICAgICAgY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibXV0ZWNoYW5nZVwiLCBvbk11dGVDaGFuZ2UpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtcbiAgICBvbkVuZGVkLFxuICAgIG9uRXJyb3IsXG4gICAgb25GcmFtZVVwZGF0ZSxcbiAgICBvbkZ1bGxzY3JlZW5DaGFuZ2UsXG4gICAgb25NdXRlQ2hhbmdlLFxuICAgIG9uUGF1c2UsXG4gICAgb25QbGF5LFxuICAgIG9uUmF0ZUNoYW5nZSxcbiAgICBvblNjYWxlQ2hhbmdlLFxuICAgIG9uU2Vla2VkLFxuICAgIG9uVGltZVVwZGF0ZSxcbiAgICBvblZvbHVtZUNoYW5nZSxcbiAgICBwbGF5ZXJSZWZcbiAgXSk7XG59O1xuXG4vLyBzcmMvQ3VzdG9taXphYmxlUGxheWVyLnRzeFxuaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBmb3J3YXJkUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tIFwiQHJlbW90aW9uL3BsYXllclwiO1xuaW1wb3J0IHsganN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG52YXIgUGxheWVySW50ZXJuYWwgPSAoe1xuICBvblNlZWtlZCxcbiAgb25QYXVzZSxcbiAgb25QbGF5LFxuICBvblJhdGVDaGFuZ2UsXG4gIG9uU2NhbGVDaGFuZ2UsXG4gIG9uVm9sdW1lQ2hhbmdlLFxuICBvbkVuZGVkLFxuICBvbkVycm9yLFxuICBvblRpbWVVcGRhdGUsXG4gIG9uRnJhbWVVcGRhdGUsXG4gIG9uRnVsbHNjcmVlbkNoYW5nZSxcbiAgb25NdXRlQ2hhbmdlLFxuICAuLi5wcm9wc1xufSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZihudWxsKTtcbiAgaWYgKGZvcndhcmRlZFJlZikge1xuICAgIGlmICh0eXBlb2YgZm9yd2FyZGVkUmVmID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGZvcndhcmRlZFJlZihyZWYuY3VycmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcndhcmRlZFJlZi5jdXJyZW50ID0gcmVmLmN1cnJlbnQ7XG4gICAgfVxuICB9XG4gIHVzZVJlbW90aW9uUGxheWVyKHJlZiwge1xuICAgIG9uU2Vla2VkLFxuICAgIG9uUGF1c2UsXG4gICAgb25QbGF5LFxuICAgIG9uUmF0ZUNoYW5nZSxcbiAgICBvblNjYWxlQ2hhbmdlLFxuICAgIG9uVm9sdW1lQ2hhbmdlLFxuICAgIG9uRW5kZWQsXG4gICAgb25FcnJvcixcbiAgICBvblRpbWVVcGRhdGUsXG4gICAgb25GcmFtZVVwZGF0ZSxcbiAgICBvbkZ1bGxzY3JlZW5DaGFuZ2UsXG4gICAgb25NdXRlQ2hhbmdlXG4gIH0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeChQbGF5ZXIsIHsgLi4ucHJvcHMsIHJlZiB9KTtcbn07XG52YXIgQ3VzdG9taXphYmxlUGxheWVyID0gZm9yd2FyZFJlZihQbGF5ZXJJbnRlcm5hbCk7XG5leHBvcnQge1xuICBDdXN0b21pemFibGVQbGF5ZXIsXG4gIHVzZVJlbW90aW9uUGxheWVyXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../use-remotion-player/dist/index.mjs\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/../../node_modules/.pnpm/next@13.5.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fmohit%2Fdev%2Fopen-source%2Fuse-remotion-player%2Fpackages%2Fexample%2Fapp%2Fpage.tsx&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);